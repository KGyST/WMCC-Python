<Symbol IsArchivable="no" IsPlaceable="no" MainGUID="A3E7E7B4-15C5-4F20-8CD0-8B24703F2356" MigrationValue="Normal" Owner="1196638531" Signature="1196644685" Version="34">
<Ancestry SectVersion="1" SectionFlags="0" SubIdent="0" Template="no">
	<MainGUID>F938E33A-329D-4A36-BE3E-85E126820996</MainGUID>
	<MainGUID>103E8D2C-8230-42E1-9597-46F84CCE28C0</MainGUID>
	<MainGUID>B2970E4C-8680-4061-8670-2F4B638F3953</MainGUID>
</Ancestry>

<!-- GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT -->

<Script_3D SectVersion="20" SectionFlags="0" SubIdent="0"><![CDATA[

! Contact person: <NJ>

! ==============================================================================
! This macro draws the Sill
! ------------------------------------------------------------------------------
! Input parameters:
! Geometry ---------------------------------------------------------------------
!	A:						wallhole width (length) (Obsolete)
!	B:						wallhole height (length)
!	refWidth:				reference width in curved walls (length)
!	leftWidth:				wallhole's side distance from the origin at the left side (length)
!	rightWidth:				wallhole's side distance from the origin at the right side (length)
!	AC_Hole_Position_Angle:	Position angle of the window in a curved wall
!	offsY:					for positioning 3D along y (length)
! Functions --------------------------------------------------------------------
!	gs_IsCurved:			Does the window follow the curvature of the wall? (0 / 1)
!	iWindowShape:			Shape of the window (integer)
!								0 = rectangular (default)
!								1 = arched
!							Note: only the rectangular shape can be a Corner Window
! Reveal -----------------------------------------------------------------------
!	iRevealType:
!	gs_reveal_left_angle:
!	gs_reveal_right_angle:
! Corner Function --------------------------------------------------------------
!	bLeftCornerFunction:	Turn macro in Corner Window mode at the left side (0 / 1)
!	leftCornerAngle:		Angle between connected walls in case of Corner Window (angle)
!	leftConnWallThk:		Thickness of the connected wall in case of Corner Window (length)
!	bRightCornerFunction:	Turn macro in Corner Window mode at the right side (0 / 1)
!	rightCornerAngle:		Angle between connected walls in case of Corner Window (angle)
!	rightConnWallThk:		Thickness of the connected wall in case of Corner Window (length)
! Oversize ---------------------------------------------------------------------
!	gs_left_oversize:		Left opening oversize (length)
!	gs_right_oversize:		Right opening oversize (length)
!	gs_lower_oversize:		Lower opening oversize (length)
! Sill -------------------------------------------------------------------------
!	gs_SillTypeEnable:		Enables sill types for the objects
!								(integer; j1 + 2*j2 + 4*j3 + 8*j4 + 16*j5 + 32*j6 + 64*j7 )
!								(j1: Standard Sill, j2: Brick Sill, j3: Stone Sill, j4: Ceramic Sill)
!								(j5: Eternite Sill, j6: Concrete Tub, j7: Aluminum Sill)
!	iSillType:				Identifies the type of the Sill.
!								(integer; 1 = Standard Sill, 2 = Brick Sill, 3 = Stone Sill, 4 = Ceramic Sill)
!								(5 = Eternite Sill, 6 = Concrete Tub, 7 = Aluminum Sill)
!	gs_sill_thk:			Thickness of the Sill. (length)
!	gs_sill_nosing:			Nosing of the Sill. (length)
!	gs_sill_angle:			Sill slope. (angle)
!	gs_sill_drip:			Drip in Sills (Only effective in Stone Sill)  (0 / 1)
!	gs_sill_ovhg_left:		Sill overhang on the left side. (length)
!	gs_sill_ovhg_right:		Sill overhang on the right side. (length)
!	gs_sill_slip_in:		Slip in of the Sill. Only effective when iSillType = 2 or iSillType = 3 (length)
!	gs_sill_slip_wall:		Slip in of the Sill counted by the walledge (and not from frame edge like gs_sill_slip_in)
!	gs_sill_width:			Width of the Brick or Timber Sill. Only effective when iSillType = 2 (length)
!	gs_sill_topWidth:		Sill Top Width
!	gs_sill_topHeight:		Sill Top Height
!	gs_sill_curved:			Sill edge is curved or straight. (0 / 1)
!	bShowSillSplice:		Show or hide the Sill's joint line in case of Corner Window  (0 / 1)
!	gs_sill_endthk:			Outer thickness (CHE profile parameters)
!	gs_sill_elev:			Insulation thickness under the sill (CHE profile parameters)
!	gs_sill_dripnos:		Drin hanging height (CHE profile parameters)
!	gs_sill_dripwidth:		Drin width (CHE profile parameters)
! Ganging ----------------------------------------------------------------------
!	gs_stack_left:			Align to door/window on left side (0 / 1)
!	gs_stack_right:			Align to door/window on right side (0 / 1)
!	gs_stack_bottom:		Align to door/window on bottom side (0 / 1)
! 2D Representation ------------------------------------------------------------
!	gs_sill_fill:			Type of the fill on the Sill. (fill type)
!	gs_sill_pen_fg:			Fill pen on the Sill. (pen)
!	gs_sill_pen_bg:			Fill background pen on the Sill. (pen)
!	gs_sill_pen_sectcont:	Section contour pen of the sill
! 3D Representation ------------------------------------------------------------
!	lod3D:					Level of detail. Not used. (integer)
!	gs_frame_pen:			Drawing pen of 3D. (pen)
! Materials --------------------------------------------------------------------
!	gs_sill_mat:			Sill material (material)
! Section Representation Parameters (CHE profile parameters) --------------------
!	gs_sill_pen_ins_sectcont:	Section contour pen of the insulation under the sill
!	gs_sill_fill_ins_fg:		Section fill type of the insulation under the sill
!	gs_sill_pen_ins_fg:			Section fill pen of the insulation under the sill
!	gs_sill_pen_ins_bg:			Section fill background of the insulation under the sill
!
! Related Global Variables:
!	GLOB_SCRIPT_TYPE
!	GLOB_CONTEXT
!	WALL_THICKNESS
!	WALL_INCL
!	WALL_RESOL
!	WIDO_FRAME_THICKNESS
!	WIDO_SILL
!	WIDO_LEFT_JAMB
!	WIDO_RIGHT_JAMB
!	WIDO_THRES_DEPTH
!	WIDO_HEAD_DEPTH
!	WIDO_ORIG_DIST
!	WIDO_REVEAL_SIDE
!	SYMB_MIRRORED
!	SYMB_ROTANGLE
!	SYMB_FILL
!	SYMB_SECT_PEN
!	SYMB_FILL_PEN
!	SYMB_FBGD_PEN
! ==============================================================================



sillRight			= 0
sillLeft			= 0
sillLeft_sL			= 0
sillRight_sL		= 0
sillLeft_sR			= 0
sillRight_sR		= 0
sillBottom			= 0
sillBottomOutside	= 0
sillSideHeight		= 0
sillSideAngle		= 0
dim sillPoly[]
	sillPoly[1] = 0

! Draw Sill --------------------------------------------------------------------

if lod3D > 0 & bDrawSill & not(gs_stack_bottom) then

	if gs_sill_fill			< 1 then gs_sill_fill			= SYMB_FILL
	if gs_sill_pen_bg		< 1 then gs_sill_pen_bg			= SYMB_FBGD_PEN
	if gs_sill_pen_fg		< 1 then gs_sill_pen_fg			= SYMB_FILL_PEN
	if gs_sill_pen_3D		< 1 then gs_sill_pen_3D			= gs_frame_pen		! Compatibility

	rotx -90

	resol WALL_RESOL

	sillElevation = -overSizeLower + WIDO_THRES_DEPTH

	if not(gs_turn_plaster_show_3D) then
		thkPlasterAtSillLeft	= 0
		thkPlasterAtSillRight	= 0
	endif
	if gs_stack_left then
		thkPlasterAtSillLeft	= 0
	endif
	if gs_stack_right then
		thkPlasterAtSillRight	= 0
	endif


! ==============================================================================
! Draw Sill
! ==============================================================================

	if abs(gs_sill_slip_wall) > EPS then
		SillSlipin			= gs_sill_width - (WIDO_SILL + gs_sill_nosing)
	else
		SillSlipin			= gs_sill_slip_in
	endif


! ==============================================================================
! CHE simple sill in 1:100 elevation view
! ==============================================================================

	if lod3D_Sill = 1 then

		if WIDO_REVEAL_SIDE then
			addy -WIDO_FRAME_THICKNESS
		else
			muly -1
		endif

		pen gs_sill_pen_3D
		sect_fill gs_sill_fill, gs_sill_pen_bg, gs_sill_pen_fg, gs_sill_pen_sectcont

		sillH = gs_sill_thk
		sillOffset = 0
		sillOnWall = gs_sill_oversize & (iLoD3D <> SYMBW_3D_MULTIPLANES_FRAME)

		if iSillType = SILL_BRICK then
			sillH = gs_sill_width * sin(gs_sill_angle) + gs_sill_thk * cos(gs_sill_angle)
			sillOffset = -sillH
			sillOnWall = 1
		endif
		if iSillType = SILL_STONE then
			sillH = gs_sill_thk
			sillOffset = -gs_sill_thk
			sillOnWall = 1
		endif
		if iSillType = SILL_TIMBER | iSillType = SILL_SOLID_11 | iSillType = SILL_SOLID_12 then
			if gs_sill_oversize & gs_reveal_nominal then
				sillH = gs_sill_thk
				sillOffset = gs_sill_elev
			else
				sillH = gs_sill_thk + gs_sill_elev
				sillOffset = 0
			endif
		endif
		if iSillType = SILL_SOLID_22 then
			if gs_sill_oversize & gs_reveal_nominal then
				sillH = gs_sill_thk + gs_sill_dripnos
				sillOffset = gs_sill_elev - gs_sill_dripnos
			else
				sillH = gs_sill_thk + max(gs_sill_dripnos, gs_sill_elev)
				sillOffset = -gs_sill_dripnos * (gs_sill_dripnos > gs_sill_elev)
			endif
			if gs_sill_dripnos - gs_sill_elev > 0 then
				sillOnWall = 1
			endif
		endif
		if iSillType = SILL_METAL_1 | iSillType = SILL_METAL_2 then
			sillH = max(gs_sill_thk, gs_sill_thk - gs_sill_endthk + gs_sill_dripnos)
			sillOffset = min(0, gs_sill_endthk - gs_sill_dripnos)
			if gs_sill_dripnos > gs_sill_endthk then
				sillOnWall = 1
			endif
		endif
		if iSillType = SILL_PARALLEL then
			if gs_sill_oversize & gs_reveal_nominal then
				sillH = (WIDO_SILL + gs_sill_nosing) * tan(gs_sill_angle) + gs_sill_element_thk * cos(gs_sill_angle)
				sillOffset = gs_sill_thk - sillH
			else
				sillH = gs_sill_thk
				sillOffset = 0
			endif
		endif
		if iSillType = SILL_PARALLEL_2 then
			sillH = gs_sill_width * sin(gs_reveal_outerBottom_angle) + gs_sill_element_thk * cos(gs_reveal_outerBottom_angle) - gs_mountingFrame_depth * gs_mountingFrame * tan(gs_reveal_outerBottom_angle)
			sillOffset = not(gs_mountingFrame) * original_gs_reveal_bottom - sillH + gs_sill_element_thk / cos(gs_reveal_outerBottom_angle)
			sillOnWall = 1
		endif

		material gs_sill_mat

		addz sillOffset + sillElevation

		if sillOnWall then
			if curvedWall then
				alfaEnd		= -signWallIsLeft * atn(spx3 / (spy3 - WOD))
				alfaStart	= -signWallIsLeft * atn(spx6 / (spy6 - WOD))
				arcRadius	= radSill
				bMiddlePoints = 1
				firstStatus	= 8 + 7 * not(gs_stack_right)
				lastStatus	= 10 + 5 * not(gs_stack_left)
				gosub 100

				alfaStart	= -signWallIsLeft * atn(spx3 / (spy3 - WOD))
				alfaEnd		= -signWallIsLeft * atn(spx6 / (spy6 - WOD))
				arcRadius	= radSill + signWallIsLeft * 0.001
				bMiddlePoints = 1
				firstStatus	= 13 + 2 * not(gs_stack_left)
				lastStatus	= 8 + 7 * not(gs_stack_right)
				gosub 100

				prism_ nsp/3, sillH, get(nsp)
			else
				addy -WIDO_SILL
				rotx 90

				if bLeftCornerFunction then
					pxL = leftRevealPnts[idxSillStartRevealLeft][1]
				else
					pxL = leftRevealPnts[idxSillStartRevealLeft][1] - not(gs_stack_left) * gs_sill_ovhg_left
				endif

				if bRightCornerFunction then
					pxR = rightRevealPnts[idxSillStartRevealRight][1]
				else
					pxR = rightRevealPnts[idxSillStartRevealRight][1] + not(gs_stack_right) * gs_sill_ovhg_right
				endif

				prism_ 4,0.0001,
					pxL, 0,		15,
					pxL, sillH, 15,
					pxR, sillH, 15,
					pxR, 0,		15

				del 2
			endif
		else
			rotx 90

			if bLeftCornerFunction then
				pxL = -leftWidth - WIDO_FRAME_THICKNESS * lx
			else
				pxL = leftRevealPnts[idxSillEndRevealLeft][1] - (not(gs_stack_left) & WIDO_SILL < EPS) * gs_sill_ovhg_left
			endif

			if bRightCornerFunction then
				pxR = rightWidth + WIDO_FRAME_THICKNESS * rx
			else
				pxR = rightRevealPnts[idxSillEndRevealRight][1] + (not(gs_stack_right) & WIDO_SILL < EPS) * gs_sill_ovhg_rigth
			endif

			prism_ 4,0.0001,
				pxL, 0,		15,
				pxL, sillH, 15,
				pxR, sillH, 15,
				pxR, 0,		15

			del 1
		endif

		del 1

		end
! ==============================================================================
! end ! end ! end ! end ! end ! end ! end ! end ! end ! end ! end ! end ! end
! ==============================================================================
	endif

! Draw Sill --------------------------------------------------------------------

	_bSillBelowSLight = 1

	if bTShapedOpening then
		if gs_sill_outside_sl_left & gs_sidelight_left & gs_sidelight_parapet_hgt_left > EPS then
			addz gs_sidelight_parapet_hgt_left + (gs_reveal_bottom_sL - gs_reveal_bottom)
			sidelightCutLeft  = 0
			sidelightCutRight = 1
			sidelightCutPosElevBodyRight = -leftWidth + gs_sidelight_WHole_width_left + gs_reveal_left_sL*(iSillType <> SILL_DUTCH) + thkPlasterAtSillSlLeft * gs_turn_plaster_show_3D
			sidelightCutPosRight		 = sidelightCutPosElevBodyRight + bDrawOutsideTrim * gs_trim_width_out
			stackLeft	= gs_stack_left
			stackRight	= 0
			gosub "DrawSill"
			del 1

			sillLeft_sL	 = sillLeft
			sillRight_sL =  - sidelightCutPosRight
		else
			sillLeft_sL	 = 0
			sillRight_sL = 0
		endif

		for i = 1 to nsp
			dummy = get(1)
		next i

		if gs_sill_outside_sl_right & gs_sidelight_right & gs_sidelight_parapet_hgt_right > EPS then
			addz gs_sidelight_parapet_hgt_right + (gs_reveal_bottom_sR - gs_reveal_bottom)
			sidelightCutLeft  = 1
			sidelightCutRight = 0
			sidelightCutPosElevBodyLeft	= rightWidth - gs_sidelight_WHole_width_right - gs_reveal_right_sR*(iSillType <> SILL_DUTCH) - thkPlasterAtSillSlRight * gs_turn_plaster_show_3D
			sidelightCutPosLeft			= sidelightCutPosElevBodyLeft - bDrawOutsideTrim * gs_trim_width_out
			stackLeft	= 0
			stackRight	= gs_stack_right
			gosub "DrawSill"
			del 1

			sillLeft_sR	 = sidelightCutPosLeft
			sillRight_sR = sillRight
		else
			sillLeft_sR	 = 0
			sillRight_sR = 0
		endif

		for i = 1 to nsp
			dummy = get(1)
		next i

		if gs_sill_outside then
			_bNeedCutBack = not((iSillType = SILL_DUTCH) & ((iRevealType = REVEAL_NEGATIVE) |\
														    ((iRevealType = REVEAL_DOUBLE) & (iSillRevealType = REVEAL_NEGATIVE))))

			_bSillBelowSLight = 0
			addz -thresholdExtraHole3D
			sidelightCutLeft  = 2 * (gs_sidelight_left & gs_sidelight_parapet_hgt_left > EPS)
			sidelightCutRight = 2 * (gs_sidelight_right & gs_sidelight_parapet_hgt_right > EPS)
			sidelightCutPosElevBodyRight = rightWidth - gs_sidelight_WHole_width_right - gs_reveal_right_sR*_bNeedCutBack
			sidelightCutPosRight		 = sidelightCutPosElevBodyRight
			sidelightCutPosElevBodyLeft	 = -leftWidth  + gs_sidelight_WHole_width_left  + gs_reveal_left_sL*_bNeedCutBack
			sidelightCutPosLeft			 = sidelightCutPosElevBodyLeft
			stackLeft	= 0
			stackRight	= 0
			gosub "DrawSill"
		else
			sillLeft  = 0
			sillRight = 0
		endif
	else
		addz -thresholdExtraHole3D
		sidelightCutLeft  = 0
		sidelightCutRight = 0
		sidelightCutPosElevBodyLeft	 = 0
		sidelightCutPosElevBodyRight = 0
		stackLeft	= gs_stack_left
		stackRight	= gs_stack_right
		gosub "DrawSill"

		sillLeft_sL  = 0
		sillRight_sL = 0
		sillLeft_sR  = 0
		sillRight_sR = 0
	endif

endif

for i = 1 to nsp
	dummy = get(1)
next i

end sillRight,
	sillLeft,
	sillLeft_sL,
	sillRight_sL,
	sillLeft_sR,
	sillRight_sR,
	sillBottom,
	sillBottomOutside,
	sillSideHeight,
	sillSideAngle,
	sillPoly

! ==============================================================================
! end ! end ! end ! end ! end ! end ! end ! end ! end ! end ! end ! end ! end
! ==============================================================================


! ==============================================================================
! Timber Sill
! ==============================================================================

"DrawSill":

if WIDO_REVEAL_SIDE then
	addy -WIDO_FRAME_THICKNESS
else
	muly -1
endif

pen gs_sill_pen_3D
sect_fill gs_sill_fill, gs_sill_pen_bg, gs_sill_pen_fg, gs_sill_pen_sectcont

if iSillType = SILL_TIMBER & (WIDO_SILL > EPS | gs_sill_nosing > EPS) then

	if maxSillAngle > -EPS & gs_sill_angle > maxSillAngle then gs_sill_angle = maxSillAngle
	if gs_sill_angle < 0 then gs_sill_angle = 0

	if abs (gs_sill_angle) > EPS then
		sillPoly[1] = 0 									: sillPoly[2] = -sillElevation - gs_sill_elev
		sillPoly[3] = 0 									: sillPoly[4] = -sillElevation - gs_sill_elev - gs_sill_thk - WIDO_SILL * tan(gs_sill_angle) * gs_fsill
		sillPoly[5] = (gs_sill_thk + WIDO_SILL * tan(gs_sill_angle) * gs_fsill) / tan (gs_sill_angle)
		sillPoly[6] = -sillElevation - gs_sill_elev
	else
		sillPoly[1] = 0 									: sillPoly[2] = -sillElevation - gs_sill_elev
		sillPoly[3] = 0 									: sillPoly[4] = -sillElevation - gs_sill_elev - gs_sill_thk
		sillPoly[5] = max(0, WIDO_SILL) + 1					: sillPoly[6] = -sillElevation - gs_sill_elev - gs_sill_thk
		sillPoly[7] = max(0, WIDO_SILL) + 1					: sillPoly[8] = -sillElevation - gs_sill_elev
	endif

	sillLeft			= abs(leftRevealPnts[1][1]  - gs_sill_ovhg_left)
	sillRight			= abs(rightRevealPnts[1][1] + gs_sill_ovhg_right)
	sillBottom			= sillElevation
	sillBottomOutside	= sillElevation + gs_sill_elev
	sillSideHeight		= gs_sill_thk + gs_sill_elev
	sillSideAngle		= gs_sill_angle

	sillElev		= sillElevation + gs_sill_elev
	angleSill		= gs_sill_angle 	! Sill Angle
	hSill			= gs_sill_thk
	bSillCurved		= gs_sill_curved
	matSill			= gs_sill_mat
	bElevBody		= 0

	addz sillElev
	gosub "DrawSill_Timber"			 	! modelling Sill body
	del 1

	if gs_sill_elev > EPS then	! gs_sill_elev is negative at USA Timber Sill, then do not draw Sill Elevation body
		angleSill   = 0 		! Sill Angle
		hSill       = gs_sill_elev
		bSillCurved = 0
		sillNosing  = 0

		resol WALL_RESOL

		if WIDO_REVEAL_SIDE then
			matSill = WALL_MAT_A
		else
			matSill = WALL_MAT_B
		endif

		pen WALL_VIEW_PEN
		sect_fill gs_sill_fill_ins_fg, gs_sill_pen_ins_bg, gs_sill_pen_ins_fg, gs_sill_pen_ins_sectcont

		bElevBody = 1

		sidelightCutPosLeft	 = sidelightCutPosElevBodyLeft
		sidelightCutPosRight = sidelightCutPosElevBodyRight

		addz sillElev - hSill
		gosub "DrawSill_Timber"				! modelling Sill Elevation body
		del 1
	endif
endif


! ==============================================================================
! Brick Sill, Stone Sill, Ceramic Sill, Eternite Sill, Concrete Tub, Aluminum Sill
! ==============================================================================

numCuts = 0

if	bTShapedOpening then
	gs_frame_width_left_2	= ABS(rightWidth - sidelightCutPosElevBodyLeft - rightFrameOffset)
	gs_frame_width_right_2	= ABS(leftWidth + sidelightCutPosElevBodyRight - leftFrameOffset)
endif

if (iSillType <> SILL_TIMBER) & gs_sill_thk > EPS then

	material gs_sill_mat


! Cuts for Door Frame -------------------------------------------------------
	if	bTShapedOpening then
		roty 180
		if sidelightCutLeft then
			addx -sidelightCutPosElevBodyLeft
			cutpolya 4, 1, 0,
				0,						0, 15,
				gs_frame_width_left_2,	0, 15,
				gs_frame_width_left_2,	WIDO_FRAME_THICKNESS, 15,
				0,						WIDO_FRAME_THICKNESS, 15
			numCuts = numCuts + 1
			del 1
		endif

		if sidelightCutRight then
			addx -sidelightCutPosElevBodyRight
			cutpolya 4, 1, 0,
				0,						0, 15,
				-gs_frame_width_right_2,	0, 15,
				-gs_frame_width_right_2,	WIDO_FRAME_THICKNESS, 15,
				0,						WIDO_FRAME_THICKNESS, 15
			numCuts = numCuts + 1
			del 1
		endif
		del 1
	endif

	if not(curvedWall) then

! Cuts for Corner Window -------------------------------------------------------

		if bRightCornerFunction then
			add rightRevealPnts[idxSillStartRevealRight][1], rightRevealPnts[idxSillStartRevealRight][2], 0
			rotx 90
			roty -rightCornerAngle / 2
			cutplane 180
			numCuts = numCuts + 1
			del 3
		endif

		if bLeftCornerFunction then
			add leftRevealPnts[idxSillStartRevealLeft][1], leftRevealPnts[idxSillStartRevealLeft][2], 0
			rotx 90
			roty leftCornerAngle / 2
			cutplane 180
			numCuts = numCuts + 1
			del 3
		endif

! Cuts for Overhanged Brick and Stone Sill -------------------------------------

		if AC_WallType <> 2 then
			if not(bLeftCornerFunction) then
				if abs(idxSillStartRevealLeft - idxSillEndRevealLeft) > 1 then
					if thkPlasterAtSillLeft > EPS then
						startIdx = idxSillEndPlasterLeft
						endIdx	 = idxSillStartPlasterLeft
					else
						startIdx = idxSillEndRevealLeft
						endIdx	 = idxSillStartRevealLeft
					endif

					put leftRevealPnts[startIdx][1] - 1, leftRevealPnts[startIdx][2] + 1, 15
					put leftRevealPnts[startIdx][1],	 leftRevealPnts[startIdx][2] + 1, 15
					for i = startIdx to endIdx step -1
						put leftRevealPnts[i][1], leftRevealPnts[i][2], 15
					next i
					put leftRevealPnts[endIdx][1] - 1, leftRevealPnts[endIdx][2], 15

					cutpolya nsp/3, 1, 0, get(nsp)
					numCuts = numCuts + 1
				else
					if (gs_sill_ovhg_left > EPS | thkPlasterAtSillLeft > EPS) then
						pxL = leftRevealPnts[idxSillStartRevealLeft][1]

						cutpolya 4, 1, 0,
							pxL + thkPlasterAtSillLeft,						 WALL_THICKNESS,	15,
							pxL + thkPlasterAtSillLeft,						-WIDO_SILL,			15,
							pxL - abs(widoLeftJamb) - gs_sill_ovhg_left,	-WIDO_SILL,			15,
							pxL - abs(widoLeftJamb) - gs_sill_ovhg_left,	 WALL_THICKNESS,	15

						numCuts = numCuts + 1
					endif
				endif
			endif

			if not(bRightCornerFunction) then
				if abs(idxSillStartRevealRight - idxSillEndRevealRight) > 1 then
					if thkPlasterAtSillRight > EPS then
						startIdx = idxSillStartPlasterRight
						endIdx	 = idxSillEndPlasterRight
					else
						startIdx = idxSillStartRevealRight
						endIdx	 = idxSillEndRevealRight
					endif

					put rightRevealPnts[startIdx][1] + 1, rightRevealPnts[startIdx][2], 15
					for i = startIdx to endIdx
						put rightRevealPnts[i][1], rightRevealPnts[i][2], 15
					next i
					put rightRevealPnts[endIdx][1],		rightRevealPnts[endIdx][2] + 1, 15
					put rightRevealPnts[endIdx][1] + 1, rightRevealPnts[endIdx][2] + 1, 15

					cutpolya nsp/3, 1, 0, get(nsp)
					numCuts = numCuts + 1
				else
					if (gs_sill_ovhg_right > EPS | thkPlasterAtSillRight > EPS) then
						pxR = rightRevealPnts[idxSillStartRevealRight][1]

						cutpolya 4, 1, 0,
							pxR - thkPlasterAtSillRight,					 WALL_THICKNESS,	15,
							pxR - thkPlasterAtSillRight,					-WIDO_SILL,			15,
							pxR + abs(widoRightJamb) + gs_sill_ovhg_right,	-WIDO_SILL,			15,
							pxR + abs(widoRightJamb) + gs_sill_ovhg_right,	 WALL_THICKNESS,	15
						numCuts = numCuts + 1
					endif
				endif
			endif
		else
			if gs_sill_ovhg_left > EPS | gs_sill_ovhg_right > EPS | \			! Cut sill in case of overhangs
				abs(idxSillStartRevealLeft  - idxSillEndRevealLeft)  > 1 | \	! Cut sill in case of Double Splayed Reveal or Outside Splayed Reveal too
				abs(idxSillStartRevealRight - idxSillEndRevealRight) > 1 then

				ch = initaddonscope ("PolyOperations", "", "")

! Generate Sill Cutting Wall Part Polygons -------------------------------------

				bGetWallCutPolygons = 1
				bPolyFor3D = 1
				gosub 2000

! Cut Wall Parts from the Sill Model -------------------------------------------

				defaultStatusCode = 15
				dim statusCodes[]

				dim resPolyIDArr[]
				numPoly = callfunction (ch, "GetDestinationPolygons", "", resPolyIDArr)

				for i = 1 to numPoly
					polygonID = resPolyIDArr[i]
					gosub 1000	! Get GDL Polygon

					cutpolya nsp/3, 1,0, get(nsp)
					numCuts = numCuts + 1
				next i

! Close channel ----------------------------------------------------------------

				closeaddonscope ch
			endif
		endif

! Cuts for Overhanged Brick and Stone Sill - at Sidelights ---------------------

		if sidelightCutLeft = 2 & gs_turn_plaster_show_3D then
			cutpolya 4, 1,0,
				sidelightCutPosLeft + thkPlasterAtSillSlLeft,	 0,			15,
				sidelightCutPosLeft + thkPlasterAtSillSlLeft,	-WIDO_SILL,	15,
				sidelightCutPosLeft - 1,						-WIDO_SILL,	15,
				sidelightCutPosLeft - 1,						 0,			15
				numCuts = numCuts + 1
		endif

		if sidelightCutRight = 2 & gs_turn_plaster_show_3D then
			cutpolya 4, 1,0,
				sidelightCutPosRight - thkPlasterAtSillSlRight,	 0,			15,
				sidelightCutPosRight - thkPlasterAtSillSlRight,	-WIDO_SILL,	15,
				sidelightCutPosRight + 1,						-WIDO_SILL,	15,
				sidelightCutPosRight + 1,						 0,			15
				numCuts = numCuts + 1
		endif

		maxSillLength = WIDO_SILL

	else

! Curved Wall ------------------------------------------------------------------


! Cuts for Corner Window -------------------------------------------------------

		if bRightCornerFunction then
			addx rightCwDx + rightWidth + WIDO_FRAME_THICKNESS * rx
			roty rightCornerAngle / 2
			cutplane
			numCuts = numCuts + 1
			del 2
		endif

		if bLeftCornerFunction then
			addx -leftCwDx - leftWidth - WIDO_FRAME_THICKNESS * lx
			roty -leftCornerAngle / 2
			cutplane
			numCuts = numCuts + 1
			del 2
		endif

! ------------------------------------------------------------------------------

		alfaR = alfaRight - alfaRightJamb + alfaSillRightOvhg
		if stackRight then
			if wallIsLeft then
				pxR = radSill * sin(alfaR) + (spy6 - spy5) * tan(alfaR)
			else
				pxR = -(WOD - SillSlipin - gs_sill_thk * sin(gs_sill_angle)) * tan(alfaR)
			endif

			! --- Cut on right side when window is Stacked
			add 0,WOD,0
			rotz (wallIsLeft - not(wallIsLeft)) * alfaR
			roty 90
			cutplane
			numCuts = numCuts + 1
			del 3
		else
			if bParalellInCurvedWalls = 0 then
				pxR = radSill * sin(alfaR)
			else
				pxR = spx5
			endif
		endif
		pyR = ySign * radSill * cos(alfaR)

		alfaL = -alfaLeft + alfaLeftJamb - alfaSillLeftOvhg
		if stackLeft then
			if wallIsLeft then
				pxL = radSill * sin(alfaL) + (spy3 - spy4) * tan(alfaL)
			else
				pxL = -(WOD - SillSlipin - gs_sill_thk * sin(gs_sill_angle)) * tan(alfaL)
			endif

			! --- Cut on left side when window is Stacked
			add 0,WOD,0
			rotz (wallIsLeft - not(wallIsLeft)) * alfaL
			roty 90
			cutplane 180
			numCuts = numCuts + 1
			del 3
		else
			if bParalellInCurvedWalls = 0 then
				pxL = radSill * sin(alfaL)
			else
				pxL = spx4
			endif
		endif
		pyL = ySign * radSill * cos(alfaL)

! Cuts for Overhanged Brick and Stone Sill -------------------------------------

		if sidelightCutLeft = 2 & gs_turn_plaster_show_3D then
			px = sidelightCutPosLeft + thkPlasterAtSillSlLeft
			py = WOD - iArchSign * sqr(radSill^2 - px^2)
			alfaStart	= atn(px / (-signWallIsLeft * py + abs(WOD)))
			alfaEnd		= alfaStart - 2 * alfaSillLeftOvhg - 10

			if abs(alfaStart - alfaEnd) > EPS then
				arcRadius		= radSill
				bMiddlePoints	= 1
				firstStatus		= 15
				lastStatus		= 79

				gosub 100	! Arch Segmentation
			endif

			if wallIsLeft then
				put px - 0.1,	WOD, 15,
					px,			WOD, 15
			else
				put px - 2, -WIDO_SILL, 15,
					px - 2,  py + 1,	15,
					px,		 py + 1,	15
			endif

!!!			prism_ nsp/3, 1, use(nsp)
			cutpolya nsp/3, 1,0, get(nsp)
			numCuts = numCuts + 1
		endif

		if not(stackLeft | sidelightCutLeft) then

			if thkPlasterAtSillLeft > EPS then
				startIdx = idxSillEndPlasterLeft
				endIdx	 = idxSillStartPlasterLeft
			else
				startIdx = idxSillEndRevealLeft
				endIdx	 = idxSillStartRevealLeft
			endif

			for i = startIdx to endIdx step -1
				put leftRevealPnts[i][1], leftRevealPnts[i][2], 15
			next i

			alfaStart = atn(leftRevealPnts[endIdx][1] / (-signWallIsLeft * leftRevealPnts[endIdx][2] + abs(WOD)))
			if not(bParalellInCurvedWalls) | (bParalellInCurvedWalls & stackLeft) then
				alfaEnd		=  alfaStart - 2 * alfaSillLeftOvhg - 10		!!!- wallIsLeft * 10
			else
				alfaEnd		= -asn((leftWidth  + overSizeLeft + not(stackLeft) * 2 * gs_sill_ovhg_left) / radSill) + alfaLeftJamb - 10
			endif

			if abs(alfaStart - alfaEnd) > EPS then
				arcRadius		= radSill
				bMiddlePoints	= 1
				firstStatus		= 15
				lastStatus		= 79

				gosub 100	! Arch Segmentation
			endif

			if wallIsLeft then
				if bParalellInCurvedWalls then
					put leftRevealPnts[idxSillStartRevealLeft][1] - 1.0,	WOD, 15,
						leftRevealPnts[idxSillStartRevealLeft][1],			WOD, 15
				else
					put -0.1,	WOD, 15,
						 0,		WOD, 15
				endif
			else
				x3 = leftRevealPnts[idxSillStartRevealLeft][1]
				y3 = leftRevealPnts[idxSillStartRevealLeft][2] + 1.0

				x4 = x3 - 2.0
				y4 = y3

				put x4, -WIDO_SILL, 15,
					x4, y4,	15,
					x3, y3,	15
			endif

!!!			prism_ nsp/3, 1, use(nsp)
			cutpolya nsp/3, 1,0, get(nsp)
			numCuts = numCuts + 1
		endif

		if sidelightCutRight = 2 & gs_turn_plaster_show_3D then
			px = sidelightCutPosRight - thkPlasterAtSillSlRight
			py = WOD - iArchSign * sqr(radSill^2 - px^2)
			alfaStart	= atn(px / (-signWallIsLeft * py + abs(WOD)))
			alfaEnd		= alfaStart + 2 * alfaSillRightOvhg + 10

			if abs(alfaStart - alfaEnd) > EPS then
				arcRadius		= radSill
				bMiddlePoints	= 1
				firstStatus		= 15
				lastStatus		= 79

				gosub 100	! Arch Segmentation
			endif

			if wallIsLeft then
				put px + 0.1,	WOD, 15,
					px,			WOD, 15
			else
				put px + 2, -WIDO_SILL, 15,
					px + 2,  py + 1,	15,
					px,		 py + 1,	15
			endif

!!!			prism_ nsp/3, 1, use(nsp)
			cutpolya nsp/3, 1,0, get(nsp)
			numCuts = numCuts + 1
		endif

		if not(stackRight | sidelightCutRight) then

			if thkPlasterAtSillRight > EPS then
				startIdx = idxSillEndPlasterRight
				endIdx	 = idxSillStartPlasterRight
			else
				startIdx = idxSillEndRevealRight
				endIdx	 = idxSillStartRevealRight
			endif

			for i = startIdx to endIdx step -1
				put rightRevealPnts[i][1], rightRevealPnts[i][2], 15
			next i

			alfaStart= atn(rightRevealPnts[endIdx][1] / (-signWallIsLeft * rightRevealPnts[endIdx][2] + abs(WOD)))
			if not(bParalellInCurvedWalls) | (bParalellInCurvedWalls & stackRight) then
				alfaEnd	= alfaRight - alfaRightJamb + 2 * alfaSillRightOvhg + 10		! wallIsLeft * 10
			else
				alfaEnd	= asn((rightWidth  + overSizeRight + not(stackRight) * 2 * gs_sill_ovhg_right) / radSill) - alfaRightJamb + 10
			endif

			if abs(alfaStart - alfaEnd) > EPS then
				arcRadius		= radSill
				bMiddlePoints	= 1
				firstStatus		= 15
				lastStatus		= 79

				gosub 100	! Arch Segmentation
			endif

			if wallIsLeft then
				if bParalellInCurvedWalls then
					put	rightRevealPnts[idxSillStartRevealRight][1] + 1.0,	WOD, 15,
						rightRevealPnts[idxSillStartRevealRight][1],		WOD, 15
				else
					put 0.1,WOD, 15,
						0,	WOD, 15
				endif
			else
				x3 = rightRevealPnts[idxSillStartRevealRight][1]
				y3 = rightRevealPnts[idxSillStartRevealRight][2] + 1.0

				x4 = x3 + 2.0
				y4 = y3

				put x4, -WIDO_SILL, 15,
					x4, y4,	15,
					x3, y3,	15
			endif

			cutpolya nsp/3, 1,0, get(nsp)
			numCuts = numCuts + 1
		endif

		if wallIsLeft then
			maxSillLength = abs(radSill - abs(WOD))
		else
			maxSillLength = max((abs(WOD) - pyL), (abs(WOD) - pyR))
		endif
	endif

! ==============================================================================
! Drawing Sills
! ==============================================================================

	if sidelightCutRight then
		pxR = sidelightCutPosRight
	else
		if bRightCornerFunction then
			pxR = max(rightRevealPnts[idxSillStartRevealRight][1], rightRevealPnts[idxSillEndRevealRight][1]) + 1.0
		else
			if curvedWall & stackRight then
				pxR = rightRevealPnts[idxSillStartRevealRight][1] + 1.0
			else
				pxR = rightRevealPnts[idxSillStartRevealRight][1] + gs_sill_ovhg_right
			endif
		endif
	endif

	if sidelightCutLeft then
		pxL = sidelightCutPosLeft
	else
		if bLeftCornerFunction then
			pxL = min(leftRevealPnts[idxSillStartRevealLeft][1], leftRevealPnts[idxSillEndRevealLeft][1]) - 1.0
		else
			if curvedWall & stackLeft then
				pxL = leftRevealPnts[idxSillStartRevealLeft][1] - 1.0
			else
				pxL = leftRevealPnts[idxSillStartRevealLeft][1] - gs_sill_ovhg_left
			endif
		endif
	endif

	addx pxL
	roty 90
	rotz -90

	mask = 15
	if stackLeft  then mask = bitset(mask, 0, 0)
	if stackRight then mask = bitset(mask, 2, 0)
	mask_str = mask

	if iSillType = SILL_BRICK then
		gs_sill_width = gs_sill_thk * tan(gs_sill_angle) + (maxSillLength + SillSlipin + gs_sill_nosing) / cos(gs_sill_angle)
		sillElevation = 0

		gosub 10200
	endif

	if iSillType = SILL_STONE then
		gs_sill_width = SillSlipin + maxSillLength + gs_sill_nosing
		sillElevation = 0

		gosub 10300
	endif

	if iSillType = SILL_CERAMIC then
		sillElevation = 0

		gosub 10400
	endif

	if iSillType = SILL_ETHERNIT then
		gs_sill_endthk = max(0, gs_sill_thk - gs_sill_topHeight - (gs_sill_width - gs_sill_topWidth) * tan(gs_sill_angle))
		sillElevation = 0

		gosub 10500
	endif

	if iSillType = SILL_CONCRETE_TUB then
		sillElevation = 0

		gosub 10600
	endif

	if iSillType = SILL_ALUMINIUM then
		sillElevation = 0
		thk = 0.002

		gosub 10700
	endif

	if iSillType = SILL_SOLID_11 | iSillType = SILL_SOLID_12 | iSillType = SILL_SOLID_22 | iSillType = SILL_METAL_1 | iSillType = SILL_METAL_2 then
		if WIDO_REVEAL_SIDE then
			material WALL_MAT_A
		else
			material WALL_MAT_B
		endif
		pen WALL_VIEW_PEN
		sect_fill gs_sill_fill_ins_fg, gs_sill_pen_ins_bg, gs_sill_pen_ins_fg, gs_sill_pen_ins_sectcont

		! Metal Sheet / Metallfensterbank 1.1 (CHE) geometry
		fbn	= gs_sill_topHeight
		xh	= gs_sill_thk - fbn
		if abs(WIDO_SILL) > EPS then
			xh2 = gs_sill_width * (xh - gs_sill_endthk) / WIDO_SILL
		else
			xh2 = 0
		endif

		if iSillType <> SILL_METAL_1 & iSillType <> SILL_METAL_2 then
			addy -sillElevation
			gosub 11111
			del 1
		endif

		base
		vert 0, 0, 0
		vert 1, 0, 0
		vert 0, 0, -sgn((SYMB_MIRRORED exor (SYMB_ROTANGLE > EPS)) - 0.5)
		vert 0, -1, 0
		coor 2, -1, -2, -3, -4
		body -1

		material gs_sill_mat
		pen gs_sill_pen_3D
		sect_fill gs_sill_fill, gs_sill_pen_bg, gs_sill_pen_fg, gs_sill_pen_sectcont
	endif

	if iSillType = SILL_SOLID_11 then	! Solid Sill 1.1 --- Massiv-Fensterbank 1.1 (CHE)
		gosub 10800
	endif

	if iSillType = SILL_SOLID_12 then	! Solid Sill 1.2 --- Massiv-Fensterbank 1.2 (CHE)
		gosub 10900
	endif

	if iSillType = SILL_SOLID_22 then	! Solid Sill 2.2 / Massiv-Fensterbank 2.2 (CHE)
		gosub 11000
	endif

	if iSillType = SILL_METAL_1 | iSillType = SILL_METAL_2 then	! Metal Sheet / Metallfensterbank 1.1 (CHE) - Metal Sheet 2 (CHE)
		gosub 11100
	endif

	if iSillType = SILL_PARALLEL | iSillType = SILL_PARALLEL_2 then	! Solid Parallel (CHE)
		gosub 11200
	endif

	if iSillType = SILL_SIMPLEBLOCK then
		gs_sill_width = maxSillLength + SillSlipin + gs_sill_nosing
		sillElevation = 0

		iBrickSilldetlevel = BRICKSILL_SIMPLE
		gs_sill_angle = 0
		gosub 10200
	endif

	if iSillType = SILL_BLOCK then
		gs_sill_width = WIDO_FRAME_THICKNESS + gs_sill_nosing
		sillElevation = 0
		gs_sill_ovhg_left = 0
		gs_sill_ovhg_right = 0
		gs_sill_angle = 0

		gosub 11300
	endif

	if iSillType = SILL_DUTCH then
		gs_sill_width = WIDO_FRAME_THICKNESS + gs_sill_nosing
		sillElevation = 0
		gs_sill_ovhg_left = 0
		gs_sill_ovhg_right = 0

		gosub 11400
	endif

	del 3
endif

for i=1 to numCuts
	cutend
next i
numCuts = 0


del 1


! ==============================================================================
! Cut Space in Wall for Brick Sill and Stone Sill
! ==============================================================================

if bDrawSill & \
   ((iSillType = SILL_TIMBER & gs_sill_elev < -EPS) | \		! to USA Timber Sill
	iSillType = SILL_BRICK | \
	iSillType = SILL_STONE | \
	iSillType = SILL_CERAMIC | \
	iSillType = SILL_ETHERNIT | \
	iSillType = SILL_CONCRETE_TUB | \
	iSillType = SILL_ALUMINIUM | \
	iSillType = SILL_SIMPLEBLOCK | \
	iSillType = SILL_BLOCK | \
	iSillType = SILL_DUTCH) & not(gs_stack_bottom) then

	if AC_HoleSideMaterial then
		if WIDO_REVEAL_SIDE then
			matRevealSide	= WALL_MAT_A
		else
			matRevealSide	= WALL_MAT_B
		endif
	else
		matRevealSide	= WALL_MAT_EDGE
	endif

	pen WALL_VIEW_PEN

	if not(curvedWall) then

! Straight Wall ================================================================

		if iSillType = SILL_TIMBER then		! to USA Timber Sill
			cy = abs(gs_sill_elev + sillElevation)
			cx = 0
		endif
		if iSillType = SILL_BRICK then	! Brick Sill
			cy = gs_sill_thk / cos(gs_sill_angle) + tan(gs_sill_angle) * (WIDO_SILL + gs_sill_slip_in)
			cx = max(gs_sill_holeDepthBehind, sin(gs_sill_angle) * gs_sill_thk)
		endif
		if iSillType = SILL_SIMPLEBLOCK then	! Brick Sill
			cy = gs_sill_thk
			cx = gs_sill_holeDepthBehind
		endif
		if iSillType = SILL_CERAMIC then
			cy = gs_sill_topHeight * cos(gs_sill_angle) + tan(gs_sill_angle) * (WIDO_SILL + gs_sill_slip_in) + gs_sill_endthk / cos(gs_sill_angle)
			cx = gs_sill_holeDepthBehind
		endif
		if iSillType = SILL_STONE | iSillType = SILL_ETHERNIT | iSillType = SILL_CONCRETE_TUB then
			cy = gs_sill_thk
			cx = gs_sill_holeDepthBehind
		endif
		if iSillType = SILL_ALUMINIUM then
			cy = max(0, gs_sill_topHeight) + max(0, (WIDO_SILL - thk + gs_sill_slip_in) * tan(gs_sill_angle)) + thk / cos(gs_sill_angle) - gs_sill_dripnos * (WIDO_SILL + gs_sill_slip_in) / (gs_sill_width - thk)
			cx = gs_sill_holeDepthBehind
		endif
		if iSillType = SILL_BLOCK | iSillType = SILL_DUTCH then
			gs_sill_slip_in = WIDO_FRAME_THICKNESS
			cx = 0
			cy = gs_sill_thk
		endif

		if gs_sill_slip_wall > EPS then
			cx = max(cx, gs_sill_slip_wall - WIDO_SILL - gs_sill_slip_in)
		endif

		material matRevealSide

		if WIDO_REVEAL_SIDE then
			muly -1
			addy WIDO_FRAME_THICKNESS
		endif

		if abs(cy) > EPS then

			bExtraWallnicheOnLeft	= 0
			bExtraWallnicheOnRight	= 0

			if sidelightCutLeft then
				if sidelightCutLeft = 1 then
					leftCutLimit = sidelightCutPosLeft - 0.1
				else
					leftCutLimit = sidelightCutPosLeft + gs_turn_plaster_show_3D * thkPlasterAtSillSlLeft
				endif
				if (iSillType = SILL_DUTCH) & ((iRevealType = REVEAL_NEGATIVE) |\
											   ((iRevealType = REVEAL_DOUBLE) & (iSillRevealType = REVEAL_NEGATIVE))) then

					leftCutLimit2 = leftCutLimit + gs_reveal_left_sL
					bExtraWallnicheOnLeft = 1
				endif
			else
				if bLeftCornerFunction | stackLeft then
					leftCutLimit = pxL
				else
					if (iSillType = SILL_DUTCH) & ((iRevealType = REVEAL_NEGATIVE) |\
												   ((iRevealType = REVEAL_DOUBLE) & (iSillRevealType = REVEAL_NEGATIVE))) then

						leftCutLimit = leftRevealPnts[idxFrameStartRevealLeft][1]
						leftCutLimit2 = leftRevealPnts[idxSillStartRevealLeft][1] + thkPlasterAtSillLeft
						bExtraWallnicheOnLeft = 1
					else
						leftCutLimit = leftRevealPnts[idxSillStartRevealLeft][1] + thkPlasterAtSillLeft
					endif
				endif
			endif
			if sidelightCutRight then
				if sidelightCutRight = 1 then
					rightCutLimit = sidelightCutPosRight + 0.1
				else
					rightCutLimit = sidelightCutPosRight - gs_turn_plaster_show_3D * thkPlasterAtSillSlRight
				endif
				if (iSillType = SILL_DUTCH) & ((iRevealType = REVEAL_NEGATIVE) |\
											   ((iRevealType = REVEAL_DOUBLE) & (iSillRevealType = REVEAL_NEGATIVE))) then

					rightCutLimit2 = rightCutLimit - gs_reveal_right_sR
					bExtraWallnicheOnRight = 1
				endif
			else
				if bRightCornerFunction | stackRight then
					rightCutLimit = pxR
				else
					if (iSillType = SILL_DUTCH) & ((iRevealType = REVEAL_NEGATIVE) |\
												   ((iRevealType = REVEAL_DOUBLE) & (iSillRevealType = REVEAL_NEGATIVE))) then

						rightCutLimit = rightRevealPnts[idxFrameStartRevealRight][1]
						rightCutLimit2 = rightRevealPnts[idxSillStartRevealRight][1] - thkPlasterAtSillRight
						bExtraWallnicheOnRight = 1
					else
						rightCutLimit = rightRevealPnts[idxSillStartRevealRight][1] - thkPlasterAtSillRight
					endif
				endif
			endif

			rotx 90
			wallniche 4, 1, 2 + 16,
				0,0,1, gs_sill_slip_in + cx,
				rightCutLimit,	 0,		31,
				rightCutLimit,	-cy,	31,
				leftCutLimit,	-cy,	31,
				leftCutLimit,	 0,		31

			if bExtraWallnicheOnLeft then
				wallniche 4, 1, 2 + 16,
					0,0,1, cx,
					leftCutLimit,	 0,		31,
					leftCutLimit,	-cy,	31,
					leftCutLimit2,	-cy,	31,
					leftCutLimit2,	 0,		31
			endif

			if bExtraWallnicheOnRight then
				wallniche 4, 1, 2 + 16,
					0,0,1, cx,
					rightCutLimit,	 0,		31,
					rightCutLimit,	-cy,	31,
					rightCutLimit2,	-cy,	31,
					rightCutLimit2,	 0,		31
			endif
			del 1
		endif

		if WIDO_REVEAL_SIDE then del 2
	else

! Curved Wall ==================================================================

		if WIDO_REVEAL_SIDE then muly -1

		maxSillLength = max(WIDO_SILL, abs(radSill - abs(WOD)))

		if iSillType = SILL_BRICK then
			cy = gs_sill_thk / cos(gs_sill_angle) + tan(gs_sill_angle) * (maxSillLength + gs_sill_slip_in)
			cx = sin(gs_sill_angle) * gs_sill_thk
		endif
		if iSillType = SILL_SIMPLEBLOCK then	! Brick Sill
			cy = gs_sill_thk
			cx = gs_sill_holeDepthBehind
		endif
		if iSillType = SILL_CERAMIC then
			cy = gs_sill_thk / cos(gs_sill_angle) + tan(gs_sill_angle) * (maxSillLength + gs_sill_slip_in)
			cx = 0
		endif
		if iSillType = SILL_STONE | iSillType = SILL_ETHERNIT | iSillType = SILL_CONCRETE_TUB then
			cy = gs_sill_thk
			cx = 0
		endif
		if iSillType = SILL_ALUMINIUM then
			cy = max(0, gs_sill_topHeight) + max(0, (WIDO_SILL - thk) * tan(gs_sill_angle)) + thk / cos(gs_sill_angle)
		endif
		if iSillType = SILL_BLOCK | iSillType = SILL_DUTCH then
			gs_sill_slip_in = WIDO_FRAME_THICKNESS
			cx = 0
			cy = gs_sill_thk
		endif

		if gs_sill_slip_wall > EPS then
			cx = max(cx, gs_sill_slip_wall - WIDO_SILL - gs_sill_slip_in)
		endif

		if wallIsLeft then
			leftJamb	= leftWidth  + WOD * tan(alfaLeftOs  - alfaLeftJamb)  + gs_left_oversize
			rightJamb	= rightWidth + WOD * tan(alfaRightOs - alfaRightJamb) + gs_right_oversize

			if stackLeft  then leftJamb  = leftJamb
			if stackRight then rightJamb = rightJamb

			if sidelightCutRight then
				if sidelightCutRight = 1 then
					leftCutLimit = sidelightCutPosRight + 0.1
				else
					leftCutLimit = sidelightCutPosRight - gs_turn_plaster_show_3D * thkPlasterAtSillSlRight
				endif
			else
				leftCutLimit = -leftWidth  + rightJamb - overSizeRight
			endif
			if sidelightCutLeft then
				if sidelightCutLeft = 1 then
					rightCutLimit = sidelightCutPosLeft - 0.1
				else
					rightCutLimit = sidelightCutPosLeft + gs_turn_plaster_show_3D * thkPlasterAtSillSlLeft
				endif
			else
				rightCutLimit = rightWidth - leftJamb  + overSizeLeft
			endif

			addy WIDO_FRAME_THICKNESS * WIDO_REVEAL_SIDE
			rotx 90

			material matRevealSide

			if sidelightCutRight = 2 then
				leftEnd = leftCutLimit - 0.1
				wallniche 4, 1, 2 + 16,
					0,0,1, gs_sill_slip_in + cx,
					leftCutLimit - 0.15,	 0,		31,
					leftCutLimit - 0.15,	-cy,	31,
					leftCutLimit,			-cy,	31,
					leftCutLimit,			 0,		31
			else
				leftEnd = leftCutLimit
			endif
			if sidelightCutLeft = 2 then
				rightEnd = rightCutLimit + 0.1
				wallniche 4, 1, 2 + 16,
					0,0,1, gs_sill_slip_in + cx,
					rightCutLimit + 0.15,	 0,		31,
					rightCutLimit + 0.15,	-cy,	31,
					rightCutLimit,			-cy,	31,
					rightCutLimit,			 0,		31
			else
				rightEnd = rightCutLimit
			endif

			wallniche 4, 3, 2 + 16,
				0,0,WOD, gs_sill_slip_in + cx,
				rightEnd,	 0,		31,
				rightEnd,	-cy,	31,
				leftEnd,	-cy,	31,
				leftEnd,	 0,		31
			del 2
		else
			dy = gs_sill_slip_in + cx

			dxL = dy * tan(alfaLeftOs - alfaLeftJamb)
			dxR = dy * tan(alfaRightOs - alfaRightJamb)

			leftJamb	= leftWidth  + WOD * tan(alfaLeftOs  - alfaLeftJamb)  + gs_left_oversize
			rightJamb	= rightWidth + WOD * tan(alfaRightOs - alfaRightJamb) + gs_right_oversize

			if stackLeft  then leftJamb  = 0
			if stackRight then rightJamb = 0

			if sidelightCutLeft then
				if sidelightCutLeft = 1 then
					leftCutLimit = sidelightCutPosLeft - 0.1
				else
					leftCutLimit = sidelightCutPosLeft + gs_turn_plaster_show_3D * thkPlasterAtSillSlLeft
				endif
			else
				leftCutLimit = -leftWidth  - dxL + leftJamb  - overSizeLeft
			endif
			if sidelightCutRight then
				if sidelightCutRight = 1 then
					rightCutLimit = sidelightCutPosRight + 0.1
				else
					rightCutLimit = sidelightCutPosRight - gs_turn_plaster_show_3D * thkPlasterAtSillSlRight
				endif
			else
				rightCutLimit = rightWidth + dxR - rightJamb + overSizeRight
			endif

			addy WIDO_FRAME_THICKNESS * WIDO_REVEAL_SIDE - dy
			rotx 90

			if sidelightCutLeft = 2 then
				leftEnd = leftCutLimit + 0.1
				wallniche 4, 1, 2 + 16,
					0,0,1, 0,
					leftCutLimit + 0.15,	 0,		31,
					leftCutLimit + 0.15,	-cy,	31,
					leftCutLimit,			-cy,	31,
					leftCutLimit,			 0,		31
			else
				leftEnd = leftCutLimit
			endif
			if sidelightCutRight = 2 then
				rightEnd = rightCutLimit - 0.1
				wallniche 4, 1, 2 + 16,
					0,0,1, 0,
					rightCutLimit - 0.15,	 0,		31,
					rightCutLimit - 0.15,	-cy,	31,
					rightCutLimit,			-cy,	31,
					rightCutLimit,			 0,		31
			else
				rightEnd = rightCutLimit
			endif

			material matRevealSide
			wallniche 4, 3, 2,
				0,0,WOD - dy, 16 * WIDO_SILL,
				rightEnd,	 0,		31,
				rightEnd,	-cy,	31,
				leftEnd,	-cy,	31,
				leftEnd,	 0,		31
			del 2
		endif

		del WIDO_REVEAL_SIDE
	endif
endif

return


! ==============================================================================
! Arch Segmentation
! ------------------------------------------------------------------------------
! Input parameters:
!	alfaStart:		Start angle (angle)
!	alfaEnd:		End angle (angle)
!	arcRadius:		Arc radius (length)
!	bMiddlePoints:	Generate middle points (0 / 1)
!	firstStatus:	Status of the first segment (integer)
!	lastStatus:		Status of the last segment (integer)
! ==============================================================================

100:
	if not(wallIsLeft) then
		alfaStart = 180 - alfaStart
		alfaEnd = 180 - alfaEnd
	endif
	segmentAngle = 360 / WALL_RESOL


	! --- Point at Start Angle ---
	if WIDO_REVEAL_SIDE then
		if SYMB_ROTANGLE < EPS then
			difAngle = (AC_Hole_Position_Angle + alfaStart) mod segmentAngle
		else
			difAngle = -(AC_Hole_Position_Angle - 180 - alfaStart) mod segmentAngle
		endif
	else
		if SYMB_ROTANGLE < EPS then
			difAngle = -(AC_Hole_Position_Angle - alfaStart + 180) mod segmentAngle
		else
			difAngle = (AC_Hole_Position_Angle + alfaStart) mod segmentAngle
		endif
	endif

	difAngle2 = difAngle
	if abs(difAngle) > segmentAngle / 2 then difAngle = -segmentAngle / 2 + abs(difAngle mod (segmentAngle / 2))

	segmentR = arcRadius / cos(difAngle)
	put segmentR * sin(alfaStart), -segmentR * cos(alfaStart) + WOD, firstStatus

	if bMiddlePoints then
		! --- Middle Points ---
		segmentR = arcRadius / cos(segmentAngle / 2)

		if alfaStart > alfaEnd then
			alfaActual = alfaStart - difAngle2 + segmentAngle / 2

			if alfaActual > alfaStart then alfaActual = alfaActual - segmentAngle
			if alfaActual > alfaStart then alfaActual = alfaActual - segmentAngle

			if alfaActual < alfaEnd then alfaActual = alfaActual + segmentAngle

			if alfaActual < alfaStart & alfaActual > alfaEnd then
				do
					put segmentR * sin(alfaActual), -segmentR * cos(alfaActual) + WOD, 79

					alfaActual = alfaActual - segmentAngle

				while alfaActual > alfaEnd
			endif
		else
			alfaActual = alfaStart - difAngle2 - segmentAngle / 2

			if alfaActual < alfaStart then alfaActual = alfaActual + segmentAngle
			if alfaActual > alfaEnd then alfaActual = alfaActual - segmentAngle

			if alfaActual > alfaStart & alfaActual < alfaEnd then
				do
					put segmentR * sin(alfaActual), -segmentR * cos(alfaActual) + WOD, 79

					alfaActual = alfaActual + segmentAngle
				while alfaActual < alfaEnd
			endif
		endif
	endif


	! --- Point at End Angle ---
	if WIDO_REVEAL_SIDE then
		if SYMB_ROTANGLE < EPS then
			difAngle = (AC_Hole_Position_Angle + alfaEnd) mod segmentAngle
		else
			difAngle = -(AC_Hole_Position_Angle + 180 - alfaEnd) mod segmentAngle
		endif
	else
		if SYMB_ROTANGLE < EPS then
			difAngle = -(AC_Hole_Position_Angle - alfaEnd + 180) mod segmentAngle
		else
			difAngle = (AC_Hole_Position_Angle + alfaEnd) mod segmentAngle
		endif
	endif

	if abs(difAngle) > segmentAngle / 2 then difAngle = -segmentAngle / 2 + abs(difAngle mod (segmentAngle / 2))

	segmentR = arcRadius / cos(difAngle)
	put segmentR * sin(alfaEnd), -segmentR * cos(alfaEnd) + WOD, lastStatus

return


1000:
! ==============================================================================
! Get GDL Polygon
! ------------------------------------------------------------------------------
! Input variables:
!	ch:					Channel
!	polygonID:			Polygon index
!	defaultStatusCode:	Default status code
!	statusCodes[]:		Status code array
!
! Returned variables:
!	GDL stack:			GDL polygon
! ==============================================================================

	dim resVertices[]
	numVertices = callfunction(ch, "GetVertices", polygonID, resVertices)
	numVertices = numVertices / 3

	dim contArr[]
	numContours = callfunction(ch, "GetContourEnds", polygonID, contArr)

	dim inhEdgeInfos[]
	numEdges = callfunction(ch, "GetInhEdgeInfos", polygonID, inhEdgeInfos)

	for contIndex = 1 to numContours

		if contIndex = 1 then
			begIdx = 0
		else
			begIdx = contArr[contIndex] - 1
		endif
		if contIndex = numContours then
			endIdx = numVertices - 1
		else
			endIdx = contArr[contIndex + 1] - 2
		endif

		bClosed = 0
		bStartWithLast = 0

		index = endIdx * 3
		lastVertX	= resVertices[index + 1]
		lastVertY	= resVertices[index + 2]
		lastVertA	= resVertices[index + 3]
		edgeInfo	= inhEdgeInfos[begIdx + 1]

		if abs(lastVertA) > EPS then
			put lastVertX, lastVertY, 1
			bStartWithLast = 1
		endif

		for vertIndex = begIdx to endIdx
			index = vertIndex * 3
			actVertX = resVertices[index + 1]
			actVertY = resVertices[index + 2]
			actVertA = resVertices[index + 3]

			if edgeInfo > 0 & edgeInfo <= vardim1(statusCodes) then
				statusCode = statusCodes[edgeInfo]
			else
				statusCode = defaultStatusCode
			endif

			if vertIndex = begIdx then
				if bStartWithLast then
					ac2gdl_spx = lastVertX
					ac2gdl_spy = lastVertY
				else
					ac2gdl_spx = actVertX
					ac2gdl_spy = actVertY
				endif
			endif

			if abs(lastVertA) > EPS then
				ac2gdl_mx = (actVertX + lastVertX) / 2
				ac2gdl_my = (actVertY + lastVertY) / 2
				ac2gdl_ratio = 1 / 2 / tan (lastVertA / 2)

				ac2gdl_cx = ac2gdl_mx - ac2gdl_ratio * (actVertY - lastVertY)	! Arc center
				ac2gdl_cy = ac2gdl_my + ac2gdl_ratio * (actVertX - lastVertX)

				put ac2gdl_cx,	ac2gdl_cy,	900,
					0,			lastVertA,	4000 + statusCode + 64
			endif

			if vertIndex > begIdx & abs(ac2gdl_spx - actVertX) < EPS & abs(ac2gdl_spy - actVertY) < EPS then
!!!				put actVertX, actVertY, -1	! Sill polygon never contains holes
				bClosed = 1
			else
				if vertIndex < endIdx | not(bStartWithLast) then
					put actVertX, actVertY, statusCode
				endif
			endif

			lastVertX	= actVertX
			lastVertY	= actVertY
			lastVertA	= actVertA
			edgeInfo	= inhEdgeInfos[vertIndex + 2]
		next vertIndex

		if not(bClosed) & numContours > 1 then	! Close the polygon if it has holes
			put ac2gdl_spx, ac2gdl_spy, -1
		endif

	next contIndex
return


! ------------------------------------------------------------------------------
! Timber Sill & Sill Elevation for Timber Sill
! ------------------------------------------------------------------------------
! Input variables:
!	sillElevation:			Sill Elevation
!	angleSill: 				Sill Angle
!	sidelightCutLeft:		Need cut on left side
!	sidelightCutPosLeft:	Cutting position on left side
!	sidelightCutRight:		Need cut on right side
!	sidelightCutPosRight:	Cutting position on right side
!	hSill:					Sill Thickness
!	bSillCurved:			Sill in Curved Wall, 0: straight, 1: curved
!	sillNosing:				Sill Nosing
!	matSill:				Sill Material
! ------------------------------------------------------------------------------
"DrawSill_Timber":

! cutting shape for casing -----------------------------------------------------

	if not(gs_fsill) then		! Bottom frame at sill option in USA windows
		if AC_WallType <> 2 then

			if not(curvedWall) then
				if sidelightCutLeft then
					if not(bElevBody) then
						py = spy4 - (spy4 - spy5) / (spx5 - spx4) * (sidelightCutPosLeft - spx4)
					else
						py = spy3 - (spy3 - spy6) / (spx6 - spx3) * (sidelightCutPosLeft - spx3)
					endif
					if sidelightCutLeft = 2 & (gs_turn_plaster_show_3D | gs_sill_ovhg_left > EPS) then
						put sidelightCutPosLeft + thkPlasterAtSillSlLeft * gs_turn_plaster_show_3D,	 0,			15,
							sidelightCutPosLeft + thkPlasterAtSillSlLeft * gs_turn_plaster_show_3D,	-WIDO_SILL,	15,
							sidelightCutPosLeft - gs_sill_ovhg_left,								-WIDO_SILL,	15,
							sidelightCutPosLeft - gs_sill_ovhg_left,								 py,		15
					else
						put sidelightCutPosLeft,	0,	15,
							sidelightCutPosLeft,	py,	15
					endif
				else
					if (thkPlasterAtSillLeft > EPS) & gs_turn_plaster_show_3D then
						startIdx = idxSillEndPlasterLeft
						endIdx	 = idxSillStartPlasterLeft
					else
						startIdx = idxSillEndRevealLeft
						endIdx	 = idxSillStartRevealLeft
					endif

					for i = startIdx to endIdx step -1
						put leftRevealPnts[i][1], leftRevealPnts[i][2], 8 + 7 * not(stackLeft)	! 15 or 8
					next i

					put	spx3, spy3,	 8 + 7 * not(stackLeft)								! 15 or 8
					if not(bElevBody) then put spx4, spy4, 13 + 2 * not(stackLeft)		! 15 or 13
				endif

				if sidelightCutRight then
					if not(bElevBody) then
						py = spy4 - (spy4 - spy5) / (spx5 - spx4) * (sidelightCutPosRight - spx4)
					else
						py = spy3 - (spy3 - spy6) / (spx6 - spx3) * (sidelightCutPosRight - spx3)
					endif
					if sidelightCutRight = 2 & (gs_turn_plaster_show_3D | gs_sill_ovhg_right > EPS) then
						put sidelightCutPosRight + gs_sill_ovhg_right,									 py,		15,
							sidelightCutPosRight + gs_sill_ovhg_right,									-WIDO_SILL,	15,
							sidelightCutPosRight - thkPlasterAtSillSlRight * gs_turn_plaster_show_3D,	-WIDO_SILL,	15,
							sidelightCutPosRight - thkPlasterAtSillSlRight * gs_turn_plaster_show_3D,	 0,			15
					else
						put sidelightCutPosRight,	py,	15,
							sidelightCutPosRight,	0,	15
					endif
				else
					if not(bElevBody) then put spx5, spy5,  8 + 7 * not(stackRight)		! 15 or 8
					put	spx6, spy6,  8 + 7 * not(stackRight)							! 15 or 8

					if (thkPlasterAtSillRight > EPS) & gs_turn_plaster_show_3D then
						startIdx = idxSillStartPlasterRight
						endIdx	 = idxSillEndPlasterRight
					else
						startIdx = idxSillStartRevealRight
						endIdx	 = idxSillEndRevealRight
					endif

					for i = startIdx to endIdx
						if i = endIdx then
							put rightRevealPnts[i][1], rightRevealPnts[i][2], 13 + 2 * not(stackRight)	! 15 or 13
						else
							put rightRevealPnts[i][1], rightRevealPnts[i][2], 8 + 7 * not(stackRight)	! 15 or 8
						endif
					next i
				endif
			else

				bCurvedAtSillSide		= (curvedWall & iSillType = SILL_TIMBER & bSillCurved)

				bCurvedAtWindowFrame	= (curvedWall & gs_IsCurved)

				if bCurvedAtSillSide & not(bCurvedAtWindowFrame) & not(wallIsLeft) then
					if abs(WOD) < radSill - sillNosing + EPS then
						bCurvedAtSillSide = 0
					endif
				endif

! Calculation for curved wall --------------------------------------------------

				if sidelightCutLeft then
					if bCurvedAtSillSide then
						pLy = WOD - iArchSign * sqr((radSill + iArchSign * gs_sill_nosing)^2 - (sidelightCutPosLeft - gs_sill_ovhg_left * (sidelightCutLeft = 2))^2)
					else
						pLy = spy4 - (spy4 - spy5) / (spx5 - spx4) * (sidelightCutPosLeft - spx4)
					endif
					if sidelightCutLeft = 2 & (gs_turn_plaster_show_3D | gs_sill_ovhg_left > EPS) then
						pLy1 = WOD - iArchSign * sqr(radSill^2 - (sidelightCutPosLeft + thkPlasterAtSillSlLeft * gs_turn_plaster_show_3D)^2)
						pLy2 = WOD - iArchSign * sqr(radSill^2 - (sidelightCutPosLeft - gs_sill_ovhg_left)^2)
					endif
					pLy3 = WOD - iArchSign * sqr(radSill^2 - sidelightCutPosLeft^2)
				endif

				if sidelightCutRight then
					if bCurvedAtSillSide then
						pRy = WOD - iArchSign * sqr((radSill + iArchSign * gs_sill_nosing)^2 - (sidelightCutPosRight + gs_sill_ovhg_right * (sidelightCutRight = 2))^2)
					else
						pRy = spy4 - (spy4 - spy5) / (spx5 - spx4) * (sidelightCutPosRight - spx4)
					endif
					pRy1 = WOD - iArchSign * sqr(radSill^2 - (sidelightCutPosRight + gs_sill_ovhg_right)^2)
					pRy2 = WOD - iArchSign * sqr(radSill^2 - (sidelightCutPosRight - thkPlasterAtSillSlRight * gs_turn_plaster_show_3D)^2)
					pRy3 = WOD - iArchSign * sqr(radSill^2 - sidelightCutPosRight^2)
				endif

! Sill Body points -------------------------------------------------------------

				if not(bElevBody) then

					put 0, WOD, 900

					if sidelightCutLeft then
						if sidelightCutLeft = 2 & (gs_turn_plaster_show_3D | gs_sill_ovhg_left > EPS) then
							put sidelightCutPosLeft + thkPlasterAtSillSlLeft * gs_turn_plaster_show_3D,	0,		15
							put sidelightCutPosLeft + thkPlasterAtSillSlLeft * gs_turn_plaster_show_3D,	pLy1,	15
							put sidelightCutPosLeft - gs_sill_ovhg_left,								pLy2,	15
							if bCurvedAtSillSide then
								put sidelightCutPosLeft - gs_sill_ovhg_left, pLy + iArchSign * EPS, 15
							endif
							put sidelightCutPosLeft - gs_sill_ovhg_left, pLy, 15 + bCurvedAtSillSide * 64
						else
							put sidelightCutPosLeft,	0,		15
							put sidelightCutPosLeft,	pLy,	15 + bCurvedAtSillSide * 64
						endif
					else
						if (thkPlasterAtSillLeft > EPS) & gs_turn_plaster_show_3D then
							startIdx = idxSillEndPlasterLeft
							endIdx	 = idxSillStartPlasterLeft
						else
							startIdx = idxSillEndRevealLeft
							endIdx	 = idxSillStartRevealLeft
						endif

						for i = startIdx  to (endIdx + 1) step -1
							put leftRevealPnts[i][1], leftRevealPnts[i][2],	8 + 7 * not(stackLeft)
						next i

						if gs_sill_ovhg_left > EPS | ((thkPlasterAtSillLeft > EPS) & gs_turn_plaster_show_3D) then
							alfaStart	= -signWallIsLeft * atn(leftRevealPnts[endIdx][1] / (leftRevealPnts[endIdx][2] - WOD))
							alfaEnd		= -signWallIsLeft * atn(spx3 / (spy3 - WOD))

							arcRadius	= radSill
							bMiddlePoints = 1
							firstStatus	= 8 + 7 * not(stackLeft) + 64
							lastStatus	= 8 + 7 * not(stackLeft) + 64

							if abs(alfaStart - alfaEnd) > EPS then gosub 100
						endif

						put	spx4, spy4,	13 + 2 * not(stackRight) + bCurvedAtSillSide * 64
					endif


					if sidelightCutRight then
						if sidelightCutRight = 2 & (gs_turn_plaster_show_3D | gs_sill_ovhg_right > EPS) then
							put sidelightCutPosRight + gs_sill_ovhg_right,									pRy,	15 + 3064 * bCurvedAtSillSide
							put sidelightCutPosRight + gs_sill_ovhg_right,									pRy1,	15
							put sidelightCutPosRight - thkPlasterAtSillSlRight * gs_turn_plaster_show_3D,	pRy2,	15
							put sidelightCutPosRight - thkPlasterAtSillSlRight * gs_turn_plaster_show_3D,	0,		15
						else
							put sidelightCutPosRight,	pRy,	15 + 3064 * bCurvedAtSillSide
							put sidelightCutPosRight,	0,		15
						endif
					else
						put	spx5, spy5,	3000 * bCurvedAtSillSide + 8 + 7 * not(stackRight)			! 15 or 8

						if (thkPlasterAtSillRight > EPS) & gs_turn_plaster_show_3D then
							startIdx = idxSillStartPlasterRight
							endIdx	 = idxSillEndPlasterRight
						else
							startIdx = idxSillStartRevealRight
							endIdx	 = idxSillEndRevealRight
						endif

						if gs_sill_ovhg_right > EPS | ((thkPlasterAtSillRight > EPS) & gs_turn_plaster_show_3D) then
							alfaStart	= -signWallIsLeft * atn(spx6 / (spy6 - WOD))
							alfaEnd		= -signWallIsLeft * atn(rightRevealPnts[startIdx][1] / (rightRevealPnts[startIdx][2] - WOD))

							arcRadius	= radSill
							bMiddlePoints = 1
							firstStatus	= 8 + 7 * not(stackRight) + 64
							lastStatus	= 8 + 7 * not(stackRight) + 64

							if abs(alfaStart - alfaEnd) > EPS then gosub 100
						endif

						for i = (startIdx + 1) to endIdx
							if i = idxSillEndRevealRight then
								put rightRevealPnts[i][1], rightRevealPnts[i][2], 13 + 2 * not(stackRight) 	! 15 or 13
							else
								put rightRevealPnts[i][1], rightRevealPnts[i][2],  8 + 7 * not(stackLeft)	! 15 or 8
							endif
						next i
					endif

					if not(sidelightCutLeft) then
						! Close polygon
						if (thkPlasterAtSillLeft > EPS) & gs_turn_plaster_show_3D then
							put	leftRevealPnts[idxSillEndPlasterLeft][1], leftRevealPnts[idxSillEndPlasterLeft][2], 3000 * (bCurvedAtWindowFrame) + 15
						else
							put	leftRevealPnts[idxSillEndRevealLeft][1],  leftRevealPnts[idxSillEndRevealLeft][2],  3000 * (bCurvedAtWindowFrame) + 15
						endif
					endif

				else

! Elevation Body points ---------------------------------------------------------

					put 0, WOD, 900

					if sidelightCutLeft then
						if sidelightCutLeft = 2 & (gs_turn_plaster_show_3D | gs_sill_ovhg_left > EPS) then
							put sidelightCutPosLeft + thkPlasterAtSillSlLeft * gs_turn_plaster_show_3D,	0, 15
							alfaStartElevBody = -signWallIsLeft * atn((sidelightCutPosLeft + thkPlasterAtSillSlLeft * gs_turn_plaster_show_3D) / (pLy1 - WOD))
						else
							put sidelightCutPosLeft, 0, 15
							alfaStartElevBody = -signWallIsLeft * atn(sidelightCutPosLeft / (pLy3 - WOD))
						endif
					else
						if (thkPlasterAtSillLeft > EPS) & gs_turn_plaster_show_3D then
							startIdx = idxSillEndPlasterLeft
							endIdx	 = idxSillStartPlasterLeft
							alfaStartElevBody = -signWallIsLeft * atn(leftRevealPnts[idxSillStartPlasterLeft][1] / (leftRevealPnts[idxSillStartPlasterLeft][2] - WOD))
						else
							startIdx = idxSillEndRevealLeft
							endIdx	 = idxSillStartRevealLeft
							alfaStartElevBody = -signWallIsLeft * atn(leftRevealPnts[idxSillStartRevealLeft][1]  / (leftRevealPnts[idxSillStartRevealLeft][2]  - WOD))
						endif

						for i = startIdx  to (endIdx + 1) step -1
							put leftRevealPnts[i][1], leftRevealPnts[i][2],	8 + 7 * not(stackLeft)			! 15 or 8
						next i
					endif

					if sidelightCutRight then
						if sidelightCutRight = 2 & (gs_turn_plaster_show_3D | gs_sill_ovhg_right > EPS) then
							alfaEndElevBody = -signWallIsLeft * atn((sidelightCutPosRight - thkPlasterAtSillSlRight * gs_turn_plaster_show_3D) / (pRy2 - WOD))
						else
							alfaEndElevBody = -signWallIsLeft * atn(sidelightCutPosRight / (pRy3 - WOD))
						endif
					else
						if (thkPlasterAtSillRight > EPS) & gs_turn_plaster_show_3D then
							alfaEndElevBody = -signWallIsLeft * atn(rightRevealPnts[idxSillStartPlasterRight][1] / (rightRevealPnts[idxSillStartPlasterRight][2] - WOD))
						else
							alfaEndElevBody = -signWallIsLeft * atn(rightRevealPnts[idxSillStartRevealRight][1]  / (rightRevealPnts[idxSillStartRevealRight][2]  - WOD))
						endif
					endif

					if bElevBody then
						alfaStart	= alfaStartElevBody
						alfaEnd		= alfaEndElevBody
						arcRadius	= radSill
						bMiddlePoints = 1
						firstStatus	= 15 ! 8 + 7 * not(gs_stack_right)
						lastStatus	= 15 ! 10 + 5 * not(gs_stack_left)
						gosub 100
					endif

					if sidelightCutRight then
						if sidelightCutRight = 2 & (gs_turn_plaster_show_3D | gs_sill_ovhg_right > EPS) then
							put sidelightCutPosRight - thkPlasterAtSillSlRight * gs_turn_plaster_show_3D, 0, 15
						else
							put sidelightCutPosRight, 0, 15
						endif
					else
						if (thkPlasterAtSillRight > EPS) & gs_turn_plaster_show_3D then
							startIdx = idxSillStartPlasterRight
							endIdx	 = idxSillEndPlasterRight
						else
							startIdx = idxSillStartRevealRight
							endIdx	 = idxSillEndRevealRight
						endif

						for i = (startIdx + 1) to endIdx
							if i = idxSillEndRevealRight then
								put rightRevealPnts[i][1], rightRevealPnts[i][2], 13 + 2 * not(stackRight) 	! 15 or 13
							else
								put rightRevealPnts[i][1], rightRevealPnts[i][2],  8 + 7 * not(stackLeft)	! 15 or 8
							endif
						next i
					endif
				endif
			endif

! --------------------------------------------------------

			if nsp > 0 then
				sprism_ matSill, matSill, matSill,
					nsp/3, 0,0, 1,0, hSill, -angleSill, get(nsp)
			endif

! Hotspots ---------------------------------------------------------------------

			if not(bElevBody) then
				if sidelightCutLeft then
					if sidelightCutLeft = 2 & gs_turn_plaster_show_3D then
						hotspot sidelightCutPosLeft + thkPlasterAtSillSlLeft, leftRevealPnts[idxSillEndRevealLeft][2], gs_sill_thk, 10052
					else
						hotspot sidelightCutPosLeft, leftRevealPnts[idxSillEndRevealLeft][2], gs_sill_thk, 10051
					endif
				else
					hotspot leftRevealPnts[idxSillEndRevealLeft][1],  leftRevealPnts[idxSillEndRevealLeft][2], gs_sill_thk, 10000
				endif
				if sidelightCutRight then
					if sidelightCutRight = 2 & gs_turn_plaster_show_3D then
						hotspot sidelightCutPosRight - thkPlasterAtSillSlRight, rightRevealPnts[ idxSillEndRevealRight][2], gs_sill_thk, 10053
					else
						hotspot sidelightCutPosRight, rightRevealPnts[idxSillEndRevealRight][2], gs_sill_thk, 10050
					endif
				else
					hotspot rightRevealPnts[idxSillEndRevealRight][1], rightRevealPnts[idxSillEndRevealRight][2], gs_sill_thk, 10001
				endif
			endif
		else
			ch = initaddonscope ("PolyOperations", "", "")

! Generate Sill Polygon --------------------------------------------------------

			bGetWallCutPolygons = 0
			bPolyFor3D = 1
			gosub 2000

! Draw resulting polygons ------------------------------------------------------

			defaultStatusCode = 8
			dim statusCodes[2]
			statusCodes[1] = 15
			statusCodes[2] = 15

			dim resPolyIDArr[]
			numPoly = callfunction (ch, "GetDestinationPolygons", "", resPolyIDArr)

			for i = 1 to numPoly
				polygonID = resPolyIDArr[i]
				gosub 1000	! Get GDL Polygon

				sprism_ matSill, matSill, matSill,
						nsp/3, 0,0, 1,0, hSill, -angleSill, get(nsp)
			next i

! Close channel ----------------------------------------------------------------

			closeaddonscope ch
		endif
	endif

return


! ------------------------------------------------------------------------------
! Brick Sill
! ------------------------------------------------------------------------------
10200:
	if iSillType = SILL_BRICK | iSillType = SILL_SIMPLEBLOCK | iSillType = SILL_BLOCK then
		gs_sill_width = gs_sill_thk * tan(gs_sill_angle) + (WIDO_SILL + SillSlipin + gs_sill_nosing) / cos(gs_sill_angle)

		put 	-SillSlipin,																		0,														15,
				-SillSlipin + gs_sill_width * cos(gs_sill_angle),									gs_sill_width * sin(gs_sill_angle),						15,
				-SillSlipin + gs_sill_width * cos(gs_sill_angle) - gs_sill_thk * sin(gs_sill_angle),gs_sill_width * sin(gs_sill_angle) + gs_sill_thk * cos(gs_sill_angle),	15,
				-SillSlipin - gs_sill_thk * sin(gs_sill_angle),										gs_sill_thk * cos(gs_sill_angle),						15

		if iBrickSilldetlevel = BRICKSILL_SIMPLE then
			prism_ 4, pxR - pxL,
				use (nsp)
		endif

		for i = 1 to nsp/3
			sillPoly[(i-1) * 2 + 1] = get (1)
			sillPoly[(i-1) * 2 + 2] = get (1)
			eeeeee = get (1)
		next i

		sillLeft			= abs(pxL)
		sillRight			= abs(pxR)
		sillBottom			= -(gs_sill_thk / cos (gs_sill_angle) + (gs_sill_slip_in + WIDO_SILL) * tan(gs_sill_angle))
		sillBottomOutside	= sillBottom
		sillSideHeight		= -sillBottom - SillSlipin * tan(gs_sill_angle)
		sillSideAngle		= gs_sill_angle

		if iBrickSilldetlevel = BRICKSILL_DETAILED then
			addx -SillSlipin
			rotz gs_sill_angle

			if stackLeft then
				rotx 90
				cutpolya 4, 2, 0,
						-1, -1, 10,
						1, -1, 10,
						1, 0, 10,
						-1, 0, 10
				del 1
			endif
			if stackRight then
				rotx 90
				addy (pxR - pxL)
				cutpolya 4, 2, 0,
						-1, 1, 10,
						1, 1, 10,
						1, 0, 10,
						-1, 0, 10
				del 2
			endif

			db = int((pxR - pxL) / (gs_brick_sill_br_thk + gs_brick_sill_mort_thk))
			if db > 1 then
				gs_mor_th2=((pxR - pxL)-(db*gs_brick_sill_br_thk))/(db-1)
			else
				gs_brick_sill_br_thk = pxR - pxL
			endif
			if stackLeft+stackRight=1 then
				db=INT((pxR - pxL+gs_brick_sill_br_thk/2)/(gs_brick_sill_br_thk+gs_brick_sill_mort_thk))
				gs_mor_th2=((pxR - pxL+gs_brick_sill_br_thk/2)-(db*gs_brick_sill_br_thk))/(db-1)
			endif
			if stackLeft+stackRight=2 then
				db=INT((pxR - pxL+gs_brick_sill_br_thk)/(gs_brick_sill_br_thk+gs_brick_sill_mort_thk))
				gs_mor_th2=((pxR - pxL+gs_brick_sill_br_thk)-(db*gs_brick_sill_br_thk))/(db-1)
			endif

			addz -gs_brick_sill_br_thk/2*(stackLeft)
			material gs_sill_mat

			for i=1 to db+cowi*100
				prism_ 4, gs_brick_sill_br_thk,
						0,				0,				15,
						gs_sill_width,	0,				15,
						gs_sill_width,	gs_sill_thk,	15,
						0,				gs_sill_thk,	15
				addz gs_brick_sill_br_thk+gs_mor_th2
			next i
			del db+cowi*100
			del 1

			addz gs_brick_sill_br_thk-gs_brick_sill_br_thk/2*(stackLeft)
			material gs_brick_sill_mort_mat
			for i=1 to db-1+cowi*100
				prism_ 4, gs_mor_th2,
						0,				0,				15,
						gs_sill_width,	0,				15,
						gs_sill_width,	gs_sill_thk,	15,
						0,				gs_sill_thk,	15
				addz gs_brick_sill_br_thk+gs_mor_th2
			next i
			del db-1+cowi*100
			del 1

			if stackLeft then cutend
			if stackRight then cutend
			del 2
		endif

		gs_sill_holeDepthBehind = max(gs_sill_holeDepthBehind, sin(gs_sill_angle) * gs_sill_thk)

		rotz 90
		roty -90
		addx -pxL

		if sidelightCutLeft then
			if sidelightCutLeft = 2 & gs_turn_plaster_show_3D then
				hotspot sidelightCutPosLeft + thkPlasterAtSillSlLeft, SillSlipin + gs_sill_holeDepthBehind, -gs_sill_thk / cos(gs_sill_angle) - tan(gs_sill_angle) * (WIDO_SILL + gs_sill_slip_in), 10052
			else
				hotspot sidelightCutPosLeft, SillSlipin + gs_sill_holeDepthBehind, -gs_sill_thk / cos(gs_sill_angle) - tan(gs_sill_angle) * (WIDO_SILL + gs_sill_slip_in), 10051
			endif
		else
			hotspot leftRevealPnts[ idxSillEndRevealLeft][1], SillSlipin + gs_sill_holeDepthBehind, -gs_sill_thk / cos(gs_sill_angle) - tan(gs_sill_angle) * (WIDO_SILL + gs_sill_slip_in), 10000
		endif
		if sidelightCutRight then
			if sidelightCutRight = 2 & gs_turn_plaster_show_3D then
				hotspot sidelightCutPosRight - thkPlasterAtSillSlRight, SillSlipin + gs_sill_holeDepthBehind, -gs_sill_thk / cos(gs_sill_angle) - tan(gs_sill_angle) * (WIDO_SILL + gs_sill_slip_in), 10053
			else
				hotspot sidelightCutPosRight, SillSlipin + gs_sill_holeDepthBehind, -gs_sill_thk / cos(gs_sill_angle) - tan(gs_sill_angle) * (WIDO_SILL + gs_sill_slip_in), 10050
			endif
		else
			hotspot rightRevealPnts[idxSillEndRevealRight][1], SillSlipin + gs_sill_holeDepthBehind, -gs_sill_thk / cos(gs_sill_angle) - tan(gs_sill_angle) * (WIDO_SILL + gs_sill_slip_in), 10001
		endif
		del 3

	endif

return


! ------------------------------------------------------------------------------
! Stone Sill
! ------------------------------------------------------------------------------
10300:

	Sill_FrameKeep_x	= gs_sill_topWidth
	SillAngle_x			= gs_sill_width - gs_sill_topWidth

	if gs_sill_drip then
		put	-sillSlipIn,						0,														15,
			Sill_FrameKeep_x - sillSlipIn,		0,														15,
			Sill_FrameKeep_x - sillSlipIn,		gs_sill_topHeight,										15,
			gs_sill_width - sillSlipIn,			gs_sill_topHeight + SillAngle_x * tan(gs_sill_angle),	15,
			gs_sill_width - sillSlipIn,			gs_sill_thk,											15

			drip_rad	= 0.01
			drip_polys	= 6
			drip_segm	= 180 / drip_polys

		for kk = 0 to drip_polys
			put gs_sill_width - gs_sill_width / 0.16 * 0.025 + cos(kk * drip_segm) * drip_rad - sillSlipIn,
				gs_sill_thk - sin(kk * drip_segm) * drip_rad,
				15 + (kk <> 0) * 64
		next kk

		put	-sillSlipIn,						gs_sill_thk,											15

		prism_ nsp/3, pxR - pxL,
			get(nsp)
	endif

	put		-sillSlipIn,						0,														15,
			Sill_FrameKeep_x - sillSlipIn,		0,														15,
			Sill_FrameKeep_x - sillSlipIn,		gs_sill_topHeight,										15,
			gs_sill_width - sillSlipIn,			gs_sill_topHeight + SillAngle_x * tan(gs_sill_angle),	15,
			gs_sill_width - sillSlipIn,			gs_sill_thk,											15,
			-sillSlipIn,						gs_sill_thk,											15

	if not(gs_sill_drip) then
		prism_ nsp/3, pxR - pxL,
			use(nsp)
	endif

	for i = 1 to nsp/3
		sillPoly[(i-1) * 2 + 1] = get (1)
		sillPoly[(i-1) * 2 + 2] = get (1)
		eeeeee = get (1)
	next i

	sillLeft			= abs(pxL)
	sillRight			= abs(pxR)
	sillBottom			= -gs_sill_thk
	sillBottomOutside	= -gs_sill_thk
	sillSideHeight		= -sillBottom - gs_sill_topHeight - (SillSlipin - gs_sill_topWidth) * tan (gs_sill_angle)
	sillSideAngle		=  gs_sill_angle

	rotz 90
	roty -90
	addx -pxL

		if sidelightCutLeft then
			if sidelightCutLeft = 2 & gs_turn_plaster_show_3D then
				hotspot sidelightCutPosLeft + thkPlasterAtSillSlLeft, SillSlipin + gs_sill_holeDepthBehind, -gs_sill_thk, 10052
			else
				hotspot sidelightCutPosLeft, SillSlipin + gs_sill_holeDepthBehind, -gs_sill_thk, 10051
			endif
		else
			hotspot leftRevealPnts[idxSillEndRevealLeft][1], SillSlipin + gs_sill_holeDepthBehind, -gs_sill_thk, 10000
		endif
		if sidelightCutRight then
			if sidelightCutRight = 2 & gs_turn_plaster_show_3D then
				hotspot sidelightCutPosRight - thkPlasterAtSillSlRight, SillSlipin + gs_sill_holeDepthBehind, -gs_sill_thk, 10053
			else
				hotspot sidelightCutPosRight, SillSlipin + gs_sill_holeDepthBehind, -gs_sill_thk, 10050
			endif
		else
			hotspot rightRevealPnts[idxSillEndRevealRight][1], SillSlipin + gs_sill_holeDepthBehind, -gs_sill_thk, 10001
		endif

	del 3

return


! ------------------------------------------------------------------------------
! Ceramic Sill
! ------------------------------------------------------------------------------
10400:

	xDistortion = gs_sill_topWidth / 0.03
	yDistortion = gs_sill_thk / 0.047

	PUT	 0, 						-gs_sill_topHeight,
		 0, 						 0,
		 gs_sill_topWidth,				 gs_sill_endthk,
		 gs_sill_width - 0.004,		 gs_sill_endthk,
		 gs_sill_width, 			 gs_sill_endthk - 0.004,
		 gs_sill_width, 			 0.004,
		 gs_sill_width - 0.004, 	 0,
		 gs_sill_topWidth, 			 0,
		 0.02900 * xDistortion, 	 0,
		 0.015 * xDistortion, 		-gs_sill_topHeight + 0.00905 * yDistortion,
		 0.015 * xDistortion,		-gs_sill_topHeight + 0.00041 * yDistortion

	for i = 1 to nsp/2
		sillPoly[(i-1) * 2 + 1] = get (1)
		sillPoly[(i-1) * 2 + 2] = get (1)
	next i

	n = i - 1
	bordh_proj = gs_sill_topHeight * cos(gs_sill_angle)
	for i = 1 to n
		angB = 90
		t = sillPoly[(i-1) * 2 + 2]
		if sillPoly[(i-1) * 2 + 1] > EPS then
			angB = atn (sillPoly[(i-1) * 2 + 2] / sillPoly[(i-1) * 2 + 1])
			t = sillPoly[(i-1) * 2 + 1] / cos(angB)
		endif
		put	t * cos (angB + gs_sill_angle) - SillSlipin,
			t * sin (angB + gs_sill_angle) + bordh_proj,  mask_str
	next i

	prism_ nsp/3, pxR - pxL,
		use(nsp)

	for i = 1 to nsp/3
		sillPoly[(i-1) * 2 + 1] = get (1)
		sillPoly[(i-1) * 2 + 2] = get (1)
		eeeeee = get (1)
	next i

	sillLeft			= abs(pxL)
	sillRight			= abs(pxR)
	sillBottom			= -( gs_sill_topHeight * cos(gs_sill_angle) + tan(gs_sill_angle) * (WIDO_SILL + gs_sill_slip_in) + gs_sill_endthk / cos(gs_sill_angle) )
	sillBottomOutside	= sillBottom
	sillSideHeight		= tan(gs_sill_angle) * WIDO_SILL + gs_sill_endthk / cos(gs_sill_angle)
	sillSideAngle		=  gs_sill_angle

	rotz 90
	roty -90
	addx -pxL

		if sidelightCutLeft then
			if sidelightCutLeft = 2 & gs_turn_plaster_show_3D then
				hotspot sidelightCutPosLeft + thkPlasterAtSillSlLeft, SillSlipin + gs_sill_holeDepthBehind, sillBottom, 10052
			else
				hotspot sidelightCutPosLeft, SillSlipin + gs_sill_holeDepthBehind, sillBottom, 10051
			endif
		else
			hotspot leftRevealPnts[idxSillEndRevealLeft][1], SillSlipin + gs_sill_holeDepthBehind, sillBottom, 10000
		endif
		if sidelightCutRight then
			if sidelightCutRight = 2 & gs_turn_plaster_show_3D then
				hotspot sidelightCutPosRight - thkPlasterAtSillSlRight, SillSlipin + gs_sill_holeDepthBehind, sillBottom, 10053
			else
				hotspot sidelightCutPosRight, SillSlipin + gs_sill_holeDepthBehind, sillBottom, 10050
			endif
		else
			hotspot rightRevealPnts[idxSillEndRevealRight][1], SillSlipin + gs_sill_holeDepthBehind, sillBottom, 10001
		endif

	del 3
return


! ------------------------------------------------------------------------------
! Eternite Sill
! ------------------------------------------------------------------------------
10500:

	put		-SillSlipin,						 0,								mask_str,
			 gs_sill_topWidth - SillSlipin,		 0,								mask_str,
			 gs_sill_topWidth - SillSlipin,		 gs_sill_topHeight,					mask_str,
			 gs_sill_width - SillSlipin,		 gs_sill_thk - gs_sill_endthk,	mask_str,
			 gs_sill_width - SillSlipin,		 gs_sill_thk,					mask_str,
			 0.015 - SillSlipin,		 		 gs_sill_thk,					mask_str,
			-SillSlipin,						 gs_sill_thk - 0.015,			mask_str

	prism_ nsp/3, pxR - pxL,
		use(nsp)

	for i = 1 to nsp/3
		sillPoly[(i-1) * 2 + 1] = get (1)
		sillPoly[(i-1) * 2 + 2] = get (1)
		eeeeee = get (1)
	next i

	sillLeft			= abs(pxL)
	sillRight			= abs(pxR)
	sillBottom			= -gs_sill_thk
	sillBottomOutside	= -gs_sill_thk
	sillSideHeight		=  gs_sill_thk - gs_sill_topHeight - max(0, (SillSlipin - gs_sill_topWidth)) * tan(gs_sill_angle) - min(0, SillSlipin - gs_sill_topWidth) * tan(gs_sill_angle)
	sillSideAngle		=  gs_sill_angle

	rotz 90
	roty -90
	addx -pxL

		if sidelightCutLeft then
			if sidelightCutLeft = 2 & gs_turn_plaster_show_3D then
				hotspot sidelightCutPosLeft + thkPlasterAtSillSlLeft, SillSlipin + gs_sill_holeDepthBehind, sillBottom, 10052
			else
				hotspot sidelightCutPosLeft, SillSlipin + gs_sill_holeDepthBehind, sillBottom, 10051
			endif
		else
			hotspot leftRevealPnts[idxSillEndRevealLeft][1], SillSlipin + gs_sill_holeDepthBehind, sillBottom, 10000
		endif
		if sidelightCutRight then
			if sidelightCutRight = 2 & gs_turn_plaster_show_3D then
				hotspot sidelightCutPosRight - thkPlasterAtSillSlRight, SillSlipin + gs_sill_holeDepthBehind, sillBottom, 10053
			else
				hotspot sidelightCutPosRight, SillSlipin + gs_sill_holeDepthBehind, sillBottom, 10050
			endif
		else
			hotspot rightRevealPnts[idxSillEndRevealRight][1], SillSlipin + gs_sill_holeDepthBehind, sillBottom, 10001
		endif

	del 3
return


! ------------------------------------------------------------------------------
! Concrete Tub
! ------------------------------------------------------------------------------
10600:
	xDistortion	= gs_sill_width / 0.1
	yDistortion = gs_sill_thk / 0.185

	put		0.1 * xDistortion - SillSlipin,		 gs_sill_thk,						mask_str,
			0.1 * xDistortion - SillSlipin,		-0.17 * yDistortion + gs_sill_thk,	mask_str,
			0.08 * xDistortion - SillSlipin,	-0.17 * yDistortion + gs_sill_thk,	mask_str,
			0.075 * xDistortion - SillSlipin,	-0.15 * yDistortion + gs_sill_thk,	mask_str,
			0.025 * xDistortion - SillSlipin,	-0.15 * yDistortion + gs_sill_thk,	mask_str,
			0.02 * xDistortion - SillSlipin,	-0.185 * yDistortion + gs_sill_thk,	mask_str,
			-SillSlipin,						-0.185 * yDistortion + gs_sill_thk,	mask_str,
			-SillSlipin,						 gs_sill_thk,						mask_str

	prism_ nsp/3, pxR - pxL,
		use(nsp)

	for i = 1 to nsp/3
		sillPoly[(i-1) * 2 + 1] = get (1)
		sillPoly[(i-1) * 2 + 2] = get (1)
		eeeeee = get (1)
	next i

	sillLeft			= abs(pxL)
	sillRight			= abs(pxR)
	sillBottom			= -gs_sill_thk
	sillBottomOutside	= -gs_sill_thk
	sillSideHeight		= 0.15 * yDistortion
	sillSideAngle		= 0

	rotz 90
	roty -90
	addx -pxL

		if sidelightCutLeft then
			if sidelightCutLeft = 2 & gs_turn_plaster_show_3D then
				hotspot sidelightCutPosLeft + thkPlasterAtSillSlLeft, SillSlipin + gs_sill_holeDepthBehind, sillBottom, 10052
			else
				hotspot sidelightCutPosLeft, SillSlipin + gs_sill_holeDepthBehind, sillBottom, 10051
			endif
		else
			hotspot leftRevealPnts[idxSillEndRevealLeft][1], SillSlipin + gs_sill_holeDepthBehind, sillBottom, 10000
		endif
		if sidelightCutRight then
			if sidelightCutRight = 2 & gs_turn_plaster_show_3D then
				hotspot sidelightCutPosRight - thkPlasterAtSillSlRight, SillSlipin + gs_sill_holeDepthBehind, sillBottom, 10053
			else
				hotspot sidelightCutPosRight, SillSlipin + gs_sill_holeDepthBehind, sillBottom, 10050
			endif
		else
			hotspot rightRevealPnts[idxSillEndRevealRight][1], SillSlipin + gs_sill_holeDepthBehind, sillBottom, 10001
		endif

	del 3
return


! ------------------------------------------------------------------------------
! Aluminum Sill
! ------------------------------------------------------------------------------
10700:

	put 	-gs_sill_slip_in,													0, 																									mask_str+64,
			-gs_sill_slip_in,													gs_sill_topHeight + thk * tan((90-gs_sill_angle)/2), 													mask_str+64,
			gs_sill_width - thk - gs_sill_slip_in,								gs_sill_topHeight + thk * tan((90-gs_sill_angle)/2) + (gs_sill_thk - gs_sill_topHeight) - gs_sill_dripnos, 	mask_str+64,
			gs_sill_width - thk - gs_sill_slip_in,								gs_sill_thk - thk*tan(15) - thk/cos(15), 															mask_str+64,
			gs_sill_width - gs_sill_dripwidth + thk*sin(15) - gs_sill_slip_in,	gs_sill_thk - gs_sill_dripwidth * tan(15) - thk*cos(15),											mask_str+64,
			gs_sill_width - gs_sill_dripwidth - gs_sill_slip_in,				gs_sill_thk - gs_sill_dripwidth * tan(15),															mask_str+64,
			gs_sill_width - gs_sill_slip_in,									gs_sill_thk,																						mask_str+64,
			gs_sill_width - gs_sill_slip_in,									gs_sill_thk - gs_sill_dripnos,																		mask_str+64,
			thk - gs_sill_slip_in,												gs_sill_topHeight,																						mask_str+64,
			thk - gs_sill_slip_in,												0,																									mask_str+64


	prism_ nsp/3, pxR - pxL,
		use(nsp)

	for i = 1 to nsp/3
		sillPoly[(i-1) * 2 + 1] = get (1)
		sillPoly[(i-1) * 2 + 2] = get (1)
		eeeeee = get (1)
	next i

	sillLeft			= abs(pxL)
	sillRight			= abs(pxR)
	sillBottom			= -gs_sill_thk + gs_sill_nosing * tan(gs_sill_angle) - thk / cos(gs_sill_angle)
	sillBottomOutside	= -gs_sill_thk
	sillSideHeight		=  -sillBottom - gs_sill_topHeight + thk * tan(gs_sill_angle)
	sillSideAngle		=  gs_sill_angle

	cy = max(0, gs_sill_topHeight) + max(0, (WIDO_SILL - thk + gs_sill_slip_in) * tan(gs_sill_angle)) + thk / cos(gs_sill_angle) - gs_sill_dripnos * (WIDO_SILL + gs_sill_slip_in) / (gs_sill_width - thk)

	rotz 90
	roty -90
	addx -pxL

		if sidelightCutLeft then
			if sidelightCutLeft = 2 & gs_turn_plaster_show_3D then
				hotspot sidelightCutPosLeft + thkPlasterAtSillSlLeft, SillSlipin + gs_sill_holeDepthBehind, -cy, 10052
			else
				hotspot sidelightCutPosLeft, SillSlipin + gs_sill_holeDepthBehind, -cy, 10051
			endif
		else
			hotspot leftRevealPnts[idxSillEndRevealLeft][1], SillSlipin + gs_sill_holeDepthBehind, -cy, 10000
		endif
		if sidelightCutRight then
			if sidelightCutRight = 2 & gs_turn_plaster_show_3D then
				hotspot sidelightCutPosRight - thkPlasterAtSillSlRight, SillSlipin + gs_sill_holeDepthBehind, -cy, 10053
			else
				hotspot sidelightCutPosRight, SillSlipin + gs_sill_holeDepthBehind, -cy, 10050
			endif
		else
			hotspot rightRevealPnts[idxSillEndRevealRight][1], SillSlipin + gs_sill_holeDepthBehind, -cy, 10001
		endif

	del 3
return


! ------------------------------------------------------------------------------
! Solid Sill 1.1 / Massiv-Fensterbank 1.1 (CHE)
! ------------------------------------------------------------------------------
10800:
	if lod3D_Sill = 3 then
		put	0, 						-sillElevation - gs_sill_elev, 									mask_str,
			0, 						-sillElevation - gs_sill_elev - gs_sill_thk,					mask_str,
			gs_sill_topWidth, 			-sillElevation - gs_sill_elev - gs_sill_thk, 					mask_str,
			gs_sill_topWidth, 			-sillElevation - gs_sill_elev - gs_sill_thk + gs_sill_topHeight, 	mask_str,
			gs_sill_width, 			-sillElevation - gs_sill_elev - gs_sill_endthk, 				mask_str,
			gs_sill_width, 			-sillElevation - gs_sill_elev, 									mask_str,
			gs_sill_width - 0.01, 	-sillElevation - gs_sill_elev,									mask_str,
			gs_sill_width - 0.01, 	-sillElevation - gs_sill_elev - 0.007, 							mask_str,
			gs_sill_width - 0.017, 	-sillElevation - gs_sill_elev - 0.007, 							mask_str,
			gs_sill_width - 0.017, 	-sillElevation - gs_sill_elev, 									mask_str,
			0, 						-sillElevation - gs_sill_elev, 									-1
	else
		put	0, 						-sillElevation - gs_sill_elev, 					mask_str,
			0, 						-sillElevation - gs_sill_elev - gs_sill_thk, 	mask_str,
			gs_sill_width, 			-sillElevation - gs_sill_elev - gs_sill_endthk, mask_str,
			gs_sill_width, 			-sillElevation - gs_sill_elev, 					mask_str,
			0, 						-sillElevation - gs_sill_elev, 					-1
	endif

	prism_ nsp/3, pxR - pxL,
		use(nsp)

	base
	vert 0,	0, 0
	vert 0,	0, 1
	vert 0,	1, 0
	vert 1,	0, 0
	coor 2, -1, -2, -3, -4
	body 1

	for i = 1 to nsp/3
		sillPoly[(i-1) * 2 + 1] = get (1)
		sillPoly[(i-1) * 2 + 2] = get (1)
		eeeeee = get (1)
	next i

	sillLeft			= abs(pxL)
	sillRight			= abs(pxR)
	sillBottom			= sillElevation
	sillBottomOutside	= sillElevation + gs_sill_elev
	if lod3D_Sill = 3 then
		gs_sill_angle	= atn((gs_sill_thk - gs_sill_endthk - gs_sill_topHeight) / (gs_sill_width - gs_sill_topWidth))
		sillSideHeight	= gs_sill_elev + gs_sill_thk - gs_sill_topHeight + gs_sill_topWidth * tan(gs_sill_angle)
	else
		gs_sill_angle	= atn((gs_sill_thk - gs_sill_endthk) / gs_sill_width)
		sillSideHeight	= gs_sill_elev + gs_sill_thk
	endif
	sillSideAngle		= gs_sill_angle

	rotz 90
	roty -90
	addx -pxL

		if sidelightCutLeft then
			if sidelightCutLeft = 2 & gs_turn_plaster_show_3D then
				hotspot sidelightCutPosLeft + thkPlasterAtSillSlLeft, leftRevealPnts[ idxSillEndRevealLeft][2], sillElevation + gs_sill_thk, 10052
			else
				hotspot sidelightCutPosLeft, leftRevealPnts[ idxSillEndRevealLeft][2], sillElevation + gs_sill_thk, 10051
			endif
		else
			hotspot leftRevealPnts[idxSillEndRevealLeft][1], leftRevealPnts[ idxSillEndRevealLeft][2], sillElevation + gs_sill_thk, 10000
		endif
		if sidelightCutRight then
			if sidelightCutRight = 2 & gs_turn_plaster_show_3D then
				hotspot sidelightCutPosRight - thkPlasterAtSillSlRight, rightRevealPnts[idxSillEndRevealRight][2], sillElevation + gs_sill_thk, 10053
			else
				hotspot sidelightCutPosRight, rightRevealPnts[idxSillEndRevealRight][2], sillElevation + gs_sill_thk, 10050
			endif
		else
			hotspot rightRevealPnts[idxSillEndRevealRight][1], rightRevealPnts[idxSillEndRevealRight][2], sillElevation + gs_sill_thk, 10001
		endif

	del 3

return


! ------------------------------------------------------------------------------
! Solid Sill 1.2 / Massiv-Fensterbank 1.2 (CHE)
! ------------------------------------------------------------------------------
10900:
	slSill = atn((gs_sill_thk - gs_sill_topHeight - gs_sill_endthk) / (gs_sill_width-gs_sill_topWidth))

	if lod3D_Sill = 3 then
		put	0, 						-sillElevation - gs_sill_elev, 									mask_str,
			0, 						-sillElevation - gs_sill_elev - gs_sill_thk, 					mask_str,
			gs_sill_topWidth, 			-sillElevation - gs_sill_elev - gs_sill_thk, 					mask_str,
			gs_sill_topWidth, 			-sillElevation - gs_sill_elev - gs_sill_thk + gs_sill_topHeight, 	mask_str,
			gs_sill_width, 			-sillElevation - gs_sill_elev - gs_sill_endthk, 				mask_str,
			gs_sill_width, 			-sillElevation - gs_sill_elev, 									mask_str,
			gs_sill_width - 0.01, 	-sillElevation - gs_sill_elev, 									mask_str,
			gs_sill_width - 0.01, 	-sillElevation - gs_sill_elev - 0.007, 							mask_str,
			gs_sill_width - 0.017, 	-sillElevation - gs_sill_elev - 0.007, 							mask_str,
			gs_sill_width - 0.017, 	-sillElevation - gs_sill_elev, 									mask_str,
			0, 						-sillElevation - gs_sill_elev, 									-1
	else
		put	0, 						-sillElevation - gs_sill_elev, 					mask_str,
			0, 						-sillElevation - gs_sill_elev - gs_sill_thk,	mask_str,
			gs_sill_width, 			-sillElevation - gs_sill_elev - gs_sill_endthk, mask_str,
			gs_sill_width, 			-sillElevation - gs_sill_elev,					mask_str,
			0, 						-sillElevation - gs_sill_elev, 					-1
	endif

	sillIns = 0
	if gs_sill_thk - 0.01 > 0.015 / cos(slSill) then
		sillIns = 1
		put	0.015, 					-sillElevation - gs_sill_elev - 0.015, 														mask_str,
			0.015, 					-sillElevation - gs_sill_elev - gs_sill_thk + gs_sill_topHeight + 0.015 / cos(slSill), 			mask_str,
			gs_sill_width - 0.06, 	-sillElevation - gs_sill_elev - gs_sill_endthk - 0.06 * tan(slSill) + 0.015 / cos(slSill), 	mask_str,
			gs_sill_width - 0.06, 	-sillElevation - gs_sill_elev - 0.015, 														mask_str,
			0.015, 					-sillElevation - gs_sill_elev - 0.015, 														-1
	endif

	sect_fill gs_sill_fill, gs_sill_pen_bg, gs_sill_pen_fg, gs_sill_pen_sectcont

	prism_ nsp/3, pxR - pxL,
		use(nsp)

	base
	vert 0,	0, 0
	vert 0,	0, 1
	vert 0,	1, 0
	vert 1,	0, 0
	coor 2, -1, -2, -3, -4
	body 1

	for i=1 to nsp - sillIns * 15
		delbuff = get(1)
	next i

	if sillIns then
		sect_fill gs_sill_fill_ins_fg, gs_sill_pen_ins_bg, gs_sill_pen_ins_fg, gs_sill_pen_ins_sectcont
		prism_ nsp/3, pxR - pxL,
			use(nsp)
	endif

	for i = 1 to nsp/3
		sillPoly[(i-1) * 2 + 1] = get (1)
		sillPoly[(i-1) * 2 + 2] = get (1)
		eeeeee = get (1)
	next i

	sillLeft			= abs(pxL)
	sillRight			= abs(pxR)
	sillBottom			= sillElevation
	sillBottomOutside	= sillElevation + gs_sill_elev
	if lod3D_Sill = 3 then
		gs_sill_angle	= atn((gs_sill_thk - gs_sill_endthk - gs_sill_topHeight) / (gs_sill_width - gs_sill_topWidth))
		sillSideHeight	= gs_sill_elev + gs_sill_thk - gs_sill_topHeight + gs_sill_topWidth * tan (gs_sill_angle)
	else
		gs_sill_angle	= atn((gs_sill_thk - gs_sill_endthk) / gs_sill_width)
		sillSideHeight	= gs_sill_elev + gs_sill_thk
	endif
	sillSideAngle		= gs_sill_angle

	sect_fill gs_sill_fill, gs_sill_pen_bg, gs_sill_pen_fg, gs_sill_pen_sectcont

	rotz 90
	roty -90
	addx -pxL

		if sidelightCutLeft then
			if sidelightCutLeft = 2 & gs_turn_plaster_show_3D then
				hotspot sidelightCutPosLeft + thkPlasterAtSillSlLeft, leftRevealPnts[ idxSillEndRevealLeft][2], sillElevation + gs_sill_thk, 10052
			else
				hotspot sidelightCutPosLeft, leftRevealPnts[ idxSillEndRevealLeft][2], sillElevation + gs_sill_thk, 10051
			endif
		else
			hotspot leftRevealPnts[idxSillEndRevealLeft][1], leftRevealPnts[ idxSillEndRevealLeft][2], sillElevation + gs_sill_thk, 10000
		endif
		if sidelightCutRight then
			if sidelightCutRight = 2 & gs_turn_plaster_show_3D then
				hotspot sidelightCutPosRight - thkPlasterAtSillSlRight, rightRevealPnts[idxSillEndRevealRight][2], sillElevation + gs_sill_thk, 10053
			else
				hotspot sidelightCutPosRight, rightRevealPnts[idxSillEndRevealRight][2], sillElevation + gs_sill_thk, 10050
			endif
		else
			hotspot rightRevealPnts[idxSillEndRevealRight][1], rightRevealPnts[idxSillEndRevealRight][2], sillElevation + gs_sill_thk, 10001
		endif

	del 3

return


! ------------------------------------------------------------------------------
! Solid Sill 2.2 / Massiv-Fensterbank 2.2 (CHE)
! ------------------------------------------------------------------------------
11000:
	if lod3D_Sill = 3 then
		put	0, 											-sillElevation - gs_sill_elev, 								mask_str,
			0, 											-sillElevation - gs_sill_elev - gs_sill_thk, 				mask_str,
			gs_sill_topWidth, 								-sillElevation - gs_sill_elev - gs_sill_thk, 				mask_str,
			gs_sill_topWidth, 								-sillElevation - gs_sill_elev - gs_sill_thk + gs_sill_topHeight,mask_str,
			gs_sill_width, 								-sillElevation - gs_sill_elev - gs_sill_endthk, 			mask_str,
			gs_sill_width,  							-sillElevation - gs_sill_elev + gs_sill_dripnos, 			mask_str,
			gs_sill_width - gs_sill_dripwidth/2 + 2/300,-sillElevation - gs_sill_elev + gs_sill_dripnos, 			mask_str,
			gs_sill_width - gs_sill_dripwidth/2 + 2/300,-sillElevation - gs_sill_elev + gs_sill_dripnos - 2/300, 	mask_str,
			gs_sill_width - gs_sill_dripwidth/2, 		-sillElevation - gs_sill_elev + gs_sill_dripnos - 2/300, 	mask_str,
			gs_sill_width - gs_sill_dripwidth/2, 		-sillElevation - gs_sill_elev + gs_sill_dripnos, 			mask_str,
			gs_sill_width - gs_sill_dripwidth, 			-sillElevation - gs_sill_elev + gs_sill_dripnos, 			mask_str,
			gs_sill_width - gs_sill_dripwidth, 			-sillElevation - gs_sill_elev, 								mask_str,
			0, 											-sillElevation - gs_sill_elev, 								mask_str
	else
		put	0, 											-sillElevation - gs_sill_elev, 								mask_str,
			0, 											-sillElevation - gs_sill_elev - gs_sill_thk, 				mask_str,
			gs_sill_width, 								-sillElevation - gs_sill_elev - gs_sill_endthk, 			mask_str,
			gs_sill_width,  							-sillElevation - gs_sill_elev + gs_sill_dripnos, 			mask_str,
			gs_sill_width - gs_sill_dripwidth, 			-sillElevation - gs_sill_elev + gs_sill_dripnos, 			mask_str,
			gs_sill_width - gs_sill_dripwidth, 			-sillElevation - gs_sill_elev, 								mask_str
	endif

	prism_ nsp/3, pxR - pxL,
		use(nsp)

	base
	vert 0,	0, 0
	vert 0,	0, 1
	vert 0,	1, 0
	vert 1,	0, 0
	coor 2, -1, -2, -3, -4
	body 1

	for i = 1 to nsp/3
		sillPoly[(i-1) * 2 + 1] = get (1)
		sillPoly[(i-1) * 2 + 2] = get (1)
		eeeeee = get (1)
	next i

	sillLeft			= abs(pxL)
	sillRight			= abs(pxR)
	sillBottom			= sillElevation
	sillBottomOutside	= sillElevation + gs_sill_elev - gs_sill_dripnos
	if lod3D_Sill = 3 then
		gs_sill_angle	= atn((gs_sill_thk - gs_sill_endthk - gs_sill_topHeight) / (gs_sill_width - gs_sill_topWidth))
		sillSideHeight	= gs_sill_elev + gs_sill_thk - gs_sill_topHeight + gs_sill_topWidth * tan(gs_sill_angle)
	else
		gs_sill_angle	= atn((gs_sill_thk - gs_sill_endthk) / gs_sill_width)
		sillSideHeight	= gs_sill_elev + gs_sill_thk
	endif
	sillSideAngle		= gs_sill_angle

	rotz 90
	roty -90
	addx -pxL

		if sidelightCutLeft then
			if sidelightCutLeft = 2 & gs_turn_plaster_show_3D then
				hotspot sidelightCutPosLeft + thkPlasterAtSillSlLeft, 0, sillElevation + gs_sill_elev + gs_sill_thk, 10052
			else
				hotspot sidelightCutPosLeft, 0, sillElevation + gs_sill_elev + gs_sill_thk, 10051
			endif
		else
			hotspot leftRevealPnts[idxSillEndRevealLeft][1], 0, sillElevation + gs_sill_elev + gs_sill_thk, 10000
		endif
		if sidelightCutRight then
			if sidelightCutRight = 2 & gs_turn_plaster_show_3D then
				hotspot sidelightCutPosRight - thkPlasterAtSillSlRight, 0, sillElevation + gs_sill_elev + gs_sill_thk, 10053
			else
				hotspot sidelightCutPosRight, 0, sillElevation + gs_sill_elev + gs_sill_thk, 10050
			endif
		else
			hotspot rightRevealPnts[idxSillEndRevealRight][1], 0, sillElevation + gs_sill_elev + gs_sill_thk, 10001
		endif

	del 3

return


! ------------------------------------------------------------------------------
! Metal Sheet / Metallfensterbank 1.1 (CHE) - Metal sheet 2 (CHE)
! ------------------------------------------------------------------------------
11100:
	if lod3D_Sill = 3 then
		inclinedEdgeSize = min(0.02, gs_sill_nosing/2, gs_sill_dripnos/2)
		put	0.001, 			-sillElevation - gs_sill_thk, 					0,
			0.001, 			-sillElevation - xh, 							0,
			gs_sill_width, 	-sillElevation - xh + xh2, 						0,
			gs_sill_width, 	-sillElevation - xh + xh2 + gs_sill_dripnos, 	0,
			gs_sill_width - inclinedEdgeSize, -sillElevation - xh + xh2 + gs_sill_dripnos - inclinedEdgeSize, 	0
	else
		put	0,	 			-sillElevation - xh, 							0,
			gs_sill_width, 	-sillElevation - xh + xh2, 						0,
			gs_sill_width, 	-sillElevation - xh + xh2 + gs_sill_dripnos, 	0
	endif

	extrude nsp/3, 0, 0, pxR - pxL, 16+32,
			get(nsp)

	base
	vert 0,	0, 0
	vert 0,	0, 1
	vert 0,	1, 0
	vert 1,	0, 0
	coor 2, -1, -2, -3, -4
	body 1

	if lod3D_Sill = 3 then
		put	0, 				-sillElevation - xh + xh2 + gs_sill_dripnos, 	0,
			0, 				-sillElevation - gs_sill_thk, 					0,
			0.001, 			-sillElevation - gs_sill_thk, 					0,
			0.001, 			-sillElevation - xh, 							0,
			gs_sill_width, 	-sillElevation - xh + xh2, 						0,
			gs_sill_width, 	-sillElevation - xh + xh2 + gs_sill_dripnos, 	0
	else
		put	0, 				-sillElevation - xh + xh2 + gs_sill_dripnos, 	0,
			0,	 			-sillElevation - xh, 							0,
			gs_sill_width, 	-sillElevation - xh + xh2, 						0,
			gs_sill_width, 	-sillElevation - xh + xh2 + gs_sill_dripnos, 	0
	endif

	for i = 1 to nsp/3
		sillPoly[(i-1) * 2 + 1] = get (1)
		sillPoly[(i-1) * 2 + 2] = get (1)
		eeeeee = get (1)
	next i

	gs_sill_angle = atn((xh2) / (gs_sill_width - 0.001))

	if iSillType = SILL_METAL_2 then
		if abs (WIDO_SILL) > EPS then
			sect_fill gs_sill_fill_ins_fg, gs_sill_pen_ins_bg, gs_sill_pen_ins_fg, gs_sill_pen_ins_sectcont
			pen WALL_VIEW_PEN

			if WIDO_REVEAL_SIDE then
				material WALL_MAT_A
			else
				material WALL_MAT_B
			endif

			prism_ 4, pxR - pxL,
				0,			-sillElevation,																								15,
				WIDO_SILL,	-sillElevation,																								15,
				WIDO_SILL,	-sillElevation - gs_sill_thk + gs_sill_topHeight + 0.001 / cos(gs_sill_angle) + WIDO_SILL * tan(gs_sill_angle),	15,
				0,			-sillElevation - gs_sill_thk + gs_sill_topHeight + 0.001 / cos(gs_sill_angle),									15

			base
			vert 0, 0, 0
			vert 1, 0, 0
			vert 0, 0, -sgn((SYMB_MIRRORED exor (SYMB_ROTANGLE > EPS)) - 0.5)
			vert 0, -1, 0
			coor 2, -1, -2, -3, -4
			body -1
		endif
	endif

	sillLeft			= abs(pxL)
	sillRight			= abs(pxR)
	sillBottom			= sillElevation
	sillBottomOutside	= sillElevation		!!!+ gs_sill_endthk
	sillSideHeight		= gs_sill_thk - gs_sill_topHeight + 0.001 * tan(gs_sill_angle)
	sillSideAngle		= gs_sill_angle

	rotz 90
	roty -90
	addx -pxL

		if sidelightCutLeft then
			if sidelightCutLeft = 2 & gs_turn_plaster_show_3D then
				hotspot sidelightCutPosLeft + thkPlasterAtSillSlLeft, leftRevealPnts[ idxSillEndRevealLeft][2], sillElevation + gs_sill_thk, 10052
			else
				hotspot sidelightCutPosLeft, leftRevealPnts[ idxSillEndRevealLeft][2], sillElevation + gs_sill_thk, 10051
			endif
		else
			hotspot leftRevealPnts[idxSillEndRevealLeft][1], leftRevealPnts[ idxSillEndRevealLeft][2], sillElevation + gs_sill_thk, 10000
		endif
		if sidelightCutRight then
			if sidelightCutRight = 2 & gs_turn_plaster_show_3D then
				hotspot sidelightCutPosRight - thkPlasterAtSillSlRight, rightRevealPnts[idxSillEndRevealRight][2], sillElevation + gs_sill_thk, 10053
			else
				hotspot sidelightCutPosRight, rightRevealPnts[idxSillEndRevealRight][2], sillElevation + gs_sill_thk, 10050
			endif
		else
			hotspot rightRevealPnts[idxSillEndRevealRight][1], rightRevealPnts[idxSillEndRevealRight][2], sillElevation + gs_sill_thk, 10001
		endif

	del 3

return


! ------------------------------------------------------------------------------
! Sill Elevation for Solid Sills
! ------------------------------------------------------------------------------
11111:
	if abs(gs_sill_elev) > EPS then
		if not(curvedWall) then
!!!!!!!!	hins = -gs_sill_elev
!!!!!!!!	plane_ 10,
!!!!!!!!			 pxL + gs_sill_ovhg_left + 0.0001,		-0.0001,	-K_-eps, 0,
!!!!!!!!			 pxL + gs_sill_ovhg_left + 0.0001, 		hins, 		-K_-eps, 1,
!!!!!!!!			 pxL + gs_sill_ovhg_left, 				hins, 		-K_-eps, 0,
!!!!!!!!			 pxL + gs_sill_ovhg_left - 0.0001, 		hins, 		-K_-eps, 0,
!!!!!!!!			 pxL + gs_sill_ovhg_left - 0.0001,  	0.0001, 	-K_-eps, 0,
!!!!!!!!			 pxR - gs_sill_ovhg_right + 0.0001, 	0.0001, 	-K_-eps, 0,
!!!!!!!!			 pxR - gs_sill_ovhg_right + 0.0001, 	hins, 		-K_-eps, 0,
!!!!!!!!			 pxR - gs_sill_ovhg_right, 				hins, 		-K_-eps, 1,
!!!!!!!!			 pxR - gs_sill_ovhg_right - 0.0001, 	hins, 		-K_-eps, 0,
!!!!!!!!			 pxR - gs_sill_ovhg_right - 0.0001, 	-0.0001, 	-K_-eps, 0
		endif

		prism_ 4, pxR - pxL,
			 WIDO_SILL, 		 0, 					15,
			 WIDO_SILL, 		-gs_sill_elev + 0.0001, 15,
			 0.0001, 			-gs_sill_elev + 0.0001, 15,
			 0.0001, 			 0, 					15
	endif
return


! ------------------------------------------------------------------------------
! Solid Parallel (CHE) - Solid Parallel 2 (CHE)
! ------------------------------------------------------------------------------
11200:
	if iSillType = SILL_PARALLEL then
		sillAngle		= gs_sill_angle
		sillThickness	= gs_sill_thk
		addMountingX	= 0
		addMountingY	= 0
		addElevation	= -sillElevation
		sillHeightDiff	= gs_sill_element_thk / cos(sillAngle)
	else
		sillAngle		= gs_reveal_outerBottom_angle
		sillThickness	= gs_reveal_bottom
		addMountingX	= gs_mountingFrame_depth * gs_mountingFrame
		addMountingY	= addMountingX * tan(sillAngle)
		addElevation	= 0
		sillHeightDiff	= 0
	endif

	put addMountingX, addElevation + sillHeightDiff - sillThickness,										mask_str,
		addMountingX, addElevation + sillHeightDiff - sillThickness - gs_sill_element_thk / cos(sillAngle),	mask_str

	outTopPos_X = WIDO_SILL + gs_sill_nosing

	if gs_sill_edge = stSillEdge[1] then	! Perpendicular
		gs_sill_width = (WIDO_SILL - addMountingX + gs_sill_nosing) / cos(sillAngle)
		outTopPos_Y = addElevation + sillHeightDiff - sillThickness + gs_sill_width * sin (sillAngle) - gs_sill_element_thk / cos(sillAngle)
	else
		gs_sill_width = (WIDO_SILL - addMountingX + gs_sill_nosing + gs_sill_element_thk * tan(sillAngle)) / cos(sillAngle)
		outTopPos_Y = addElevation + sillHeightDiff - sillThickness + (gs_sill_width  - gs_sill_element_thk * tan(sillAngle)) * sin(sillAngle) - gs_sill_element_thk / cos(sillAngle)
	endif

	if gs_sill_edge = stSillEdge[1] then	! Perpendicular
		outBottomPos_X = WIDO_SILL + gs_sill_nosing - gs_sill_element_thk * sin (sillAngle)
	else
		outBottomPos_X = WIDO_SILL + gs_sill_nosing
	endif

	outBottomPos_Y = addElevation + sillHeightDiff - sillThickness + gs_sill_width * sin (sillAngle) + gs_sill_element_thk * cos(sillAngle) - gs_sill_element_thk / cos(sillAngle)

	if gs_sill_edge = stSillEdge[1] then	! Perpendicular
		freeLengthForDrip = gs_sill_nosing - gs_sill_element_thk * sin (sillAngle)
	else
		freeLengthForDrip = gs_sill_nosing
	endif

	put outTopPos_X,	outTopPos_Y,	mask_str,
		outBottomPos_X, outBottomPos_Y, mask_str

	if lod3D_Sill = 3 and freeLengthForDrip > EPS then
		dripWidth = min (freeLengthForDrip / 3, gs_sill_element_thk / 2)
		drip_X = dripWidth
		drip_Y = dripWidth * tan (sillAngle)

		put outBottomPos_X - dripWidth,							outBottomPos_Y - dripWidth * tan(sillAngle),			mask_str,
			outBottomPos_X + dripWidth * (tan (sillAngle) - 1),	outBottomPos_Y - dripWidth * (tan(sillAngle) + 1),		mask_str,
			outBottomPos_X + dripWidth * (tan (sillAngle) - 2),	outBottomPos_Y - dripWidth * (tan(sillAngle) * 2 + 1),	mask_str,
			outBottomPos_X - dripWidth * 2,						outBottomPos_Y - dripWidth * 2 * tan(sillAngle),		mask_str
	endif

	prism_ nsp/3, pxR - pxL,
		use(nsp)

	base
	vert 0,	0, 0
	vert 0,	0, 1
	vert 0,	1, 0
	vert 1,	0, 0
	coor 2, -1, -2, -3, -4
	body 1

	for i = 1 to nsp/3
		sillPoly[(i-1) * 2 + 1] = get (1)
		sillPoly[(i-1) * 2 + 2] = get (1)
		eeeeee = get (1)
	next i

	reorder = (AC_Wall_Direction_Type <> 1 & AC_Wall_Direction_Type <> 3)

	if wallIsLeft then
		if reorder then
			idx = nSkinTurnOut + 1
		else
			idx = nSkinTurnIn + 1
		endif
	else
		if reorder then
			idx = WALL_SKINS_NUMBER - nSkinTurnIn
		else
			idx = WALL_SKINS_NUMBER - nSkinTurnOut
		endif
	endif

	if bCompositeWall then
		bShowSkin = not( (GLOB_STRUCTURE_DISPLAY = STRUCTURE_CORE_ONLY & WALL_SKINS_PARAMS[idx][SKIN_CORE_STATUS] < EPS) | \
						 (GLOB_STRUCTURE_DISPLAY = STRUCTURE_WITHOUT_FINISHES & abs(WALL_SKINS_PARAMS[idx][SKIN_FINISH_STATUS] - 1) < EPS) )
	else
		bShowSkin = 1
	endif

	if abs(WIDO_SILL) > EPS & (iSillType = SILL_PARALLEL | (iSillType = SILL_PARALLEL_2 & gs_sill_ins_below & bShowSkin & sillThickness > EPS)) then
		if gs_sill_ins_use_wall_skin & bCompositeWall then
			if wallIsLeft then
				baseSkinContLinePen		= round_int(WALL_SKINS_PARAMS[idx][SKIN_UPPER_LINE_PEN])
				baseSkinContLineType	= round_int(WALL_SKINS_PARAMS[idx][SKIN_UPPER_LINE_TYPE])
			else
				baseSkinContLinePen		= round_int(WALL_SKINS_PARAMS[idx][SKIN_LOWER_LINE_PEN])
				baseSkinContLineType	= round_int(WALL_SKINS_PARAMS[idx][SKIN_LOWER_LINE_TYPE])
			endif
			baseSkinFillType		= round_int(WALL_SKINS_PARAMS[idx][SKIN_FILL])
			baseSkinFillFgPen		= round_int(WALL_SKINS_PARAMS[idx][SKIN_FILL_PEN])
			baseSkinFillBgPen		= round_int(WALL_SKINS_PARAMS[idx][SKIN_FILL_BACK_PEN])
			baseSkinFillOrientation	= round_int(WALL_SKINS_PARAMS[idx][SKIN_FILL_ORIENTATION])

			sect_attrs baseSkinFillType, baseSkinFillBgPen, baseSkinFillFgPen, baseSkinContLinePen, baseSkinContLineType
		else
			sect_fill gs_sill_fill_ins_fg, gs_sill_pen_ins_bg, gs_sill_pen_ins_fg, gs_sill_pen_ins_sectcont
		endif
		pen WALL_VIEW_PEN

		if WIDO_REVEAL_SIDE then
			material WALL_MAT_A
		else
			material WALL_MAT_B
		endif

		if iSillType = SILL_PARALLEL then
			put WIDO_SILL,	addElevation,	15
		else
			put WIDO_SILL,	addElevation + WIDO_SILL * tan(sillAngle),	15
		endif
		put	WIDO_SILL,	addElevation + sillHeightDiff - sillThickness + WIDO_SILL * tan(sillAngle),	15,
			0,			addElevation + sillHeightDiff - sillThickness,								15,
			0,			addElevation,												15

		prism_ 4, pxR - pxL, get(nsp)

		base
		vert 0, 0, 0
		vert 1, 0, 0
		vert 0, 0, -sgn((SYMB_MIRRORED exor (SYMB_ROTANGLE > EPS)) - 0.5)
		vert 0, -1, 0
		coor 2, -1, -2, -3, -4
		body -1
	endif

	sillLeft			= abs(pxL)
	sillRight			= abs(pxR)
	sillBottom			= sillElevation
	if iSillType = SILL_PARALLEL then
		sillBottomOutside	= sillElevation + sillThickness - gs_sill_element_thk / cos(sillAngle) -  WIDO_SILL * tan(sillAngle)
		sillSideHeight		= sillThickness
	else
		sillBottomOutside	= sillElevation	- (WIDO_SILL - addMountingX) * tan(sillAngle)
		sillSideHeight		= addMountingY + gs_sill_element_thk / cos(sillAngle)
	endif
	sillSideAngle		= sillAngle

	rotz 90
	roty -90
	addx -pxL
	if iSillType = SILL_PARALLEL then
		hptsHeight = sillElevation + sillThickness
	else
		hptsHeight = sillThickness + sillHeightDiff
	endif

		if sidelightCutLeft then
			if sidelightCutLeft = 2 & gs_turn_plaster_show_3D then
				hotspot sidelightCutPosLeft + thkPlasterAtSillSlLeft, leftRevealPnts[ idxSillEndRevealLeft][2], hptsHeight, 10052
			else
				hotspot sidelightCutPosLeft, leftRevealPnts[ idxSillEndRevealLeft][2], hptsHeight, 10051
			endif
		else
			hotspot leftRevealPnts[idxSillEndRevealLeft][1], leftRevealPnts[ idxSillEndRevealLeft][2], hptsHeight, 10000
		endif
		if sidelightCutRight then
			if sidelightCutRight = 2 & gs_turn_plaster_show_3D then
				hotspot sidelightCutPosRight - thkPlasterAtSillSlRight, rightRevealPnts[idxSillEndRevealRight][2], hptsHeight, 10053
			else
				hotspot sidelightCutPosRight, rightRevealPnts[idxSillEndRevealRight][2], hptsHeight, 10050
			endif
		else
			hotspot rightRevealPnts[idxSillEndRevealRight][1], rightRevealPnts[idxSillEndRevealRight][2], hptsHeight, 10001
		endif

	del 3

return


! ------------------------------------------------------------------------------
! Block Sill
! ------------------------------------------------------------------------------
11300:

	put 	-WIDO_FRAME_THICKNESS,	0, 				mask_str,
			-WIDO_FRAME_THICKNESS,	gs_sill_thk, 	mask_str,
			 gs_sill_nosing,		gs_sill_thk, 	mask_str,
			 gs_sill_nosing,		0, 				mask_str

	prism_ nsp/3, pxR - pxL,
		use(nsp)

	for i = 1 to nsp/3
		sillPoly[(i-1) * 2 + 1] = get (1)
		sillPoly[(i-1) * 2 + 2] = get (1)
		eeeeee = get (1)
	next i

	sillLeft			= abs(pxL)
	sillRight			= abs(pxR)
	sillBottom			= -gs_sill_thk
	sillBottomOutside	= -gs_sill_thk
	sillSideHeight		=  gs_sill_thk
	sillSideAngle		=  0

	rotz 90
	roty -90
	addx -pxL

		if sidelightCutLeft then
			if sidelightCutLeft = 2 & gs_turn_plaster_show_3D then
				hotspot sidelightCutPosLeft + thkPlasterAtSillSlLeft, SillSlipin + gs_sill_holeDepthBehind, -gs_sill_thk, 10052
			else
				hotspot sidelightCutPosLeft, SillSlipin + gs_sill_holeDepthBehind, -gs_sill_thk, 10051
			endif
		else
			hotspot leftRevealPnts[idxSillEndRevealLeft][1], SillSlipin + gs_sill_holeDepthBehind, -gs_sill_thk, 10000
		endif
		if sidelightCutRight then
			if sidelightCutRight = 2 & gs_turn_plaster_show_3D then
				hotspot sidelightCutPosRight - thkPlasterAtSillSlRight, SillSlipin + gs_sill_holeDepthBehind, -gs_sill_thk, 10053
			else
				hotspot sidelightCutPosRight, SillSlipin + gs_sill_holeDepthBehind, -gs_sill_thk, 10050
			endif
		else
			hotspot rightRevealPnts[idxSillEndRevealRight][1], SillSlipin + gs_sill_holeDepthBehind, -gs_sill_thk, 10001
		endif

	del 3
return


! ------------------------------------------------------------------------------
! Dutch Profiled Sill
! ------------------------------------------------------------------------------
11400:
	_leftCutBackWFrame  = max((leftFrameOffset + (leftRevealPnts[idxFrameStartRevealLeft][1] - pxL)), 0) 
	_rightCutBackWFrame = max((rightFrameOffset - (rightRevealPnts[idxFrameStartRevealRight][1] - pxR)), 0)
	if bTShapedOpening & _bSillBelowSLight then
		_leftCutBackWFrame  = 0
		_rightCutBackWFrame = 0
	endif

	_bSillNosing = (gs_sill_nosing > 0)

	sillW = WIDO_FRAME_THICKNESS + gs_sill_nosing

	sillL = pxR - pxL - ((_leftCutBackWFrame + _rightCutBackWFrame) * not(_bSillNosing))

	if bTShapedOpening & _bSillBelowSLight then
		if _bSillNosing then			! the sill part under frame or sidelight is thicker
			_sillInclinedLength = abs(sillW - gs_sill_topWidth)
			_sillInclinedHeight = gs_sill_topHeight - (gs_sill_thk - gs_sill_endthk)
			_sillThkAtFrame = gs_sill_thk - gs_sill_endthk + ((_sillInclinedHeight/_sillInclinedLength) * (sillW - WIDO_FRAME_THICKNESS))

			put		0,						0,								15,
					WIDO_FRAME_THICKNESS,	0,								15,
					WIDO_FRAME_THICKNESS,	_sillThkAtFrame,				15,
					sillW,					gs_sill_thk - gs_sill_endthk,	15,
					sillW,					gs_sill_thk,					15,
					0,						gs_sill_thk,					15,
					0,						0,								-1
		else
			put		0,						0,				15,
					WIDO_FRAME_THICKNESS,	0,				15,
					WIDO_FRAME_THICKNESS,	gs_sill_thk,	15,
					0,						gs_sill_thk,	15,
					0,						0,				-1
		endif
	else
		put		0,						0,								mask_str,
				0,						gs_sill_thk,					mask_str,
				sillW,					gs_sill_thk,				 	mask_str,
				sillW,					gs_sill_thk - gs_sill_endthk,	mask_str,
				gs_sill_topWidth,		gs_sill_topHeight,				mask_str,
				gs_sill_topWidth,		0,								mask_str
	endif

	addx -WIDO_FRAME_THICKNESS

	if (_leftCutBackWFrame > 0) & (gs_sill_topWidth < WIDO_FRAME_THICKNESS) then
		prism_ 5, _leftCutBackWFrame,
			0,						0,				15,
			WIDO_FRAME_THICKNESS,	0,				15,
			WIDO_FRAME_THICKNESS,	gs_sill_thk,	15,
			0,						gs_sill_thk,	15,
			0,						0,				-1

		if (_bSillNosing) then
			cutform 5, 1, 2,
					0, 0, 1, _leftCutBackWFrame,
					0,						0,				31,
					WIDO_FRAME_THICKNESS,	0,				31,
					WIDO_FRAME_THICKNESS,	gs_sill_thk,	31,
					0,						gs_sill_thk,	31,
					0,						0,				-1

			_numCuts = 1
		endif
	endif

	if (_rightCutBackWFrame > 0) & (gs_sill_topWidth < WIDO_FRAME_THICKNESS)  then
		addz sillL - (_rightCutBackWFrame * _bSillNosing) + (_leftCutBackWFrame * not(_bSillNosing))

		prism_ 5, _rightCutBackWFrame,
			0,						0,				15,
			WIDO_FRAME_THICKNESS,	0,				15,
			WIDO_FRAME_THICKNESS,	gs_sill_thk,	15,
			0,						gs_sill_thk,	15,
			0,						0,				-1

		if (_bSillNosing) then
			cutform 5, 1, 2,
					0, 0, 1, _rightCutBackWFrame,
					0,						0,				31,
					WIDO_FRAME_THICKNESS,	0,				31,
					WIDO_FRAME_THICKNESS,	gs_sill_thk,	31,
					0,						gs_sill_thk,	31,
					0,						0,				-1

			_numCuts = 1
		endif

		del 1
	endif

	addz (_leftCutBackWFrame * not(_bSillNosing))

	prism_ nsp/3, sillL,
		get(nsp)

	del 2

	for i = 1 to _numCuts
		cutend
	next i
	_numCuts = 0

	sillLeft			= abs(pxL)
	sillRight			= abs(pxR)
	sillBottom			= -gs_sill_thk
	sillBottomOutside	= -gs_sill_thk
	sillSideHeight		=  gs_sill_endthk
	sillSideAngle		=  0

	rotz 90
	roty -90
	addx -pxL

		if sidelightCutLeft then
			if sidelightCutLeft = 2 & gs_turn_plaster_show_3D then
				hotspot sidelightCutPosLeft + thkPlasterAtSillSlLeft, SillSlipin + gs_sill_holeDepthBehind, -gs_sill_thk, 10052
			else
				hotspot sidelightCutPosLeft, SillSlipin + gs_sill_holeDepthBehind, -gs_sill_thk, 10051
			endif
		else
			hotspot leftRevealPnts[idxSillEndRevealLeft][1], SillSlipin + gs_sill_holeDepthBehind, -gs_sill_thk, 10000
		endif
		if sidelightCutRight then
			if sidelightCutRight = 2 & gs_turn_plaster_show_3D then
				hotspot sidelightCutPosRight - thkPlasterAtSillSlRight, SillSlipin + gs_sill_holeDepthBehind, -gs_sill_thk, 10053
			else
				hotspot sidelightCutPosRight, SillSlipin + gs_sill_holeDepthBehind, -gs_sill_thk, 10050
			endif
		else
			hotspot rightRevealPnts[idxSillEndRevealRight][1], SillSlipin + gs_sill_holeDepthBehind, -gs_sill_thk, 10001
		endif

	del 3
return

]]></Script_3D>

<!-- GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT -->

<Script_2D SectVersion="20" SectionFlags="0" SubIdent="0"><![CDATA[

! Contact person: <NJ>

! ==============================================================================
! This macro draws the Sill
! ------------------------------------------------------------------------------
! Input parameters:
! Geometry ---------------------------------------------------------------------
!	A:						wallhole width (length) (Obsolete)
!	refWidth:				reference width in curved walls (length)
!	leftWidth:				wallhole's side distance from the origin at the left side (length)
!	rightWidth:				wallhole's side distance from the origin at the right side (length)
! Functions --------------------------------------------------------------------
!	gs_IsCurved:			Does the window follow the curvature of the wall? (0 / 1)
!	bParalellInCurvedWalls:	is the wallhole parallel in curved walls (0 / 1)
! Reveal -----------------------------------------------------------------------
!	iRevealType:
!	gs_reveal_left_angle:
!	gs_reveal_right_angle:
! Corner Function --------------------------------------------------------------
!	bLeftCornerFunction:		Turn macro in Corner Window mode at the left side (0 / 1)
!	leftCornerAngle:		Angle between connected walls in case of Corner Window (angle)
!	leftConnWallThk:		Thickness of the connected wall in case of Corner Window (length)
!	bRightCornerFunction:	Turn macro in Corner Window mode at the right side (0 / 1)
!	rightCornerAngle:		Angle between connected walls in case of Corner Window (angle)
!	rightConnWallThk:		Thickness of the connected wall in case of Corner Window (length)
! Oversize ---------------------------------------------------------------------
!	gs_left_oversize:		Left opening oversize (length)
!	gs_right_oversize:		Right opening oversize (length)
! Sill -------------------------------------------------------------------------
!	iSillType:				Identifies the type of the Sill.
!								(integer; 1 = Standard Sill, 2 = Brick Sill, 3 = Stone Sill, etc.)
!	gs_sill_nosing:			Nosing of the Sill. (length)
!	gs_sill_ovhg_left:		Sill overhang on the left side. (length)
!	gs_sill_ovhg_right:		Sill overhang on the right side. (length)
!	gs_sill_curved:			Sill edge is curved or straight. (0 / 1)
!	bShowSillSplice:		Show or hide the Sill's joint line in case of Corner Window  (0 / 1)
!	bWindowSymbolAtMiddle:	Is the window symbol appears always on the middle of the wall (CHI special) (0 / 1)
! 2D Representation ------------------------------------------------------------
!	lod2D_sillBoard:		Level of detail. (integer, 0..1)
!	gs_pen_2D:				Cotour pen of the Trim, Sill and Board. (pen)
!	gs_bFills:				Use fills (boolean)
!	gs_sill_wallhole_fill:			Type of the fill on the Sill. (fill type)
!	gs_sill_wallhole_pen_fg:		Fill pen on the Sill. (pen)
!	gs_sill_wallhole_pen_bg:		Fill background pen on the Sill. (pen)
!	gs_sill_wallhole_fill_sl:		Type of the fill on the Sill, at the sidelights. (fill type)
!	gs_sill_wallhole_pen_sl_fg:		Fill pen on the Sill, at the sidelights. (pen)
!	gs_sill_wallhole_pen_sl_bg:		Fill background pen on the Sill, at the sidelights. (pen)
! Ganging ----------------------------------------------------------------------
!	gs_stack_left:			Align to door/window on left side (0 / 1)
!	gs_stack_right:			Align to door/window on right side (0 / 1)
!	gs_stack_bottom:		Align to door/window on bottom side (0 / 1)
!
! Related Global Variables:
!	GLOB_SCRIPT_TYPE
!	GLOB_CONTEXT
!	WALL_THICKNESS
!	WALL_INCL
!	WALL_SKINS_NUMBER
!	WALL_SKINS_PARAMS
!	WALL_SKINS_NUMBER
!	WALL_SECT_PEN
!	WIDO_FRAME_THICKNESS
!	WIDO_SILL
!	WIDO_LEFT_JAMB
!	WIDO_RIGHT_JAMB
!	WIDO_ORIG_DIST
!	WIDO_REVEAL_SIDE
!	SYMB_MIRRORED
!	SYMB_ROTANGLE
!
! Hotspot IDs:
!	10000:		Sill left
!	10050:		Left Sidelight Sill at door
!	10001:		Sill right
!	10051:		Right Sidelight Sill at door
!	10052:		Sill at Door left side
!	10053:		Sill at Door right side
! ==============================================================================

LINE_ATTRIBUTES_GDLLINE		= 0			! Draw GDL Line in the section
LINE_ATTRIBUTES_WALLLINE	= 1			! Draw WallLine in the section
LINE_ATTRIBUTES_WALLSIDE	= 2			! The section is on the wall side (it is an arc in curved wall)
LINE_ATTRIBUTES_DRAWCC		= 3			! The section is drawn by CavityClosure macro (otherwise the WallHoleCut macro)
LINE_ATTRIBUTES_CONTOUR		= 4			! The section is contour or inner line
!!!	LINE_ATTRIBUTES_WALLEDGE	= 0			! The section is on the wall edge (always a line)

! Line Property defines:
LINE_PROPERTY_GENERIC	= 0
LINE_PROPERTY_INNER		= 1
LINE_PROPERTY_CONTOUR	= 2


! Draw Sill --------------------------------------------------------------------

if lod2D_sillBoard > 0 & bDrawSill & not(gs_stack_bottom) then

	if gs_sill_pen_2D < 1 then gs_sill_pen_2D = gs_pen_2D	! Compatibility

! Save the current parameter buffer --------------------------------------------

	dim savedQueueValues[]
	call "SaveQueue_WMCC" parameters returned_parameters savedQueueValues

	if WIDO_REVEAL_SIDE then
		add2 0,-WIDO_FRAME_THICKNESS
	else
		mul2 1,-1
	endif

	if gs_stack_left then
		gs_sill_ovhg_left = gs_left_oversize
		overSizeLeft = gs_left_oversize
		widoLeftJamb = 0
	endif

	if gs_stack_right then
		gs_sill_ovhg_right = gs_right_oversize
		overSizeRight = gs_right_oversize
		widoRightJamb = 0
	endif

! Draw Sill --------------------------------------------------------------------

	if bTShapedOpening then
		gs_wallhole_fill	= gs_sill_wallhole_fill_sl
		gs_wallhole_pen_fg	= gs_sill_wallhole_pen_sl_fg
		gs_wallhole_pen_bg	= gs_sill_wallhole_pen_sl_bg

		if gs_sill_outside_sl_left & gs_sidelight_left & gs_sidelight_parapet_hgt_left > EPS then
			sidelightCutLeft  = 0
			sidelightCutRight = 1
			sidelightCutPosRight = -leftWidth + gs_sidelight_WHole_width_left + bDrawOutsideTrim * gs_trim_width_out + gs_reveal_left_sL + thkPlasterAtSillLeft
			gosub "DrawSill"
		endif

		if gs_sill_outside_sl_right & gs_sidelight_right & gs_sidelight_parapet_hgt_right > EPS then
			sidelightCutLeft  = 1
			sidelightCutRight = 0
			sidelightCutPosLeft = rightWidth - gs_sidelight_WHole_width_right - bDrawOutsideTrim * gs_trim_width_out - gs_reveal_right_sR - thkPlasterAtSillRight
			gosub "DrawSill"
		endif

		if gs_sill_outside then
			gs_wallhole_fill	= gs_sill_wallhole_fill
			gs_wallhole_pen_fg	= gs_sill_wallhole_pen_fg
			gs_wallhole_pen_bg	= gs_sill_wallhole_pen_bg

			temp_sidelightCutPosLeft = sidelightCutPosLeft
			temp_sidelightCutPosRight = sidelightCutPosRight

			sidelightCutLeft  = 2 * (gs_sidelight_left & gs_sidelight_parapet_hgt_left > EPS)
			sidelightCutRight = 2 * (gs_sidelight_right & gs_sidelight_parapet_hgt_right > EPS)
			if gs_sill_outside_sl_right & gs_sidelight_right & gs_sidelight_parapet_hgt_right > EPS then
				sidelightCutPosRight = temp_sidelightCutPosLeft
			else
				sidelightCutPosRight = rightWidth - gs_sidelight_WHole_width_right - gs_reveal_right_sR - thkPlasterAtSillRight
			endif
			if gs_sill_outside_sl_left & gs_sidelight_left & gs_sidelight_parapet_hgt_left > EPS then
				sidelightCutPosLeft = temp_sidelightCutPosRight
			else
				sidelightCutPosLeft = -leftWidth  + gs_sidelight_WHole_width_left  + gs_reveal_left_sL  + thkPlasterAtSillLeft
			endif
			gosub "DrawSill"
		endif
	else
		gs_wallhole_fill	= gs_sill_wallhole_fill
		gs_wallhole_pen_fg	= gs_sill_wallhole_pen_fg
		gs_wallhole_pen_bg	= gs_sill_wallhole_pen_bg

		sidelightCutLeft  = 0
		sidelightCutRight = 0
		gosub "DrawSill"
	endif

! Restore the saved parameter buffer --------------------------------------------

	call "LoadQueue_WMCC" parameters savedQueueValues = savedQueueValues
endif


! ==============================================================================
end ! end ! end ! end ! end ! end ! end ! end ! end ! end ! end ! end ! end ! end
! ==============================================================================


! ==============================================================================
!	Draw Sill
! ==============================================================================

"DrawSill":
	set fill gs_wallhole_fill
	line_property 0
	if isWindow then
		line_type 1
	else
		line_type gs_sillTreshold_lineType
	endif
	pen gs_sill_pen_2D

	if AC_WallType <> 2 then
		bIsCurvedSegment		= curvedWall & not(iSillType = SILL_DUTCH)
		bCurvedAtSillSide		= (bIsCurvedSegment & iSillType = SILL_TIMBER & gs_sill_curved)
		bCurvedAtWindowFrame	= (bIsCurvedSegment & gs_IsCurved)

		if bCurvedAtSillSide & not(bCurvedAtWindowFrame) & not(wallIsLeft) then
			if abs(WOD) < radSill - sillNosing + EPS then
				bCurvedAtSillSide = 0
			endif
		endif

		if bIsCurvedSegment then put 0,WOD,900

		if sidelightCutLeft then
			if bCurvedAtSillSide then
				py = WOD - iArchSign * sqr((radSill + iArchSign * gs_sill_nosing)^2 - sidelightCutPosLeft^2)
			else
				py = spy4 - (spy4 - spy5) / (spx5 - spx4) * (sidelightCutPosLeft - spx4)
			endif
			put sidelightCutPosLeft,	0,	1,
				sidelightCutPosLeft,	py,	1
		else
			if abs(bSillNnosUsa) > EPS then	! Sill Negativ Nosing by USA Framesill
				put leftRevealPnts[idxSillEndRevealLeft][1] + frameWidthLeft,	leftRevealPnts[idxSillEndRevealLeft][2] + bSillNnosUsa,	0
				put leftRevealPnts[idxSillEndRevealLeft][1] + frameWidthLeft,	leftRevealPnts[idxSillEndRevealLeft][2],				0
			endif

			for i = idxSillEndPlasterLeft to idxSillStartPlasterLeft step -1
				if not((abs(leftRevealPnts[i][2]) > abs(spy4)) & (iSillType = SILL_DUTCH)) then
					put leftRevealPnts[i][1], leftRevealPnts[i][2], 0
				endif
			next i

			put spx3, spy3, 3000 * bIsCurvedSegment + not(gs_stack_left | bLeftCornerFunction),
				spx4, spy4, 1
		endif

		if sidelightCutRight then
			if bCurvedAtSillSide then
				py = WOD - iArchSign * sqr((radSill + iArchSign * gs_sill_nosing)^2 - sidelightCutPosRight^2)
			else
				py = spy4 - (spy4 - spy5) / (spx5 - spx4) * (sidelightCutPosRight - spx4)
			endif
			put sidelightCutPosRight,	py,	3000 * bCurvedAtSillSide + 1,
				sidelightCutPosRight,	0,	0
		else
			put	spx5, spy5, 3000 * bCurvedAtSillSide + not(gs_stack_right | bRightCornerFunction),
				spx6, spy6, 0

			for i = idxSillStartPlasterRight to idxSillEndPlasterRight
				if not((abs(rightRevealPnts[i][2]) > abs(spy5)) & (iSillType = SILL_DUTCH)) then
					put rightRevealPnts[i][1], rightRevealPnts[i][2], 3000 * bIsCurvedSegment * (i = idxSillStartPlasterRight)
				endif
			next i

			if abs(bSillNnosUsa) > EPS then	! Sill Negativ Nosing by USA Framesill
				put rightRevealPnts[idxSillEndRevealRight][1] - frameWidthRight,	rightRevealPnts[idxSillEndRevealRight][2],				0
				put rightRevealPnts[idxSillEndRevealRight][1] - frameWidthRight,	rightRevealPnts[idxSillEndRevealRight][2] + bSillNnosUsa,	0
			endif

			! Close polygon
			if bIsCurvedSegment & bCurvedAtWindowFrame then
				put leftRevealPnts[idxSillEndPlasterLeft][1], leftRevealPnts[idxSillEndPlasterLeft][2], 3000
			endif
		endif

		penFillFg	= gs_wallhole_pen_fg
		penFillBg	= gs_wallhole_pen_bg
		gosub 300	! Draw wallhole fill

		if bShowAddHotspots then
			if sidelightCutLeft then
				if sidelightCutLeft = 2 then
					hotspot2 sidelightCutPosLeft, spy4, 10053
				else
					hotspot2 sidelightCutPosLeft, spy4, 10051
				endif
			else
				hotspot2 spx4, spy4, 10000
			endif
			if sidelightCutRight then
				if sidelightCutRight = 2 then
					hotspot2 sidelightCutPosRight, spy4, 10052
				else
					hotspot2 sidelightCutPosRight, spy4, 10050
				endif
			else
				hotspot2 spx5, spy5, 10001
			endif
		endif
	else

		ch = initaddonscope ("PolyOperations", "", "")

! Generate Sill Polygon --------------------------------------------------------

		bGetWallCutPolygons = 0
		bPolyFor3D = 0
		gosub 2000

! Draw resulting polygons ------------------------------------------------------

		dim resPolyIDArr[]
		numPoly = callfunction (ch, "GetDestinationPolygons", "", resPolyIDArr)

		for i = 1 to numPoly
			polygonID = resPolyIDArr[i]
			gosub 1000	! Get GDL Polygon

			fill gs_wallhole_fill
			poly2_b nsp/3, 2+4+64, gs_wallhole_pen_fg, gs_wallhole_pen_bg,
				get(nsp)
		next i

! Draw wall contour lines ------------------------------------------------------

		dim lineAttributes[2][4]
		lineAttributes[1][1] = WALL_SECT_PEN
		lineAttributes[1][2] = WALL_LINETYPE
		lineAttributes[1][3] = LINE_PROPERTY_CONTOUR
		lineAttributes[1][4] = bitset(0, LINE_ATTRIBUTES_WALLLINE)

		lineAttributes[2][1] = gs_sill_pen_2D
		lineAttributes[2][2] = 1
		lineAttributes[2][3] = LINE_PROPERTY_GENERIC
		lineAttributes[2][4] = bitset(0, LINE_ATTRIBUTES_GDLLINE)

		bPutHotsopts	= 0

		for i = 1 to numPoly
			polygonID = resPolyIDArr[i]
			gosub 1001	! Draw one polygon contour line
		next i

! Close channel ----------------------------------------------------------------

		closeaddonscope ch
	endif

return


! ==============================================================================
! Direction Angle
! ------------------------------------------------------------------------------
! Input variables:
!	vx, vy:				vector
!
! Returned variables:
!	alpha:				selected intersection point
! ==============================================================================

103:

if abs(vx) < EPS & abs(vy) < EPS then
	angle = 0
	return
endif

if abs(vx) < EPS then
	if vy > 0 then
		angle = 90
	else
		angle = 270
	endif
else
	angle = atn(vy / vx)
	if vx >= 0 then
		if angle < 0 then
			angle = angle + 360
		endif
	else
		angle = 180 + angle
	endif
endif

return

! ==============================================================================
! Draw wallblock with contour
! ------------------------------------------------------------------------------
! Input variables:
!	stack:				wallblock polygon
!	penFillFg			fill foreground pen (pen index)
!	penFillBg			fill background pen (pen index)
! ==============================================================================

300:
	if nsp >= 9 then
		if gs_bFills then
			poly2_b nsp/3, 2+4+64, penFillFg, penFillBg,
				use(nsp)
		endif
	else
		for ii=1 to nsp
			n = get(1)
		next ii
		return
	endif

	bHaveFirst = 0
	numPoints = nsp/3

	for ii=1 to numPoints
		if ii = 1 | not(bHaveFirst) then
			x1 = get(1)
			y1 = get(1)
			s1 = get(1)
			firstX = x1
			firstY = y1
			firstS = s1
			if s1 < 100 then bHaveFirst = 1
		endif
		if ii = numPoints then
			x2 = firstX
			y2 = firstY
			s2 = firstS
		else
			if bHaveFirst then
				x2 = get(1)
				y2 = get(1)
				s2 = get(1)
			endif
		endif

		if bHaveFirst then
			if bittest(s1, 0) & (s1 >= 1000 | s1 < 100) then
				if s2 >= 3000 then
					R = sqr(x2^2 + (y2 - WOD)^2)

					vx = x1
					vy = y1 - WOD
					gosub 103	! Direction Angle
					alpha = angle

					vx = x2
					vy = y2 - WOD
					gosub 103	! Direction Angle
					beta = angle

					if abs(alpha - beta) > EPS then
						arc2 0,WOD, R, min(alpha,beta), max(alpha,beta)
					endif
				else
					if s2 < 100 then
						line2 x1,y1, x2,y2
					endif
				endif
			endif

			if s2 >= 1000 | s2 < 100 then
				x1 = x2
				y1 = y2
				s1 = s2
			endif
		endif
	next ii
return


1000:
! ==============================================================================
! Get GDL Polygon
! ------------------------------------------------------------------------------
! Input variables:
!	ch:						Channel
!	polygonID:			Polygon index
!
! Returned variables:
!	GDL stack:			GDL polygon
! ==============================================================================

	dim resVertices[]
	numVertices = callfunction(ch, "GetVertices", polygonID, resVertices)
	numVertices = numVertices / 3

	dim contArr[]
	numContours = callfunction(ch, "GetContourEnds", polygonID, contArr)

	for contIndex = 1 to numContours

		if contIndex = 1 then
			begIdx = 0
		else
			begIdx = contArr[contIndex] - 1
		endif
		if contIndex = numContours then
			endIdx = numVertices - 1
		else
			endIdx = contArr[contIndex + 1] - 2
		endif

		bClosed = 0
		bStartWithLast = 0

		index = endIdx * 3
		ac2gdl_lpx = resVertices[index + 1]
		ac2gdl_lpy = resVertices[index + 2]
		ac2gdl_lpa = resVertices[index + 3]

		if abs(ac2gdl_lpa) > EPS then
			put ac2gdl_lpx, ac2gdl_lpy, 1
			bStartWithLast = 1
		endif

		for vertIndex = begIdx to endIdx
			index = vertIndex * 3
			ac2gdl_px = resVertices[index + 1]
			ac2gdl_py = resVertices[index + 2]
			ac2gdl_pa = resVertices[index + 3]

			if vertIndex = begIdx then
				if bStartWithLast then
					ac2gdl_spx = ac2gdl_lpx
					ac2gdl_spy = ac2gdl_lpy
				else
					ac2gdl_spx = ac2gdl_px
					ac2gdl_spy = ac2gdl_py
				endif
			endif

			if abs(ac2gdl_lpa) > EPS then
				ac2gdl_mx = (ac2gdl_px + ac2gdl_lpx) / 2
				ac2gdl_my = (ac2gdl_py + ac2gdl_lpy) / 2
				ac2gdl_ratio = 1 / 2 / tan (ac2gdl_lpa / 2)

				ac2gdl_cx = ac2gdl_mx - ac2gdl_ratio * (ac2gdl_py - ac2gdl_lpy)	! Arc center
				ac2gdl_cy = ac2gdl_my + ac2gdl_ratio * (ac2gdl_px - ac2gdl_lpx)

				put ac2gdl_cx,	ac2gdl_cy,	900,
					0,			ac2gdl_lpa,	4001
			endif

			if vertIndex > begIdx & abs(ac2gdl_spx - ac2gdl_px) < EPS & abs(ac2gdl_spy - ac2gdl_py) < EPS then
!!!				put ac2gdl_px, ac2gdl_py, -1	! Sill polygon never contains holes
				bClosed = 1
			else
				if vertIndex < endIdx | not(bStartWithLast) then
					put ac2gdl_px, ac2gdl_py, 1
				endif
			endif

			ac2gdl_lpx = ac2gdl_px
			ac2gdl_lpy = ac2gdl_py
			ac2gdl_lpa = ac2gdl_pa
		next vertIndex

		if not(bClosed) & numContours > 1 then	! Close the polygon if it has holes
			put ac2gdl_spx, ac2gdl_spy, -1
		endif

	next contIndex
return


1001:
! ==============================================================================
! Draw one polygon contour line
! ------------------------------------------------------------------------------
! Input variables:
!	ch:						Channel
!	polygonID:				Polygon ID
!	lineAttributes[][3]:	Line attribute array
!								[][1] = pen color
!								[][2] = line type
!								[][3] = line property
!								[][4] = additional line attributes
! ==============================================================================

	dim resVertices[]
	numVertices = callfunction(ch, "GetVertices", polygonID, resVertices)
	numVertices = numVertices / 3

	dim contArr[]
	numContours = callfunction(ch, "GetContourEnds", polygonID, contArr)

	dim inhEdgeInfos[]
	numEdges = callfunction(ch, "GetInhEdgeInfos", polygonID, inhEdgeInfos)

	for contIndex = 1 to numContours

		if contIndex = 1 then
			begIdx = 0
		else
			begIdx = contArr[contIndex] - 1
		endif
		if contIndex = numContours then
			endIdx = numVertices - 1
		else
			endIdx = contArr[contIndex + 1] - 2
		endif

		bClosed = 0
		bStartWithLast = 0

		index = endIdx * 3
		lastVertX	= resVertices[index + 1]
		lastVertY	= resVertices[index + 2]
		lastVertA	= resVertices[index + 3]
		edgeInfo	= inhEdgeInfos[endIdx + 1]

		for vertIndex = begIdx to endIdx

			index = vertIndex * 3
			actVertX = resVertices[index + 1]
			actVertY = resVertices[index + 2]
			actVertA = resVertices[index + 3]

!!text2	(lastVertX + actVertX) / 2,
!!		(lastVertY + actVertY) / 2,
!!		edgeInfo

!!!ccc=ccc+0.1
!!!circle2 lastVertX, lastVertY, ccc
!!!circle2 actVertX, actVertY, ccc

			if edgeInfo > 0 & edgeInfo <= vardim1(lineAttributes) then

				if lineAttributes[edgeInfo][1] > 0 then
					pen				lineAttributes[edgeInfo][1]
					line_type		lineAttributes[edgeInfo][2]

					line_property	lineAttributes[edgeInfo][3]
					iAttributes = round_int(lineAttributes[edgeInfo][4])

					if abs(lastVertA) > EPS then
						ac2gdl_mx = (actVertX + lastVertX) / 2
						ac2gdl_my = (actVertY + lastVertY) / 2
						ac2gdl_ratio = 1 / 2 / tan (lastVertA / 2)

						ac2gdl_cx = ac2gdl_mx - ac2gdl_ratio * (actVertY - lastVertY)	! Arc center
						ac2gdl_cy = ac2gdl_my + ac2gdl_ratio * (actVertX - lastVertX)
						ac2gdl_rad = sqr((ac2gdl_cx - actVertX)^2 + (ac2gdl_cy - actVertY)^2)

						vx = actVertX - ac2gdl_cx
						vy = actVertY - ac2gdl_cy
						gosub 103	! Direction Angle
						alpha = angle

						vx = lastVertX - ac2gdl_cx
						vy = lastVertY - ac2gdl_cy
						gosub 103	! Direction Angle
						beta = angle

						if abs(alpha - beta) > EPS then
							if abs(alpha - beta) > 180 + EPS then
								angleStart	= max(alpha,beta)
								angleEnd	= min(alpha,beta)
							else
								angleStart	= min(alpha,beta)
								angleEnd	= max(alpha,beta)
							endif
							if bittest(iAttributes, LINE_ATTRIBUTES_GDLLINE) then
								arc2 ac2gdl_cx,	ac2gdl_cy, ac2gdl_rad, angleStart, angleEnd
							endif
							if bittest(iAttributes, LINE_ATTRIBUTES_WALLLINE) then
								wallarc2 ac2gdl_cx,	ac2gdl_cy, ac2gdl_rad, angleStart, angleEnd
							endif
						endif
					else
						if bittest(iAttributes, LINE_ATTRIBUTES_GDLLINE) then
							line2 lastVertX, lastVertY, actVertX, actVertY
						endif
						if bittest(iAttributes, LINE_ATTRIBUTES_WALLLINE) then
							wallline2 lastVertX, lastVertY, actVertX, actVertY
						endif
					endif
				endif
			endif

			if sillNosing > EPS & bShowAddHotspots & abs(actVertY - sillNosingY) < EPS then
				if actVertX < 0 then
					hotspot2 actVertX, actVertY, 10000	! Left
				else
					hotspot2 actVertX, actVertY, 10001	! Right
				endif
			endif

			lastVertX	= actVertX
			lastVertY	= actVertY
			lastVertA	= actVertA
			edgeInfo	= inhEdgeInfos[vertIndex + 1]

		next vertIndex
	next contIndex
return




]]></Script_2D>

<!-- GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT -->

<Script_1D SectVersion="20" SectionFlags="0" SubIdent="0"><![CDATA[

! const values for parameter: iBrickSilldetlevel
BRICKSILL_SIMPLE   = 1
BRICKSILL_DETAILED = 2

EPS = 0.0001

! iLoD3D
SYMBW_3D_OFF				= 0
SYMBW_3D_SINGLEPLANE		= 12	! (lod3D_DW = 1 lod3D = lodSE500)
SYMBW_3D_SPLANE_MIDLINES	= 11	! (lod3D_DW = 1 lod3D = lodSE200)
SYMBW_3D_MULTIPLANES		= 22	! (lod3D_DW = 2 lod3D = lodSE100)(Simple 3D)
SYMBW_3D_MULTIPLANES_FRAME	= 21	! (lod3D_DW = 3 lod3D = lodSE50)
SYMBW_3D_FULLDET			= 31	! (lod3D_DW = 4 lod3D = lodSE20)(Detailed 3D)

! iRevealType
REVEAL_EDGE				= 0
REVEAL_NO				= 1
REVEAL_POSITIVE			= 2
REVEAL_NEGATIVE			= 3
REVEAL_SLANTED			= 4
REVEAL_SPLAYED			= 5
REVEAL_HISTORIC			= 6
REVEAL_DOUBLE			= 7
REVEAL_DOUBLE_SPLAYED	= 8
REVEAL_OUTSIDE_SPLAYED	= 9

! const values for parameter: iSillType
SILL_TIMBER			= 1
SILL_BRICK			= 2
SILL_STONE			= 3
SILL_CERAMIC		= 4
SILL_ETHERNIT		= 5
SILL_CONCRETE_TUB	= 6
SILL_ALUMINIUM		= 7
SILL_SOLID_11		= 8
SILL_SOLID_12		= 9
SILL_SOLID_22		= 10
SILL_METAL_1		= 11
SILL_PARALLEL		= 12
SILL_METAL_2		= 13
SILL_PARALLEL_2		= 14
SILL_SIMPLEBLOCK	= 15
SILL_BLOCK			= 16
SILL_DUTCH			= 17

! iWindowShape:
SHAPE_RECTANGULAR			= 0
SHAPE_ARCHED				= 1
SHAPE_ROUND					= 2
SHAPE_EYEBROWS				= 3
SHAPE_HALFCIRCLE			= 4 	! straight side is horizontal
SHAPE_MULTISIDE				= 5
SHAPE_OCTAGONAL				= 6
SHAPE_HALFARCH				= 7
SHAPE_PENTAGON				= 8
SHAPE_QUARTERROUND			= 9
SHAPE_HALFROUND				= 10 	! straight side is vertical
SHAPE_TRAPEZOID				= 11
SHAPE_TRIANGLE				= 12
SHAPE_GOTHICARCH			= 13
SHAPE_ELLIPSEARCH			= 14
SHAPE_ROMBUS				= 15
SHAPE_HORSESHOE				= 16
SHAPE_OGEECENTERED			= 17
SHAPE_SARACENIC				= 18
SHAPE_T						= 19
SHAPE_HALF_T_LEFT			= 20
SHAPE_ARCHED_T				= 21
SHAPE_ARCHED_HALF_T_LEFT	= 22
SHAPE_PARALLELOGRAM			= 23
SHAPE_ELLIPSE				= 24
SHAPE_CORNER_TRIANGLE		= 25
SHAPE_QUARTERROUND_NOFRAME	= 26
SHAPE_HALF_T_RIGHT			= 27
SHAPE_ARCHED_HALF_T_RIGHT	= 28

! thresholdType, iThresholdType
THRESHOLD_OFF		= 0
THRESHOLD_NORMAL	= 1
THRESHOLD_BLIND		= 2


! ==============================================================================

bTShapedOpening =  (iWindowShape = SHAPE_T |\
					iWindowShape = SHAPE_HALF_T_LEFT |\
					iWindowShape = SHAPE_HALF_T_RIGHT |\
					iWindowShape = SHAPE_ARCHED_T |\
					iWindowShape = SHAPE_ARCHED_HALF_T_LEFT |\
					iWindowShape = SHAPE_ARCHED_HALF_T_RIGHT)

bInclinedWall	= (abs(WALL_INCL) > EPS)
curvedWall		= (abs(WIDO_ORIG_DIST) > EPS)
wallIsLeft		= (SYMB_ROTANGLE > EPS) exor WIDO_REVEAL_SIDE
signWallIsLeft	= wallIsleft - not(wallIsleft)

if bDoorWithSidelightSupport then
	bHasAnySillOn = (gs_sill_outside | \
					(gs_sidelight_left  & gs_sidelight_parapet_hgt_left > EPS  & gs_sill_outside_sl_left) | \
					(gs_sidelight_right & gs_sidelight_parapet_hgt_right > EPS & gs_sill_outside_sl_right))
else
	bHasAnySillOn = (gs_sill_outside)
endif


! ==============================================================================

if SYMB_MIRRORED exor (SYMB_ROTANGLE > EPS) then
	widoRightJamb	= WIDO_LEFT_JAMB
	widoLeftJamb	= WIDO_RIGHT_JAMB
	RightJamb	= WIDO_LEFT_JAMB
	LeftJamb	= WIDO_RIGHT_JAMB
else
	widoRightJamb	= WIDO_RIGHT_JAMB
	widoLeftJamb	= WIDO_LEFT_JAMB
	RightJamb	= WIDO_RIGHT_JAMB
	LeftJamb	= WIDO_LEFT_JAMB
endif


! ==============================================================================
! Restrictions for Window Shapes
! ==============================================================================

if iWindowShape = 1 then
	! --- Arched Window Shape ---

	widoLeftJamb	= widoRightJamb
endif


! ==============================================================================
! Brick- and Stone Sill Specials
! ==============================================================================

if	iSillType = SILL_BRICK | \
	iSillType = SILL_STONE | \
	iSillType = SILL_CERAMIC | \
	iSillType = SILL_ETHERNIT | \
	iSillType = SILL_CONCRETE_TUB | \
	iSillType = SILL_ALUMINIUM then
	gs_sill_curved = 0
endif


! ==============================================================================
! Calculations for Corner Window
! ==============================================================================

if bRightCornerFunction & abs(rightCornerAngle) > EPS then
	rx = 1 / tan(rightCornerAngle / 2)

	if rightCornerAngle > 180 then
		rightCwDx = WIDO_FRAME_THICKNESS / tan(-rightCornerAngle / 2)
	else
		rightCwDx = 0
	endif

	rightCwDx2 = 0
	if abs(WALL_THICKNESS - rightConnWallThk) > EPS then
		rightCwDx2 = (WALL_THICKNESS - rightConnWallThk) / cos(rightCornerAngle - 90)
	endif
	bFitMode = (rightConnWallThk > WALL_THICKNESS + EPS)

!!!	if SYMB_MIRRORED exor WIDO_REVEAL_SIDE then
!!!		! --- Swap Left and Right Attributes
!!!		gs_sill_ovhg_left	= gs_sill_ovhg_right
!!!		gs_stack_left		= gs_stack_right
!!!		gs_left_oversize	= gs_right_oversize
!!!	endif

	gs_right_oversize = 0
endif

if bLeftCornerFunction & abs(leftCornerAngle) > EPS then
	lx = 1 / tan(leftCornerAngle / 2)

	if leftCornerAngle > 180 then
		leftCwDx = WIDO_FRAME_THICKNESS / tan(-leftCornerAngle / 2)
	else
		leftCwDx = 0
	endif

	leftCwDx2 = 0
	if abs(WALL_THICKNESS - leftConnWallThk) > EPS then
		leftCwDx2 = (WALL_THICKNESS - leftConnWallThk) / cos(leftCornerAngle - 90)
	endif
	bFitMode = (leftConnWallThk > WALL_THICKNESS + EPS)

	gs_left_oversize = 0
endif


! ==============================================================================
! Calculations for Inclined Walls
! ==============================================================================

if bInclinedWall then
	bFactor = SYMB_MIRRORED exor WIDO_REVEAL_SIDE exor wallIsLeft
	incFactor = not(bFactor) - bFactor
	incX = incFactor * tan(WALL_INCL)
	incY = incFactor * (1 / cos(WALL_INCL))

	bDir = SYMB_MIRRORED exor (SYMB_ROTANGLE > EPS)
	iDir = not(bDir) - bDir
	incH = cos(WALL_INCL)
	incV = sin(WALL_INCL) * iDir
else
	incX = 0
	incY = 1
	incH = 0
	incV = 0
endif


! ==============================================================================
! Calculations for Stack Window
! ==============================================================================

if gs_stack_left then
	gs_sill_ovhg_left	= gs_left_oversize
	overSizeLeft		= gs_left_oversize
	overSizeLeftOut		= gs_left_oversize
	widoLeftJamb		= 0
else
	overSizeLeft		= 0
	overSizeLeftOut		= -widoLeftJamb
endif

if gs_stack_right then
	gs_sill_ovhg_right	= gs_right_oversize
	overSizeRight		= gs_right_oversize
	overSizeRightOut	= gs_right_oversize
	widoRightJamb		= 0
else
	overSizeRight		= 0
	overSizeRightOut	= -widoRightJamb
endif


! ==============================================================================
! Sill Nosing
! ==============================================================================

sillNosing = gs_sill_nosing


! ==============================================================================
! Reveal Points Indexes
! ==============================================================================

idxSillStartRevealLeft		= iRevealPointsIdx[1]
idxSillEndRevealLeft		= iRevealPointsIdx[2]
idxSillStartPlasterLeft		= iRevealPointsIdx[7]
idxSillEndPlasterLeft		= iRevealPointsIdx[8]
idxSillStartRevealRight		= iRevealPointsIdx[11]
idxSillEndRevealRight		= iRevealPointsIdx[12]
idxSillStartPlasterRight	= iRevealPointsIdx[17]
idxSillEndPlasterRight		= iRevealPointsIdx[18]
idxFrameStartRevealLeft		= iRevealPointsIdx[3]
idxFrameEndRevealLeft		= iRevealPointsIdx[4]
idxFrameStartRevealRight	= iRevealPointsIdx[13]
idxFrameEndRevealRight		= iRevealPointsIdx[14]

! ==============================================================================
! Calculations for Straight Walls
! ==============================================================================

maxSillAngle = 0

casingOffsetLeft = 0
casingOffsetRight = 0

if gs_trim_show_cover_out & GLOB_SCRIPT_TYPE = 2 then
	casingOffsetLeft	= (bDrawOutsideTrim * not(gs_trim_atframe_out) * gs_trim_thk_out * (gs_sill_ovhg_left  < CasingOutsLeftOutPoint))
	casingOffsetRight	= (bDrawOutsideTrim * not(gs_trim_atframe_out) * gs_trim_thk_out * (gs_sill_ovhg_right < CasingOutsRightOutPoint))
endif

if not(curvedWall) then

	if iSillType = SILL_DUTCH then

		! the calculate not depends on ganging because there is no sill side overhang
		if bLeftCornerFunction then
			spx3 = leftRevealPnts[idxSillStartRevealLeft][1] - min(0, ((gs_sill_width - WIDO_FRAME_THICKNESS) - WIDO_SILL)) * lx
			spy3 = -min(WIDO_SILL, (gs_sill_width - WIDO_FRAME_THICKNESS))

			spx4 = leftRevealPnts[idxSillStartRevealLeft][1] - ((gs_sill_width - WIDO_FRAME_THICKNESS) - WIDO_SILL) * lx
			spy4 = -(gs_sill_width - WIDO_FRAME_THICKNESS)
		else
			spx3 = leftRevealPnts[idxSillStartRevealLeft][1]
			spy3 = -min((WIDO_SILL + casingOffsetLeft), (gs_sill_width - WIDO_FRAME_THICKNESS))

			spx4 = spx3
			spy4 = -(gs_sill_width - WIDO_FRAME_THICKNESS)
		endif

		if bRightCornerFunction then
			spx6 = rightRevealPnts[idxSillStartRevealRight][1] + min(0, ((gs_sill_width - WIDO_FRAME_THICKNESS) - WIDO_SILL)) * rx
			spy6 = -min(WIDO_SILL, (gs_sill_width - WIDO_FRAME_THICKNESS))

			spx5 = rightRevealPnts[idxSillStartRevealRight][1] + ((gs_sill_width - WIDO_FRAME_THICKNESS) - WIDO_SILL) * rx
			spy5 = -(gs_sill_width - WIDO_FRAME_THICKNESS)
		else
			spx6 = rightRevealPnts[idxSillStartRevealRight][1]
			spy6 = -min((WIDO_SILL + casingOffsetRight), (gs_sill_width - WIDO_FRAME_THICKNESS))

			spx5 = spx6
			spy5 = -(gs_sill_width - WIDO_FRAME_THICKNESS)
		endif
	else
		if bLeftCornerFunction then
			spx3 = leftRevealPnts[idxSillStartRevealLeft][1]
			spy3 = -WIDO_SILL

			spx4 = spx3 - sillNosing * lx
			spy4 = spy3 - sillNosing
		else
			spx3 = leftRevealPnts[idxSillStartRevealLeft][1] - not(gs_stack_left) * gs_sill_ovhg_left
			spy3 = -WIDO_SILL - casingOffsetLeft

			spx4 = spx3
			spy4 = -WIDO_SILL - sillNosing
		endif

		if bRightCornerFunction then
			spx6 = rightRevealPnts[idxSillStartRevealRight][1]
			spy6 = -WIDO_SILL

			spx5 = spx6 + sillNosing * rx
			spy5 = spy6 - sillNosing
		else
			spx6 = rightRevealPnts[idxSillStartRevealRight][1] + not(gs_stack_right) * gs_sill_ovhg_right
			spy6 = -WIDO_SILL - casingOffsetRight

			spx5 = spx6
			spy5 = -WIDO_SILL - sillNosing
		endif
	endif

	if bHasAnySillOn then	! Outside, Both Sides
		if iSillType = SILL_TIMBER then
			temp = WIDO_SILL + gs_sill_nosing
			if abs(temp) < EPS then
				maxSillAngle = 90
			else
				maxSillAngle = atn(gs_sill_thk / temp)
			endif
		endif
		if iSillType = SILL_BRICK then
			maxSillAngle = 90
		endif
		if iSillType = SILL_STONE then
			temp = gs_sill_nosing + WIDO_SILL + gs_sill_topWidth
			if abs(temp) < EPS then
				maxSillAngle = 90
			else
				maxSillAngle = atn((gs_sill_thk - gs_sill_topHeight) / temp)
			endif
		endif
		if iSillType = SILL_ETHERNIT then
			temp = gs_sill_nosing + WIDO_SILL + gs_sill_slip_in - gs_sill_topWidth
			if abs(temp) < EPS then
				maxSillAngle = 90
			else
				maxSillAngle = atn((gs_sill_thk - gs_sill_topHeight) / temp)
			endif
		endif
	endif
endif


! ==============================================================================
! Calculations for Curved Walls
! ==============================================================================

if curvedWall & abs(radSill) > EPS then

	if GLOB_SCRIPT_TYPE = 2 | GLOB_SCRIPT_TYPE = 3 then
		if GLOB_SCRIPT_TYPE <> 2 then
			widoOrigDist = -WIDO_ORIG_DIST
		else
			widoOrigDist = WIDO_ORIG_DIST
		endif

		tempWOD = abs(widoOrigDist) - (SYMB_ROTANGLE > EPS) * WIDO_FRAME_THICKNESS

		alfaLeft	= atn((leftWidth  + overSizeLeft)  / tempWOD)
		alfaRight	= atn((rightWidth + overSizeRight) / tempWOD)

		alfaLeftOs	= atn((leftWidth  + gs_left_oversize) / tempWOD)
		alfaRightOs	= atn((rightWidth + gs_right_oversize) / tempWOD)

		bArchSign = (WIDO_REVEAL_SIDE exor SYMB_ROTANGLE > EPS)
		iArchSign = bArchSign - not(bArchSign)		! 1 / -1

		if WIDO_REVEAL_SIDE then
			tempWOD = widoOrigDist + WIDO_FRAME_THICKNESS
		else
			tempWOD = -widoOrigDist
		endif

		if WIDO_REVEAL_SIDE exor SYMB_ROTANGLE < EPS then
			ySign = 1
		else
			ySign = -1
		endif

		radSillLine = radSill - iArchSign * WIDO_SILL	! Radius of the reveal at the Sill depth

		ArcLengthSillToAngle	= 180 / radSill / PI

		alfaLeftJamb	= widoLeftJamb  * ArcLengthSillToAngle
		alfaRightJamb	= widoRightJamb * ArcLengthSillToAngle

		alfaSillLeftOvhg	= not(gs_stack_left)  * gs_sill_ovhg_left  * ArcLengthSillToAngle
		alfaSillRightOvhg	= not(gs_stack_right) * gs_sill_ovhg_right * ArcLengthSillToAngle

		alfaL = -alfaLeft + alfaLeftJamb - alfaSillLeftOvhg
		alfaR = alfaRight - alfaRightJamb + alfaSillRightOvhg

		if iSillType = SILL_BRICK |  iSillType = SILL_STONE then
			if wallIsLeft then
				maxSillLength = abs(radSill - abs(tempWOD))
			else
				pyR = ySign * radSill * cos(alfaR)

				pyL = ySign * radSill * cos(alfaL)

				maxSillLength = max((abs(tempWOD) - pyL), (abs(tempWOD) - pyR))
			endif
		endif

		if wallIsLeft then
			alfaL = -atn((leftWidth)  / (WOD - WIDO_FRAME_THICKNESS))
			alfaR =  atn((rightWidth) / (WOD - WIDO_FRAME_THICKNESS))
		else
			alfaL = -atn((leftWidth)  / WOD)
			alfaR =  atn((rightWidth) / WOD)
		endif

		if iSillType = SILL_DUTCH then

			if bParalellInCurvedWalls then

				! Left side

				! Casing offset in parallel direction
				if casingOffsetLeft > EPS then
					_casingRadius = sqr(leftRevealPnts[idxSillStartRevealLeft][1]^2 + (WOD - leftRevealPnts[idxSillStartRevealLeft][2])^2) + casingOffsetLeft * wallIsLeft - casingOffsetLeft * not(wallIsLeft)
					_casingOffset = abs( abs(sqr((_casingRadius)^2 - (leftRevealPnts[idxSillStartRevealLeft][1])^2) - abs(WOD)) - abs(leftRevealPnts[idxSillStartRevealLeft][2]) )
				else
					_casingOffset = casingOffsetLeft	! 0
				endif

				_y = leftRevealPnts[idxSillEndRevealLeft][2] + WIDO_FRAME_THICKNESS
				_y2 = leftRevealPnts[idxSillStartRevealLeft][2] - _casingOffset

				_checkDist = abs(_y - _y2)

				spx3 = leftRevealPnts[idxSillEndRevealLeft][1]
				spy3 = _y - min(_checkDist, gs_sill_width)

				spx4 = spx3
				spy4 = _y - gs_sill_width

				! Right side

				! Casing offset in parallel direction
				if casingOffsetLeft > EPS then
					_casingRadius = sqr(rightRevealPnts[idxSillStartRevealRight][1]^2 + (WOD - rightRevealPnts[idxSillStartRevealRight][2])^2) + casingOffsetRight * wallIsLeft - casingOffsetRight * not(wallIsLeft)
					_casingOffset = abs( abs(sqr((_casingRadius)^2 - (rightRevealPnts[idxSillStartRevealRight][1])^2) - abs(WOD)) - abs(rightRevealPnts[idxSillStartRevealRight][2]) )
				else
					_casingOffset = casingOffsetLeft	! 0
				endif

				_y = rightRevealPnts[idxSillEndRevealRight][2] + WIDO_FRAME_THICKNESS
				_y2 = rightRevealPnts[idxSillStartRevealRight][2] - _casingOffset

				_checkDist = abs(_y - _y2)

				spx6 = rightRevealPnts[idxSillEndRevealRight][1]
				spy6 = _y - min(_checkDist, gs_sill_width)

				spx5 = spx6
				spy5 = _y - gs_sill_width
			else
				! Left side

				_x = leftRevealPnts[idxSillEndRevealLeft][1] - WIDO_FRAME_THICKNESS*tan(alfaL)
				_y = leftRevealPnts[idxSillEndRevealLeft][2] + WIDO_FRAME_THICKNESS

				_x2 = leftRevealPnts[idxSillStartRevealLeft][1]
				_y2 = leftRevealPnts[idxSillStartRevealLeft][2]

				_checkDist = (sqr((_x - _x2)^2 + (_y - _y2)^2)) * cos(alfaL)

				_casingOffset = casingOffsetLeft / cos(alfaL)
				spx3 = _x + min((_checkDist + _casingOffset), gs_sill_width) * tan(alfaL) - min(_casingOffset, max(0, (gs_sill_width - _checkDist))) * tan(alfaL)
				spy3 = _y - min((_checkDist + _casingOffset), gs_sill_width)

				spx4 = _x + gs_sill_width * tan(alfaL) - (max(0, gs_sill_width - _checkDist)) * tan(alfaL)
				spy4 = _y - gs_sill_width

				! Right side

				_x = rightRevealPnts[idxSillEndRevealRight][1] - WIDO_FRAME_THICKNESS*tan(alfaR)
				_y = rightRevealPnts[idxSillEndRevealRight][2] + WIDO_FRAME_THICKNESS

				_x2 = rightRevealPnts[idxSillStartRevealRight][1]
				_y2 = rightRevealPnts[idxSillStartRevealRight][2]

				_checkDist = (sqr((_x - _x2)^2 + (_y - _y2)^2)) * cos(alfaR)

				_casingOffset = casingOffsetRight / cos(alfaR)
				spx6 = _x + min((_checkDist + _casingOffset), gs_sill_width) * tan(alfaR) - min(_casingOffset, max(0, (gs_sill_width - _checkDist))) * tan(alfaR)
				spy6 = _y - min((_checkDist + _casingOffset), gs_sill_width)

				spx5 = _x + gs_sill_width*tan(alfaR) - (max(0, gs_sill_width - _checkDist)) * tan(alfaR)
				spy5 = _y - gs_sill_width
			endif
		else
			alfaSillLeftOvhg	= not(gs_stack_left)  * gs_sill_ovhg_left  * ArcLengthSillToAngle
			alfaSillRightOvhg	= not(gs_stack_right) * gs_sill_ovhg_right * ArcLengthSillToAngle

			if gs_stack_left then
				spx3 = leftRevealPnts[idxSillStartRevealLeft][1] + casingOffsetLeft * sin(alfaL)
				spy3 = leftRevealPnts[idxSillStartRevealLeft][2] - casingOffsetLeft

				spx4 = spx3 + sillNosing * sin(alfaL) - casingOffsetLeft * sin(alfaL)
				spy4 = spy3 - sillNosing * cos(alfaL) + casingOffsetLeft
			else
				if bParalellInCurvedWalls then
					spx3 = leftRevealPnts[idxSillStartRevealLeft][1] - gs_sill_ovhg_left
					spy3 = -signWallIsLeft * sqr(radSill^2 - spx3^2) + WOD - casingOffsetLeft

					spx4 = spx3
					spy4 = -signWallIsLeft * sqr((radSill + signWallIsLeft * sillNosing)^2 - spx4^2) + WOD
				else
					x = leftRevealPnts[idxSillStartRevealLeft][1] + casingOffsetLeft * sin(alfaL)
					y = leftRevealPnts[idxSillStartRevealLeft][2] - casingOffsetLeft
					alpha = -alfaSillLeftOvhg
					gosub 9000	! Rotate 2D points around curved wall's center
					spx3 = x
					spy3 = y

					alpha = abs(atn(spx3 / (spy3 - WOD)))
					spx4 = spx3 - sillNosing * sin(alpha) * signWallIsLeft - casingOffsetLeft * sin(alfaL)
					spy4 = spy3 - sillNosing * cos(alpha) + casingOffsetLeft
				endif
			endif

			if gs_stack_right then
				spx6 = rightRevealPnts[idxSillStartRevealRight][1] + casingOffsetRight * sin(alfaR)
				spy6 = rightRevealPnts[idxSillStartRevealRight][2] - casingOffsetRight

				spx5 = spx6 + sillNosing * sin(alfaR) - casingOffsetRight * sin(alfaR)
				spy5 = spy6 - sillNosing * cos(alfaR) + casingOffsetRight
			else
				if bParalellInCurvedWalls then
					spx6 = rightRevealPnts[idxSillStartRevealRight][1] + gs_sill_ovhg_right
					spy6 = -signWallIsLeft * sqr(radSill^2 - spx6^2) + WOD - casingOffsetRight

					spx5 = spx6 + casingOffsetRight * sin(alfaR)
					spy5 = -signWallIsLeft * sqr((radSill + signWallIsLeft * sillNosing)^2 - spx5^2) + WOD
				else
					x = rightRevealPnts[idxSillStartRevealRight][1] + casingOffsetRight * sin(alfaR)
					y = rightRevealPnts[idxSillStartRevealRight][2] - casingOffsetRight
					alpha = alfaSillRightOvhg
					gosub 9000	! Rotate 2D points around curved wall's center
					spx6 = x
					spy6 = y

					alpha = abs(atn(spx6 / (spy6 - WOD)))
					spx5 = spx6 + sillNosing * sin(alpha) * signWallIsLeft - casingOffsetRight * sin(alfaR)
					spy5 = spy6 - sillNosing * cos(alpha) + casingOffsetRight
				endif
			endif
		endif
	endif
endif

if curvedWall then
	if bHasAnySillOn then	! Outside, Both Sides
		! --- Check Sill angle ---

		if iSillType = SILL_TIMBER & abs(radSill) > EPS then
			temp = max(abs(spy4 + WOD), abs(spy5 + WOD))
			maxSillLength = max(abs(radSill - ySign * gs_sill_nosing - abs(WOD)), temp)
			if abs(maxSillLength) < EPS then
				maxSillAngle = 90
			else
				maxSillAngle = asn((gs_sill_thk - 0.001) / maxSillLength)
			endif
		endif
		if iSillType = SILL_BRICK then
			maxSillAngle = 90
		endif
		if iSillType = SILL_STONE then
			maxSillAngle = 90
		endif
		if iSillType = SILL_ETHERNIT then
			maxSillAngle = 90
		endif
	endif
endif

! ==============================================================================

reorder = (AC_Wall_Direction_Type <> 1 & AC_Wall_Direction_Type <> 3)
signReorder = not(reorder) - reorder

SKIN_FILL				=  1
SKIN_THICKNESS			=  2
SKIN_CONT_PEN			=  3	! Obsolete (old contour pen)
SKIN_FILL_PEN			=  4
SKIN_FILL_BACK_PEN		=  5
SKIN_CORE_STATUS		=  6
SKIN_UPPER_LINE_PEN		=  7 !+ 2 * reorder
SKIN_UPPER_LINE_TYPE	=  8 !+ 2 * reorder
SKIN_LOWER_LINE_PEN		=  9 !- 2 * reorder
SKIN_LOWER_LINE_TYPE	= 10 !- 2 * reorder
SKIN_END_FACE_PEN		= 11
SKIN_FILL_ORIENTATION	= 12	! 0 - global, 1 - local
SKIN_TYPE				= 13	! 0 - cut, 1 - below cutplane, 2 - above cutplane (all skin types are 0 for simple walls)
!	For D/W in complex walls on the floor plan this variable contains the data of all cut skins, for wall ends on the floor plan the data of all skins.
!	For D/W and wall ends in the 3D window contains the data of the skins actually cut by the D/W or wall end
SKIN_END_LINE_TYPE		= 14
SKIN_FINISH_STATUS		= 15
SKIN_FILL_FIT_TO_SKIN	= 16
SKIN_THICKEN_TRAPEZOID	= 17


! Line Property defines:
LINE_PROPERTY_GENERIC	= 0
LINE_PROPERTY_INNER		= 1
LINE_PROPERTY_CONTOUR	= 2


! Partial Stucture Display defines:
STRUCTURE_ENTIRE_STRUCTURE	= 0
STRUCTURE_CORE_ONLY			= 1
STRUCTURE_WITHOUT_FINISHES	= 2

! ==============================================================================

bCompositeWall		= (WALL_SKINS_NUMBER > 0)

goto 1


! ==============================================================================
! Rotate 2D points around curved wall's center
! ------------------------------------------------------------------------------
! Input variables:
!	x,y:				2D point
!	WOD:				"wido orig dist" in the wallhole coordinate system
!	alpha:				rotation angle
! Returned variables:
!	x,y:				rotated 2D point
! ==============================================================================

9000:
	xo = x
	yo = y - WOD
	x = xo * cos(signWallIsLeft * alpha) - yo * sin(signWallIsLeft * alpha)
	y = xo * sin(signWallIsLeft * alpha) + yo * cos(signWallIsLeft * alpha) + WOD
return


! ==============================================================================
! Generate Sill Polygon - in Polygonal Walls
! ------------------------------------------------------------------------------
! Input variables:
!	ch:
!	leftRevealPnts, rightRevealPnts:
!	reveal point indices:
!	bGetWallCutPolygons:
!	bPolyFor3D:
!	AC_WallContourPolygon:
!	sillNosing:
!	gs_stack_left:
!	gs_stack_right:
! ==============================================================================

2000:

	preparefunction ch, "CreateContainer", "mySourceContainer", ""
	preparefunction ch, "CreateContainer", "myDestinationContainer", ""

	preparefunction ch, "SetSourceContainer",	 	"mySourceContainer", ""
	preparefunction ch, "SetDestinationContainer",	"myDestinationContainer", ""

! Store wallhole polygon -------------------------------------------------------

	dim vertArr1[][3]
	dim inhEdgeInfos1[]
	defaultInhEdgeInfo = 0

	bHasAnySillPoint = 0
	for i=idxSillStartRevealLeft to idxSillEndRevealLeft
		if leftRevealPnts[i][2] <= 0 then
			distFromLast = abs((leftRevealPnts[i][1] - lastSillPointX)^2 + (leftRevealPnts[i][2] - lastSillPointY)^2)
			if not(bHasAnySillPoint) | distFromLast > EPS then
				if bHasAnySillPoint then
					put not(gs_stack_left)	! status of the previous point
				endif
				put leftRevealPnts[i][1], leftRevealPnts[i][2]
				lastSillPointX = leftRevealPnts[i][1]
				lastSillPointY = leftRevealPnts[i][2]
				bHasAnySillPoint = 1
			endif
		endif
	next i
	if bHasAnySillPoint then
		put -1	! last status
	endif

	if abs(bSillNnosUsa) > EPS & WIDO_SILL >= 0 then	! Sill Negativ Nosing by USA Framesill
		if WIDO_SILL > EPS then
			put  leftRevealPnts[idxSillEndRevealLeft][1]  + frameWidthLeft,		 leftRevealPnts[idxSillEndRevealLeft][2],		0
		endif
		put	 leftRevealPnts[idxSillEndRevealLeft][1]  + frameWidthLeft,		 leftRevealPnts[idxSillEndRevealLeft][2]  + bSillNnosUsa,	0,
			rightRevealPnts[idxSillEndRevealRight][1] - frameWidthRight,	rightRevealPnts[idxSillEndRevealRight][2] + bSillNnosUsa,	0
		if WIDO_SILL > EPS then
			put rightRevealPnts[idxSillEndRevealRight][1] - frameWidthRight,	rightRevealPnts[idxSillEndRevealRight][2],		0
		endif
	endif

	bHasAnySillPoint = 0
	for i = idxSillEndRevealRight to idxSillStartRevealRight step -1
		if rightRevealPnts[i][2] <= 0 then
			distFromLast = abs((rightRevealPnts[i][1] - lastSillPointX)^2 + (rightRevealPnts[i][2] - lastSillPointY)^2)
			if not(bHasAnySillPoint) | distFromLast > EPS then
				if bHasAnySillPoint then
					put not(gs_stack_right)	! status of the previous point
				endif
				put rightRevealPnts[i][1], rightRevealPnts[i][2]
				lastSillPointX = rightRevealPnts[i][1]
				lastSillPointY = rightRevealPnts[i][2]
				bHasAnySillPoint = 1
			endif
		endif
	next i
	if bHasAnySillPoint then
		put -1	! last status
	endif

	nVertices1 = nsp/3
	for i=1 to nVertices1
		px = get(1)
		py = get(1)
		ps = get(1)
		vertarr1[i][1]	 = px
		vertarr1[i][2]	 = py
		vertarr1[i][3]	 = 0
		if bPolyFor3D then
			inhEdgeInfos1[i] = ps
		else
			inhEdgeInfos1[i] = 0	! Mark wallhole edges
		endif
	next i

	nContours1 = 1
	dim contArr1[]
	contArr1[1] = nVertices1 + 1

	if nVertices1 >= 2 then
		preparefunction ch, "Store", "wallHolePoly", nVertices1, nContours1, vertArr1, contArr1, defaultInhEdgeInfo, inhEdgeInfos1
	endif

	prevSourceContainer	= ""
	lastDestContainer	= "mySourceContainer"
	preparefunction ch, "SetDestinationContainer", lastDestContainer, ""

! Offset sill side edge --------------------------------------------------------

	if prevSourceContainer <> "" then
		preparefunction ch, "DeleteContainer",		prevSourceContainer, ""
	endif
	preparefunction ch, "SetSourceContainer",		lastDestContainer, ""
	prevSourceContainer	= lastDestContainer
	lastDestContainer	= "myDestContainer1"
	preparefunction ch, "CreateContainer",			lastDestContainer, ""
	preparefunction ch, "SetDestinationContainer",	lastDestContainer, ""

	preparefunction ch, "OffsetParams", "", 1, 0.50

	dim srcPolyIDArr[]
	numPoly = callfunction (ch, "GetSourcePolygons", "", srcPolyIDArr)

	dim tempResPolyIDArr[]
	for i=1 to numPoly
		tempNumPoly = callfunction (ch, "OffsetEdge", srcPolyIDArr[i], tempResPolyIDArr)
	next i

!!!dim resPolyIDArr[]
!!!numPoly = callfunction (ch, "GetDestinationPolygons", "", resPolyIDArr)
!!!
!!!for i = 1 to numPoly
!!!	polygonID = resPolyIDArr[i]
!!!	gosub 1000	! Get GDL Polygon
!!!
!!!	ccc=0
!!!	for j=1 to nsp/3
!!!		xx=get(1)
!!!		yy=get(1)
!!!		ss=get(1)
!!!		ccc=ccc+0.003
!!!		circle2 xx,yy,ccc
!!!		text2 xx,yy,j
!!!	next j
!!!next i
!!!end

! Store wall contour polygon in wallhole coordinate system ---------------------

	if prevSourceContainer <> "" then
		preparefunction ch, "DeleteContainer",		prevSourceContainer, ""
	endif
	preparefunction ch, "SetSourceContainer",		lastDestContainer, ""
	prevSourceContainer	= lastDestContainer
	lastDestContainer	= "myDestContainer2"
	preparefunction ch, "CreateContainer",			lastDestContainer, ""
	preparefunction ch, "SetDestinationContainer",	lastDestContainer, ""

	nVertices2 = vardim1(AC_WallContourPolygon)
	dim vertArr2[][3]

	dim srcPolyIDArr[]
	numPoly = callfunction (ch, "GetSourcePolygons", "", srcPolyIDArr)

	defaultInhEdgeInfo = 0
	dim inhEdgeInfos2[]

	for i=1 to nVertices2
		vertarr2[i][1] = AC_WallContourPolygon[i][1]
		if WIDO_REVEAL_SIDE then
			vertarr2[i][2] = AC_WallContourPolygon[i][2] + WIDO_FRAME_THICKNESS
			vertarr2[i][3] = AC_WallContourPolygon[i][3]
		else
			vertarr2[i][2] = -AC_WallContourPolygon[i][2]
			vertarr2[i][3] = -AC_WallContourPolygon[i][3]
		endif

		inhEdgeInfos2[i] = 1
	next i

	nContours2 = 1
	dim contArr2[]
	contArr2[1] = nVertices2 + 1

	preparefunction ch, "Store", "wallContourPoly", nVertices2, nContours2, vertArr2, contArr2, defaultInhEdgeInfo, inhEdgeInfos2

! Substract polygons -----------------------------------------------------------

	dim tempResPolyIDArr[]
	for i = 1 to numPoly
		tempNumPoly = callfunction (ch, "wallContourPoly - " + srcPolyIDArr[i], "", tempResPolyIDArr)
	next i

!! Regularize polygon(s) --------------------------------------------------------
!
!	if prevSourceContainer <> "" then
!		preparefunction ch, "DeleteContainer",		prevSourceContainer, ""
!	endif
!	preparefunction ch, "SetSourceContainer",		lastDestContainer, ""
!	prevSourceContainer	= lastDestContainer
!	lastDestContainer	= "myDestContainer3"
!	preparefunction ch, "CreateContainer",			lastDestContainer, ""
!	preparefunction ch, "SetDestinationContainer",	lastDestContainer, ""
!
!	dim srcPolyIDArr[]
!	numPoly = callfunction (ch, "GetSourcePolygons", "", srcPolyIDArr)
!
!	dim tempResPolyIDArr[]
!	for i=1 to numPoly
!		tempNumPoly = callfunction (ch, "Regularize", srcPolyIDArr[i], tempResPolyIDArr)
!	next i

	if bGetWallCutPolygons then
		return
	endif

! Store Sill polygon -----------------------------------------------------------

	sidelightCutPosLeft		= 0
	sidelightCutPosRight	= 0
	sidelightCutPosElevBodyLeft		= 0
	sidelightCutPosElevBodyRight	= 0

	if prevSourceContainer <> "" then
		preparefunction ch, "DeleteContainer",		prevSourceContainer, ""
	endif
	preparefunction ch, "SetSourceContainer",		lastDestContainer, ""
	prevSourceContainer	= lastDestContainer
	lastDestContainer	= "myDestContainer4"
	preparefunction ch, "CreateContainer",			lastDestContainer, ""
	preparefunction ch, "SetDestinationContainer",	lastDestContainer, ""

	dim srcPolyIDArr[]
	numPoly = callfunction (ch, "GetSourcePolygons", "", srcPolyIDArr)

	sillNosingY = min(leftRevealPnts[idxSillStartRevealLeft][2], rightRevealPnts[idxSillStartRevealRight][2]) - sillNosing

	sillOvhgLeft	= max(gs_sill_ovhg_left,	EPS)
	sillOvhgRight	= max(gs_sill_ovhg_right,	EPS)

	if sidelightCutLeft then
		put	sidelightCutPosLeft, sillNosingY,	2,
			sidelightCutPosLeft, 0,				2
	else
		put leftRevealPnts[idxSillStartRevealLeft][1] - not(gs_stack_left) * sillOvhgLeft,	sillNosingY,									2 * not(gs_stack_left),
			leftRevealPnts[idxSillStartRevealLeft][1] - not(gs_stack_left) * sillOvhgLeft,	not(gs_stack_left) * WIDO_FRAME_THICKNESS,		2 * bPolyFor3D
		if not(gs_stack_left) then
			put leftRevealPnts[idxSillStartRevealLeft][1],	0,	 2 * bPolyFor3D
		endif
	endif

	if abs(bSillNnosUsa) > EPS then	! Sill Negativ Nosing by USA Framesill
		put  leftRevealPnts[idxSillEndRevealLeft][1]  + frameWidthLeft,		 leftRevealPnts[idxSillEndRevealLeft][2],					0,
			 leftRevealPnts[idxSillEndRevealLeft][1]  + frameWidthLeft,		 leftRevealPnts[idxSillEndRevealLeft][2]  + bSillNnosUsa,	0,
			rightRevealPnts[idxSillEndRevealRight][1] - frameWidthRight,	rightRevealPnts[idxSillEndRevealRight][2] + bSillNnosUsa,	0,
			rightRevealPnts[idxSillEndRevealRight][1] - frameWidthRight,	rightRevealPnts[idxSillEndRevealRight][2],					0
	endif

	if sidelightCutRight then
		put	sidelightCutPosRight, 0,			2,
			sidelightCutPosRight, sillNosingY,	2
	else
		if not(gs_stack_right) then
			put rightRevealPnts[idxSillStartRevealRight][1],	0,	 2 * not(gs_stack_right)
		endif
		put	rightRevealPnts[idxSillStartRevealRight][1] + not(gs_stack_right) * sillOvhgRight,	not(gs_stack_right) * WIDO_FRAME_THICKNESS,	2 * not(gs_stack_right),
			rightRevealPnts[idxSillStartRevealRight][1] + not(gs_stack_right) * sillOvhgRight,	sillNosingY,								2
	endif

	dim vertArrSill[][3]
	dim inhEdgeInfosSill[]
	defaultInhEdgeInfo = 0

	for i=1 to nsp/3
		px = get(1)
		py = get(1)
		ps = round_int (get(1))

		vertarrSill[i][1]	= px
		vertarrSill[i][2]	= py
		vertarrSill[i][3]	= 0
		inhEdgeInfosSill[i]	= ps
	next i
	nVerticesSill = vardim1(vertarrSill)

	nContoursSill = 1
	dim contArrSill[]
	contArrSill[1] = nVerticesSill + 1

	if nVertices1 >= 2 then
		preparefunction ch, "Store", "sillPoly", nVerticesSill, nContoursSill, vertArrSill, contArrSill, defaultInhEdgeInfo, inhEdgeInfosSill
	endif

! Substract polygons -----------------------------------------------------------

	dim operandPolygonNames[]
		operandPolygonNames[1] = "sillPoly"
	numOperandPolygonNames = 1
	containerIdx = 10

	while numPoly > 0 do

		for i = 2 to numPoly
			tempNumPoly = callfunction (ch, "CopyPolygon", srcPolyIDArr[i], tempResPolyIDArr)
		next i
		lastNumPoly = numPoly - 1

		for i=1 to numOperandPolygonNames
			tempNumPoly = callfunction (ch, operandPolygonNames[i] + " - " + srcPolyIDArr[1], "", tempResPolyIDArr)
		next i

		numResPoly = tempNumPoly - lastNumPoly + 1

		dim resPolyIDArr[]
		tempNumPoly = callfunction (ch, "GetDestinationPolygons", "", resPolyIDArr)

		numOperandPolygonNames = tempNumPoly - lastNumPoly

		for i=1 to numOperandPolygonNames
			operandPolygonNames[i] = resPolyIDArr[lastNumPoly + i]
		next i

		numPoly = numPoly - 1

		if numPoly > 0 then
			if prevSourceContainer <> "" then
				preparefunction ch, "DeleteContainer",		prevSourceContainer, ""
			endif
			preparefunction ch, "SetSourceContainer",		lastDestContainer, ""
			prevSourceContainer	= lastDestContainer
			lastDestContainer	= "myDestContainer" + str(containerIdx, 1, 0)
			preparefunction ch, "CreateContainer",			lastDestContainer, ""
			preparefunction ch, "SetDestinationContainer",	lastDestContainer, ""
			containerIdx = containerIdx + 1
		endif
	endwhile
return


1:

! ==============================================================================
! NED Sill Types
! ==============================================================================

if iSillType = SILL_CERAMIC then
	if gs_sill_topWidth < EPS then gs_sill_topWidth = 0.03
	gs_sill_topHeight = gs_sill_thk - gs_sill_endthk
endif
if iSillType = SILL_ETHERNIT then
	if gs_sill_topWidth  < EPS then gs_sill_topWidth  = 0.01
	if gs_sill_topHeight < EPS then gs_sill_topHeight = 0.01
endif
if iSillType = SILL_ALUMINIUM then
	if gs_sill_topHeight < EPS then gs_sill_topHeight = 0.018
	thk = 0.002
	gs_sill_angle = atn((gs_sill_thk - gs_sill_topHeight) / (gs_sill_width - thk))
endif


! ==============================================================================
! CHE Sill Types
! ==============================================================================

!sillDetLev = 0	! Detailed Sill
!sillDetLev = 1	! Normal Sill
!sillDetLev = 1

if iSillType = SILL_SOLID_11 | iSillType = SILL_SOLID_12 | iSillType = SILL_SOLID_22 then
	gs_sill_topHeight = 0.01
	gs_sill_topWidth = 0.01
endif
if iSillType = SILL_METAL_1 then
	gs_sill_topHeight = 0.01
endif

if iSillType = SILL_SOLID_11 | iSillType = SILL_SOLID_12 | iSillType = SILL_SOLID_22 | iSillType = SILL_METAL_1 then
	gs_sill_slip_in = 0
endif

]]></Script_1D>

<!-- GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT -->

<Script_PR SectVersion="20" SectionFlags="0" SubIdent="0"><![CDATA[

]]></Script_PR>

<!-- GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT -->

<Script_UI SectVersion="20" SectionFlags="0" SubIdent="0"><![CDATA[

pageStartY = 12 + 30

! ==============================================================================
! --- INT Sill ---
! ==============================================================================

if bSillPage then

	x1 = 2
	x2 = 35
	x3 = 140
	x4 = 205
	y = pageStartY
	dy = 25
	cx = 40
	cy = 24
	px = 30
	py = 20

	ui_style 0,1

	bFlag = not(bHasAnySillOn)
	iFlag = 4 * bFlag

	numIcons = 0
	for i=1 to vardim1(stSillTypes)
		if bittest(gs_SillTypeEnable, i - 1) then numIcons = numIcons + 1
	next i

	if numIcons > 1 then
		ui_outfield stSillUI[2], x1+222, y, x3-x1-1, 15, iFlag		! Sill Type

		ui_infield{3} "iSillType", x3+222, y-4, cx, cy,
				2, 52,	! ui_sill_type.png
				17, 1,
				cx, cy, px, py,
				1,	stSillTypes[1], SILL_TIMBER,		! Timber Sill
				2,	stSillTypes[2], SILL_BRICK,			! Brick Sill
				3,	stSillTypes[3], SILL_STONE,			! Stone Sill
				4,	stSillTypes[4], SILL_CERAMIC,		! Ceramic Sill
				5,	stSillTypes[5], SILL_ETHERNIT,		! Eternite Sill
				6,	stSillTypes[6], SILL_CONCRETE_TUB,	! Concrete Tub
				7,	stSillTypes[7], SILL_ALUMINIUM,		! Aluminum Sill
				8,	stSillTypes[8], SILL_SOLID_11,		! Solid Sill 1.1 / Massiv-Fensterbank 1.1 (CHE)
				9,	stSillTypes[9], SILL_SOLID_12,		! Solid Sill 1.2 / Massiv-Fensterbank 1.2 (CHE)
				10,	stSillTypes[10], SILL_SOLID_22,		! Solid Sill 2.2 / Massiv-Fensterbank 2.2 (CHE)
				11,	stSillTypes[11], SILL_METAL_1,		! Metal Sheet / Metallfensterbank 1.1 (CHE)
				13,	stSillTypes[13], SILL_METAL_2,		! Metal Sheet 2 (CHE)
				12,	stSillTypes[12], SILL_PARALLEL,		! Solid Parallel (CHE)
				14,	stSillTypes[14], SILL_PARALLEL_2,	! Solid Parallel 2 (CHE)
				15,	stSillTypes[15], SILL_SIMPLEBLOCK,	! Simple Block
				16,	stSillTypes[16], SILL_BLOCK,		! Block Sill
				17,	stSillTypes[17], SILL_DUTCH			! Dutch Profiled Sill
	endif
	y = y + dy

	ui_style 0,0
	if iSillType = SILL_BRICK then
		ui_outfield stSillUI[14],          x1+222, y+4, x3-x1-1, 15, iFlag					! 3D Detail Level
		ui_infield{3} "iBrickSilldetlevel", x3+222, y,   75, 19,
						8, "", 1, 1,
						0, 0, 0, 0, 
						"", stBsilldetlevel[1], BRICKSILL_SIMPLE,	
						"", stBsilldetlevel[2], BRICKSILL_DETAILED ui_tooltip stSillUI[15] ! Sill Detail Level
	endif

	y = pageStartY

	ui_style 0,1
	if bDoorWithSidelightSupport then
		if iWindowShape = SHAPE_T | iWindowShape = SHAPE_ARCHED_T then
			ui_infield{3} "gs_sill_outside_sl_right", x1, y, x4-x1, 15,
				7, "",
				2,
				1, 20, 20, 20, 20,
				0, stSillUI[38], 0,		! Sill - Sidelight 1
				1, stSillUI[38], 1		! Sill - Sidelight 1
			y = y + dy

			ui_infield{3} "gs_sill_outside_sl_left", x1, y, x4-x1, 15,
				7, "",
				2,
				1, 20, 20, 20, 20,
				0, stSillUI[39], 0,		! Sill - Sidelight 2
				1, stSillUI[39], 1		! Sill - Sidelight 2
			y = y + dy
		else
			if iWindowShape = SHAPE_HALF_T_LEFT | iWindowShape = SHAPE_ARCHED_HALF_T_LEFT then
				ui_infield{3} "gs_sill_outside_sl_left", x1, y, x4-x1, 15,
					7, "",
					2,
					1, 20, 20, 20, 20,
					0, stSillUI[41], 0,		! Sill - Sidelight
					1, stSillUI[41], 1		! Sill - Sidelight
				y = y + dy
			else
				if iWindowShape = SHAPE_HALF_T_RIGHT | iWindowShape = SHAPE_ARCHED_HALF_T_RIGHT then
					ui_infield{3} "gs_sill_outside_sl_right", x1, y, x4-x1, 15,
						7, "",
						2,
						1, 20, 20, 20, 20,
						0, stSillUI[41], 0,		! Sill - Sidelight
						1, stSillUI[41], 1		! Sill - Sidelight
					y = y + dy
				endif
			endif
		endif

		ui_infield{3} "gs_sill_outside", x1, y, x4-x1, 15,
			7, "",
			2,
			1, 20, 20, 20, 20,
			0, stSillUI[40], 0,		! Sill - Door
			1, stSillUI[40], 1		! Sill - Door
		ui_separator x1,y+22,208,y+22
		y = y + 6
	else
		ui_infield{3} "gs_sill_outside", x1, y, x4-x1, 15,
				7, "",
				2,
				1, 20, 20, 20, 20,
				0, stSillUI[1], 0,		! Sill
				1, stSillUI[1], 1		! Sill
	endif
	y = y + dy

	ui_style 0,0
	if bShowSillOversize then
		if	iSillType = SILL_TIMBER | \
			iSillType = SILL_SOLID_11 | \
			iSillType = SILL_SOLID_12 | \
			iSillType = SILL_SOLID_22 | \
			iSillType = SILL_METAL_1 | \
			iSillType = SILL_PARALLEL | \
			iSillType = SILL_METAL_2 | \
			iSillType = SILL_PARALLEL_2 then

			ui_infield{3} "gs_sill_oversize", x1, y, x4-x1, 15,
					7, "",
					2,
					1, 20, 20, 20, 20,
					0, stSillUI[7], 0,			! Sill Oversize
					1, stSillUI[7], 1	\
					ui_tooltip stSillUI[16]
		endif
	endif

	y = y + dy

	if iSillType = SILL_TIMBER then

		ui_infield{3} "gs_sill_curved", x1, y, x4-x1, 15,
					7, "",
					2,
					1, 20, 20, 20, 20,
					0, stSillUI[6], 0,		! Is Curved in Curved Walls
					1, stSillUI[6], 1		! Is Curved in Curved Walls
	endif


	x1 = 40
	x2 = 110
	y = 85 + bDoorWithSidelightSupport * 45 + pageStartY

	if bHasAnySillOn & not(gs_stack_bottom) then
		ui_infield "gs_sill_ovhg_left",	x1, y,	60, 15		ui_tooltip stSillUI[3]		! Left Overhang
		ui_infield "gs_sill_ovhg_right",x2, y,	60, 15		ui_tooltip stSillUI[4]		! Right overhang

		if iSillType = SILL_BRICK & iBrickSilldetlevel = BRICKSILL_DETAILED then	! Brick Sill, Detailed
			y = y+20
			ui_pict 53, x1, y, 60, 18, 1				! ui_sill_leftovhg_2_br
			ui_pict 54, x2, y, 60, 18, 1				! ui_sill_rightovhg_2_br

			y = y+18
			if isWindow then		! Windows
				if iPanelType = 0 then
					ui_pict 55, x1, y, 60, 52, 1		! ui_sill_leftovhg_win0_br
					ui_pict 56, x2, y, 60, 52, 1		! ui_sill_rightovhg_win0_br
				endif
				if iPanelType = 1 then
					if not(bOpeningDirection) then	! Outside
						ui_pict 57, x1, y, 60, 52, 1	! ui_sill_leftovhg_win1_out_br
						ui_pict 58, x2, y, 60, 52, 1	! ui_sill_rightovhg_win1_out_br
					else
						ui_pict 59, x1, y, 60, 52, 1	! ui_sill_leftovhg_win1_in_br
						ui_pict 60, x2, y, 60, 52, 1	! ui_sill_rightovhg_win1_in_br
					endif
				endif
				if iPanelType = 2 then
					! Single Double Hung`s always inside direction
					ui_pict 63, x1, y, 60, 52, 1	! ui_sill_leftovhg_win2_in_br
					ui_pict 64, x2, y, 60, 52, 1	! ui_sill_rightovhg_win2_in_br
				endif
				if iPanelType = 3 then
					ui_pict 65, x1, y, 60, 52, 1		! ui_sill_leftovhg_win3_br
					ui_pict 66, x2, y, 60, 52, 1		! ui_sill_rightovhg_win3_br
				endif
			else
				if not(bOpeningDirection) then	! Outside
					ui_pict 165, x1, y, 60, 52, 1		! uiSillPlanLeftovhgDoorOutBr
					ui_pict 171, x2, y, 60, 52, 1		! uiSillPlanRightovhgDoorOutBr
				else
					ui_pict 162, x1, y, 60, 52, 1		! uiSillPlanLeftovhgDoorInBr
					ui_pict 168, x2, y, 60, 52, 1		! uiSillPlanRightovhgDoorInBr
				endif
			endif

			y = 30 + bDoorWithSidelightSupport * 50 + pageStartY
			ui_outfield stSillUI[17], x1-40, y, 110, 15, iFlag									! Brick Thickness
			ui_infield "gs_brick_sill_br_thk", x1+75, y, 60, 15		ui_tooltip stSillUI[17]		! Brick Thickness
			y = y + dy
			ui_outfield stSillUI[18], x1-40, y, 110, 15, iFlag									! Mortar Thickness
			ui_infield "gs_brick_sill_mort_thk", x1+75, y, 60, 15	ui_tooltip stSillUI[18]		! Mortar Thickness
		else
			y = y+20
			ui_pict 11, x1, y, 60, 18, 1				! ui_sill_leftovhg_2
			ui_pict 12, x2, y, 60, 18, 1				! ui_sill_rightovhg_2

			y = y+18
			if isWindow then		! Windows
				if iPanelType = 0 then
					ui_pict 13, x1, y, 60, 52, 1		! ui_sill_leftovhg_win0
					ui_pict 14, x2, y, 60, 52, 1		! ui_sill_rightovhg_win0
				endif
				if iPanelType = 1 then
					if not(bOpeningDirection) then	! Outside
						ui_pict 15, x1, y, 60, 52, 1	! ui_sill_leftovhg_win1_out
						ui_pict 16, x2, y, 60, 52, 1	! ui_sill_rightovhg_win1_out
					else
						ui_pict 17, x1, y, 60, 52, 1	! ui_sill_leftovhg_win1_in
						ui_pict 18, x2, y, 60, 52, 1	! ui_sill_rightovhg_win1_in
					endif
				endif
				if iPanelType = 2 then
					! Single Double Hung`s always inside direction
					ui_pict 21, x1, y, 60, 52, 1	! ui_sill_leftovhg_win2_in
					ui_pict 22, x2, y, 60, 52, 1	! ui_sill_rightovhg_win2_in
				endif
				if iPanelType = 3 then
					ui_pict 23, x1, y, 60, 52, 1		! ui_sill_leftovhg_win3
					ui_pict 24, x2, y, 60, 52, 1		! ui_sill_rightovhg_win3
				endif
			else
				if not(bOpeningDirection) then	! Outside
					ui_pict 164, x1, y, 60, 52, 1		! uiSillPlanLeftovhgDoorOut
					ui_pict 170, x2, y, 60, 52, 1		! uiSillPlanRightovhgDoorOut
				else
					ui_pict 161, x1, y, 60, 52, 1		! uiSillPlanLeftovhgDoorIn
					ui_pict 167, x2, y, 60, 52, 1		! uiSillPlanRightovhgDoorIn
				endif
			endif
		endif
	else
		y = y+38
		if isWindow then		! Windows
			if iPanelType = 0 then
				ui_pict 25, x1, y, 60, 52, 1			! ui_sill_leftovhg_win0_noboard
				ui_pict 26, x2, y, 60, 52, 1			! ui_sill_rightovhg_win0_noboard
			endif
			if iPanelType = 1 then
				if not(bOpeningDirection) then	! Outside
					ui_pict 27, x1, y, 60, 52, 1		! ui_sill_leftovhg_win1_out_noboard
					ui_pict 28, x2, y, 60, 52, 1		! ui_sill_rightovhg_win1_out_noboard

				else
					ui_pict 29, x1, y, 60, 52, 1		! ui_sill_leftovhg_win1_in_noboard
					ui_pict 30, x2, y, 60, 52, 1		! ui_sill_rightovhg_win1_in_noboard
				endif
			endif
			if iPanelType = 2 then
				! Single Double Hung`s always inside direction
				ui_pict 33, x1, y, 60, 52, 1		! ui_sill_leftovhg_win2_in_noboard
				ui_pict 34, x2, y, 60, 52, 1		! ui_sill_rightovhg_win2_in_noboard
			endif
			if iPanelType = 3 then
				ui_pict 35, x1, y, 60, 52, 1			! ui_sill_leftovhg_win3_noboard
				ui_pict 36, x2, y, 60, 52, 1			! ui_sill_rightovhg_win3_noboard
			endif
		else
			if not(bOpeningDirection) then	! Outside
				ui_pict 166, x1, y, 60, 52, 1			! uiSillPlanLeftovhgDoorOutNoboard
				ui_pict 172, x2, y, 60, 52, 1			! uiSillPlanRightovhgDoorOutNoboard

			else
				ui_pict 163, x1, y, 60, 52, 1			! uiSillPlanLeftovhgDoorInNoboard
				ui_pict 169, x2, y, 60, 52, 1			! uiSillPlanRightovhgDoorInNoboard
			endif
		endif
	endif

	ui_separator 210, pageStartY - 2, 210, 220 + pageStartY

	x3   = 288
	y    = 50 + isWindow * 8 + pageStartY
	xInf = 60
	yInf = 16
	dyInf = 0

	if isWindow then	! Windows
		yDW  = 37

		if (iSillType <> SILL_PARALLEL & iSillType <> SILL_PARALLEL_2) | not(bHasAnySillOn) | gs_stack_bottom then
			if iPanelType = 0 then
				ui_pict 37, x3+31, y, 94, yDW, 1			! uiSillSectWin0
			endif
			if iPanelType = 1 then
				if not(bOpeningDirection) then	! Outside
					ui_pict 38, x3+31, y, 94, yDW, 1		! uiSillSectWin1_out
				else
					ui_pict 39, x3+31, y, 94, yDW, 1		! uiSillSectWin1_in
				endif
			endif
			if iPanelType = 2 then
				! Single Double Hung`s always inside direction
				ui_pict 41, x3+31, y, 94, yDW, 1		! uiSillSectWin2_in
			endif
			if iPanelType = 3 then
				ui_pict 42, x3+31, y, 94, yDW, 1			! uiSillSectWin3
			endif
		endif
	else				! Doors
		yDW  = 37
		if (iSillType <> SILL_PARALLEL & iSillType <> SILL_PARALLEL_2) | not(bHasAnySillOn) | gs_stack_bottom then
			yD1 = 37
			yD2 = 21
			yDW = yD1 + yD2
			if iSillType = SILL_TIMBER then dyInf = 18
			if iSillType = SILL_DUTCH then
				ui_pict 179, x3+31, y, 94, yD1, 1			! uiSillSectDoor1wFrame
				ui_pict 180, x3, y+yD1, 125, yD2, 1			! uiSillSectDoor2wFrame
			else
				ui_pict 154, x3+31, y, 94, yD1, 1			! uiSillSectDoor1
				if iSillType <> SILL_STONE then	ui_pict 155, x3+31, y+yD1, 94, yD2, 1		! uiSillSectDoor2
			endif
		endif
	endif


	px1	= x3-xInf-5
	px2	= x3+19
	px3	= x3+31
	px4	= px3+xInf+5
	dy	= 5
	py1	= y + not(isWindow) * 2
	py2	= py1 + yInf + dy
	py3	= py2 + yInf + dy
	py4	= py3 + yInf + dy
	py5	= py4 + yInf + dy
	py6	= py5 + yInf + dy
	py7	= py6 + yInf + dy -37 + yDW - not(isWindow) * 2


	if bHasAnySillOn & not(gs_stack_bottom) then
		if iSillType = SILL_TIMBER | \
		   iSillType = SILL_BRICK | \
		   iSillType = SILL_STONE | \
		   iSillType = SILL_CERAMIC | \
		   iSillType = SILL_ETHERNIT | \
		   iSillType = SILL_DUTCH then
				ui_pict 43, 				x3,  py1-5, 31,   23,		1							! ui_sill_angle
				ui_infield "gs_sill_angle",	px1, py1,    xInf, yInf		ui_tooltip stSillUI[19]		! Sill Angle
		endif

		if iSillType = SILL_TIMBER then
			ui_pict 133, x3,    y+yDW, 82, 85, 1			! uiSillSect01Timber
			ui_pict 151, x3+82, y+yDW, 43, 85, 1			! uiSillSectBottomW1
			ui_infield "gs_sill_thk",    px1, py3+dyInf, xInf, yInf	ui_tooltip stSillUI[20]		! Sill Thickness
			ui_infield "gs_sill_nosing", px1, py4+dyInf, xInf, yInf	ui_tooltip stSillUI[21]		! Sill Nosing
			ui_infield "gs_sill_elev",   px1, py5+dyInf, xInf, yInf	ui_tooltip stSillUI[23]		! Sill Elevation
			ui_infield "gs_sill_width",  px2, py7,       xInf, yInf	ui_tooltip stSillUI[22]		! Sill Width
		endif
		if iSillType = SILL_BRICK then
			if isWindow then
				ui_pict 135, x3, y+yDW, 125, 85, 1			! uiSillSect02BrickW
			else
				ui_pict 134, x3, y+yDW, 125, 85, 1			! uiSillSect02BrickD
				ui_pict 160, x3, y+50,  31,  10, 1			! uiSillSectArrowForBrickD
			endif
			ui_infield "gs_sill_nosing", px1, py3, xInf, yInf	ui_tooltip stSillUI[21]		! Sill Nosing
			ui_infield "gs_sill_thk",    px1, py5, xInf, yInf	ui_tooltip stSillUI[20]		! Sill Thickness
			ui_infield "gs_sill_width",  px1, py6, xInf, yInf	ui_tooltip stSillUI[22]		! Sill Width
		endif

		if iSillType = SILL_DUTCH then
			if isWindow then
				ui_pict 181, x3, y+yDW, 125, 85, 1														! uiSillSect16DutchSillW
				offy = 8
			else
				ui_pict 177, x3, y+yDW, 125, 85, 1														! uiSillSect16DutchSillD
				offy = 10
			endif
			ui_infield "gs_sill_nosing",	px1, py2 + offy, xInf, yInf		ui_tooltip stSillUI[21]		! Sill Nosing
			ui_infield "gs_sill_topHeight",	px1, py3 + offy, xInf, yInf		ui_tooltip stSillUI[36]		! Sill Top Height
			ui_infield "gs_sill_endthk",	px1, py4 + offy, xInf, yInf		ui_tooltip stSillUI[24]		! Sill End Thickness
			ui_infield "gs_sill_topWidth",	px1, py5 + offy, xInf, yInf		ui_tooltip stSillUI[35]		! Sill Top Depth
			ui_infield "gs_sill_width",		px1, py6 + offy, xInf, yInf		ui_tooltip stSillUI[22]		! Sill Width
			ui_infield "gs_sill_thk",		px4, py7, xInf, yInf			ui_tooltip stSillUI[20]		! Sill Thickness
		endif

		if iSillType = SILL_STONE | iSillType = SILL_ETHERNIT then
			if iSillType = SILL_STONE then
				if isWindow then
					ui_pict 137, x3, y+yDW, 125, 85, 1		! uiSillSect03StoneW
				else
					ui_pict 136, x3, y+yD1, 125, 106, 1		! uiSillSect03StoneD
				endif
				offy = 0
			else
				ui_pict 139, x3, y+yDW, 125, 85, 1			! uiSillSect05EternitW
				offy = 19*not(isWindow)
			endif
			ui_infield "gs_sill_topWidth", px1, py3 + offy, xInf, yInf	ui_tooltip stSillUI[35]		! Sill Top Width
			ui_infield "gs_sill_thk",      px1, py4 + offy, xInf, yInf	ui_tooltip stSillUI[20]		! Sill Thickness
			ui_infield "gs_sill_width",    px1, py5 + offy, xInf, yInf	ui_tooltip stSillUI[22]		! Sill Width
			ui_infield "gs_sill_nosing",   px1, py6 + offy, xInf, yInf	ui_tooltip stSillUI[21]		! Sill Nosing
		endif

		if iSillType = SILL_CERAMIC then
			offy = 19*not(isWindow)
			ui_pict 138, x3, y+yDW, 125, 85, 1				! uiSillSect04CeramicW
			ui_infield "gs_sill_nosing", px1, py3 + offy, xInf, yInf	ui_tooltip stSillUI[21]		! Sill Nosing
			ui_infield "gs_sill_thk",    px1, py5 + offy, xInf, yInf	ui_tooltip stSillUI[20]		! Sill Thickness
			ui_infield "gs_sill_width",  px1, py6 + offy, xInf, yInf	ui_tooltip stSillUI[22]		! Sill Width
		endif

		if iSillType = SILL_CONCRETE_TUB then
			offy = 19*not(isWindow)
			ui_pict 140, x3, y+yDW, 125, 85, 1				! uiSillSect06ConcreteW
			ui_infield "gs_sill_nosing", px1, py3 + offy, xInf, yInf	ui_tooltip stSillUI[21]		! Sill Nosing
			ui_infield "gs_sill_thk",    px1, py4 + offy, xInf, yInf	ui_tooltip stSillUI[20]		! Sill Thickness
			ui_infield "gs_sill_width",  px1, py6 + offy, xInf, yInf	ui_tooltip stSillUI[22]		! Sill Width
		endif

		if iSillType = SILL_ALUMINIUM then
			offy = 19*not(isWindow)
			ui_pict 141, x3, y+yDW, 125, 85, 1				! uiSillSect07AluminiumW
			ui_infield "gs_sill_nosing", px1, py3 + offy, xInf, yInf	ui_tooltip stSillUI[21]		! Sill Nosing
			ui_infield "gs_sill_thk",    px1, py4 + offy, xInf, yInf	ui_tooltip stSillUI[20]		! Sill Thickness
			ui_infield "gs_sill_width",  px1, py6 + offy, xInf, yInf	ui_tooltip stSillUI[22]		! Sill Width
		endif

		if iSillType = SILL_SOLID_11 | iSillType = SILL_SOLID_12 then
			if iSillType = SILL_SOLID_11 then
				ui_pict 142, x3,    y+yDW, 82, 85, 1		! uiSillSect08Solid1
			else
				ui_pict 143, x3,    y+yDW, 82, 85, 1		! uiSillSect09Solid2
			endif
			if isWindow then
				if iSillType = SILL_SOLID_11 then
					ui_pict 152, x3+82, y+yDW, 43, 85, 1		! uiSillSectBottomW2
				else
					ui_pict 153, x3+82, y+yDW, 43, 85, 1		! uiSillSectBottomW3
				endif
			else
				if iThresholdType = THRESHOLD_BLIND then
					ui_pict 149, x3+82, y+yDW, 43, 85, 1	! uiSillSectBottomD2
				else
					ui_pict 150, x3+82, y+yDW, 43, 85, 1	! uiSillSectBottomD3
				endif
			endif
			ui_pict 156, x3,    y+5+yD2,   31, 32, 1		! uiSillSectArrowForSolid
			yD2 = yD2 - not(isWindow) * 2
			ui_infield "gs_sill_nosing", px1, py1+yD2, xInf, yInf	ui_tooltip stSillUI[21]		! Sill Nosing
			ui_infield "gs_sill_thk",    px1, py2+yD2, xInf, yInf	ui_tooltip stSillUI[20]		! Sill Thickness
			ui_infield "gs_sill_endthk", px1, py4+yD2, xInf, yInf	ui_tooltip stSillUI[24]		! Sill End Thickness
			ui_infield "gs_sill_elev",   px1, py5+yD2, xInf, yInf	ui_tooltip stSillUI[23]		! Sill Elevation
			ui_infield "gs_sill_width",  px2, py7,     xInf, yInf	ui_tooltip stSillUI[22]		! Sill Width
		endif

		if iSillType = SILL_SOLID_22 then
			offy = 19*not(isWindow)
			ui_pict 144, x3,    y+yDW, 82, 85, 1			! uiSillSect10Solid3
			ui_pict 152, x3+82, y+yDW, 43, 85, 1			! uiSillSectBottomW2
			ui_pict 157, x3,    y+5 + 21*not(isWindow),   31, 32, 1			! uiSillSectArrowForSolid2
			ui_infield "gs_sill_nosing",    px1, py1 + offy, xInf, yInf	ui_tooltip stSillUI[21]		! Sill Nosing
			ui_infield "gs_sill_thk",       px1, py2 + offy, xInf, yInf	ui_tooltip stSillUI[20]		! Sill Thickness
			ui_infield "gs_sill_endthk",    px1, py3 + offy, xInf, yInf	ui_tooltip stSillUI[24]		! Sill End Thickness
			ui_infield "gs_sill_dripnos",   px1, py4 + offy, xInf, yInf	ui_tooltip stSillUI[25]		! Sill Drip Length
			ui_infield "gs_sill_dripwidth", px1, py5 + offy, xInf, yInf	ui_tooltip stSillUI[26]		! Sill Drip Width
			ui_infield "gs_sill_elev",      px1, py6 + offy, xInf, yInf	ui_tooltip stSillUI[23]		! Sill Elevation
			ui_infield "gs_sill_width",     px2, py7 + offy, xInf, yInf	ui_tooltip stSillUI[22]		! Sill Width
		endif

		if iSillType = SILL_METAL_1 | iSillType = SILL_METAL_2 then
			if iSillType = SILL_METAL_1 then
				ui_pict 145, x3,    y+yDW, 82, 85, 1		! uiSillSect11Metal1
			else
				ui_pict 146, x3,    y+yDW, 82, 85, 1		! uiSillSect13Metal2
			endif
			if isWindow then
				ui_pict 151, x3+82, y+yDW, 43, 85, 1		! uiSillSectBottomW1
			else
				if iThresholdType = THRESHOLD_BLIND then
					ui_pict 148, x3+82, y+yDW, 43, 85, 1	! uiSillSectBottomD1
				else
					ui_pict 150, x3+82, y+yDW, 43, 85, 1	! uiSillSectBottomD3
				endif
			endif
			ui_pict 158, x3,    y+6+yD2,   31, 31, 1		! uiSillSectArrowForMetal
			yD2 = yD2 - not(isWindow) * 2
			ui_infield "gs_sill_nosing",  px1, py1+yD2, xInf, yInf	ui_tooltip stSillUI[21]		! Sill Nosing
			ui_infield "gs_sill_endthk",  px1, py3+yD2, xInf, yInf	ui_tooltip stSillUI[24]		! Sill Elevation
			ui_infield "gs_sill_dripnos", px1, py4+yD2, xInf, yInf	ui_tooltip stSillUI[25]		! Sill Drip Length
			ui_infield "gs_sill_thk",     px1, py5+yD2, xInf, yInf	ui_tooltip stSillUI[20]		! Sill Thickness
			ui_infield "gs_sill_width",   px2, py7, xInf,     yInf	ui_tooltip stSillUI[22]		! Sill Width
		endif

		if iSillType = SILL_SIMPLEBLOCK then
			if isWindow then
				ui_pict 147, x3, y+yDW, 125, 85, 1				! uiSillSect15SimpleBlockW
				ui_pict 159, x3, y+27,  31,  10, 1				! uiSillSectArrowForSBlock
			else
				ui_pict 176, x3, y+yDW, 125, 85, 1				! uiSillSect15SimpleBlockW
				ui_pict 178, x3, y+7+yD2,   31, 31, 1			! uiSillSectArrowForSBlockD
			endif
			ui_infield "gs_sill_nosing", px1, py2, xInf, yInf	ui_tooltip stSillUI[21]		! Sill Nosing
			ui_infield "gs_sill_thk",    px1, py4, xInf, yInf	ui_tooltip stSillUI[20]		! Sill Thickness
			ui_infield "gs_sill_width",  px1, py6, xInf, yInf	ui_tooltip stSillUI[22]		! Sill Width
		endif

		if	iSillType = SILL_BRICK | \
			iSillType = SILL_STONE | \
			iSillType = SILL_CERAMIC | \
			iSillType = SILL_ETHERNIT  | \
			iSillType = SILL_CONCRETE_TUB | \
			iSillType = SILL_ALUMINIUM | \
			iSillType = SILL_SIMPLEBLOCK then
				ui_infield "gs_sill_slip_in",         px3, py7, xInf, yInf	ui_tooltip stSillUI[5]	! Slip In Depth
				ui_infield "gs_sill_holeDepthBehind", px4, py7, xInf, yInf	ui_tooltip stSillUI[34]	! Sill Width
		endif

		if iSillType = SILL_PARALLEL then
			if not(bOpeningDirection) then	! Outside
				ui_pict 69, x3, y, 125, 122, 1				!ui_sill_12_solidparalel_winout
			else
				ui_pict 70, x3, y, 125, 122, 1				!ui_sill_12_solidparalel_winin
			endif
			ui_pict 43, x3, y-23, 31, 23, 1					!ui_sill_angle

			ui_infield "gs_sill_angle", x3-65, y-20, 60, 15			ui_tooltip stSillUI[19]		! Sill Angle
			ui_infield "gs_sill_width", x3-65, y+15, 60, 15			ui_tooltip stSillUI[22]		! Sill Width
			ui_infield "gs_sill_element_thk", x3-65, y+50, 60, 15	ui_tooltip stSillUI[20]		! Sill Thickness
			ui_infield "gs_sill_thk", x3-65, y+70, 60, 15			ui_tooltip stSillUI[30]		! Sill Height
			ui_infield "gs_sill_nosing", x3-65, y+90, 60, 15		ui_tooltip stSillUI[21]		! Sill Nosing

			ui_outfield stSillUI[31], x3-65, y+130, 105, 18		! Outer edge
			ui_infield "gs_sill_edge", x3+45, y+130, 110, 18
		endif

		if iSillType = SILL_PARALLEL_2 then
			if gs_mountingFrame then
				if not(bOpeningDirection) then	! Outside
					ui_pict 130, x3, y, 125, 122, 1				!ui_sill_14_solidparalel2_blindframe_winout
				else
					ui_pict 129, x3, y, 125, 122, 1				!ui_sill_14_solidparalel2_blindframe_winin
				endif
			else
				if gs_reveal_bottom < EPS then
					if not(bOpeningDirection) then	! Outside
						ui_pict 128, x3, y, 118, 131, 1			!ui_sill_14_solidparalel2_withoutbottomreveal_winout
					else
						ui_pict 127, x3, y, 118, 131, 1			!ui_sill_14_solidparalel2_withoutbottomreveal_winin
					endif
				else
					if gs_sill_ins_below then
						if not(bOpeningDirection) then	! Outside
							ui_pict 126, x3, y, 118, 122, 1		!ui_sill_14_solidparalel2_winout
						else
							ui_pict 125, x3, y, 118, 122, 1		!ui_sill_14_solidparalel2_winin
						endif
					else
						if not(bOpeningDirection) then	! Outside
							ui_pict 132, x3, y, 118, 122, 1		!ui_sill_14_solidparalel2_withoutinsulation_winout
						else
							ui_pict 131, x3, y, 118, 122, 1		!ui_sill_14_solidparalel2_withoutinsulation_winin
						endif
					endif
				endif
			endif
			ui_infield "gs_sill_width", x3-65, y+57, 60, 15			ui_tooltip stSillUI[22]		! Sill Width
			ui_infield "gs_sill_element_thk", x3-65, y+77, 60, 15	ui_tooltip stSillUI[20]		! Sill Thickness
			ui_infield "gs_sill_nosing", x3-65, y+107, 60, 15		ui_tooltip stSillUI[21]		! Sill Nosing

			ui_infield{3} "gs_sill_ins_below", x3-65, y+127, 200, 15,
						7, "",
						2,
						1, 20, 20, 20, 20,
						0, stSillUI[32], 0,		! Insulation below Sill
						1, stSillUI[32], 1		! Insulation below Sill

			ui_outfield stSillUI[31], x3-65, y+146, 105, 15			! Outer edge
			ui_infield "gs_sill_edge", x3+45, y+146, 110, 18
		endif
	else
		ui_pict 51, x3, y+yDW, 125, 85, 1		! uiSillSect00NoSill
	endif
endif


! ==============================================================================
! --- USA Sill ---
! ==============================================================================

if bSillPageUSA then
	downx=120
	downy=pageStartY
	casd=24
	sy=185
	stx=80
	stx3=70

	ui_style 0,1
	ui_infield{3} "gs_sill_outside", downx-stx-5, downy, stx3, 18,
		7, "",
		2,
		1, 20, 20, 20, 20,
		0, stSillUI[1], 0,
		1, stSillUI[1], 1

	ui_infield{3} "gs_board_inside", downx+242, downy, stx3, 18,
		7, "",
		2,
		1, 20, 20, 20, 20,
		0, stBoardUI[1], 0,
		1, stBoardUI[1], 1
	if not(gs_metal) & (gs_win_type < 73 | gs_win_type = 82) & not(gs_win_type = 58 | gs_win_type = 59 | gs_win_type = 60) then
		ui_infield{3} "gs_apron", downx+242, downy+casd, stx3, 18,
			7, "",
			2,
			1, 20, 20, 20, 20,
			0, stSillTextUSA[6], 0,
			1, stSillTextUSA[6], 1
	endif
	ui_style 0,0

	tto=18
	sy=-5

	if not(gs_metal) then
		if not(gs_fsill) then
			if gs_wt_m = 1 then
				if not(gs_sill_outside) & not(gs_trim_outside)	then ui_pict 74,downx,downy, 34, 110, 1		! "usw_sill_solid_fsill0_sill0_cas0"
				if not(gs_sill_outside) & gs_trim_outside		then ui_pict 75,downx,downy, 34, 110, 1		! "usw_sill_solid_fsill0_sill0_cas1"
				if gs_sill_outside & not(gs_trim_outside)		then ui_pict 76,downx,downy, 34, 110, 1		! "usw_sill_solid_fsill0_sill1_cas0"
				if gs_sill_outside & gs_trim_outside			then ui_pict 77,downx,downy, 34, 110, 1		! "usw_sill_solid_fsill0_sill1_cas1"

				if gs_sill_outside then
					ui_pict 101,downx+34,downy, 44, 110, 1		! "usw_sill_solid_fsill0"
				else
					ui_pict 173,downx+34,downy, 44, 110, 1		! "usw_sill_solid_fsill0_nosill"
				endif
			endif
			if gs_wt_m = 2 then
				if not(gs_sill_outside) & not(gs_trim_outside)	then ui_pict 78,downx,downy, 34, 110, 1		! "usw_sill_stud_fsill0_sill0_cas0"
				if not(gs_sill_outside) & gs_trim_outside		then ui_pict 79,downx,downy, 34, 110, 1		! "usw_sill_stud_fsill0_sill0_cas1"
				if gs_sill_outside & not(gs_trim_outside)		then ui_pict 80,downx,downy, 34, 110, 1		! "usw_sill_stud_fsill0_sill1_cas0"
				if gs_sill_outside & gs_trim_outside			then ui_pict 81,downx,downy, 34, 110, 1		! "usw_sill_stud_fsill0_sill1_cas1"

				if gs_sill_outside then
					ui_pict 102,downx+34,downy, 44, 110, 1		! "usw_sill_comp_fsill0"
				else
					ui_pict 174,downx+34,downy, 44, 110, 1		! "usw_sill_comp_fsill0_nosill"
				endif
			endif
			if gs_wt_m = 3 then
				if not(gs_sill_outside) & not(gs_trim_outside)	then ui_pict 82,downx,downy, 34, 110, 1		! "usw_sill_studws_fsill0_sill0_cas0"
				if not(gs_sill_outside) & gs_trim_outside		then ui_pict 83,downx,downy, 34, 110, 1		! "usw_sill_studws_fsill0_sill0_cas1"
				if gs_sill_outside & not(gs_trim_outside)		then ui_pict 84,downx,downy, 34, 110, 1		! "usw_sill_studws_fsill0_sill1_cas0"
				if gs_sill_outside & gs_trim_outside			then ui_pict 85,downx,downy, 34, 110, 1		! "usw_sill_studws_fsill0_sill1_cas1"

				if gs_sill_outside then
					ui_pict 102,downx+34,downy, 44, 110, 1		! "usw_sill_comp_fsill0"
				else
					ui_pict 174,downx+34,downy, 44, 110, 1		! "usw_sill_comp_fsill0_nosill"
				endif
			endif
			if gs_wt_m = 4 then
				if not(gs_sill_outside)	then ui_pict 86,downx,downy, 34, 110, 1		! "usw_sill_brickv_fsill0_sill0_cas1"
				if gs_sill_outside		then ui_pict 87,downx,downy, 34, 110, 1		! "usw_sill_brickv_fsill0_sill1_cas1"

				if gs_sill_outside then
					ui_pict 102,downx+34,downy, 44, 110, 1		! "usw_sill_comp_fsill0"
				else
					ui_pict 174,downx+34,downy, 44, 110, 1		! "usw_sill_comp_fsill0_nosill"
				endif
			endif
		endif

		if gs_fsill then
			if gs_wt_m = 1 then
				if not(gs_sill_outside) & not(gs_trim_outside)	then ui_pict 88,downx,downy, 34, 110, 1		! "usw_sill_solid_fsill1_sill0_cas0"
				if not(gs_sill_outside) & gs_trim_outside 		then ui_pict 89,downx,downy, 34, 110, 1		! "usw_sill_solid_fsill1_sill0_cas1"
				if gs_sill_outside & not(gs_trim_outside) 		then ui_pict 90,downx,downy, 34, 110, 1		! "usw_sill_solid_fsill1_sill1_cas0"
				if gs_sill_outside & gs_trim_outside 			then ui_pict 91,downx,downy, 34, 110, 1		! "usw_sill_solid_fsill1_sill1_cas1"

				ui_pict 103,downx+34,downy, 44, 110, 1		! "usw_sill_solid_fsill1"
			endif
			if gs_wt_m = 2 then
				if not(gs_sill_outside) & not(gs_trim_outside)	then ui_pict 175,downx,downy, 34, 110, 1	! "usw_sill_stud_fsill1_sill0_cas0"
				if not(gs_sill_outside) & gs_trim_outside 		then ui_pict 92,downx,downy, 34, 110, 1		! "usw_sill_stud_fsill1_sill0_cas1"
				if gs_sill_outside & not(gs_trim_outside) 		then ui_pict 93,downx,downy, 34, 110, 1		! "usw_sill_stud_fsill1_sill1_cas0"
				if gs_sill_outside & gs_trim_outside 			then ui_pict 94,downx,downy, 34, 110, 1		! "usw_sill_stud_fsill1_sill1_cas1"

				ui_pict 104,downx+34,downy, 44, 110, 1		! "usw_sill_comp_fsill1"
			endif
			if gs_wt_m = 3 then
				if not(gs_sill_outside) & not(gs_trim_outside)	then ui_pict 95,downx,downy, 34, 110, 1		! "usw_sill_studws_fsill1_sill0_cas0"
				if not(gs_sill_outside) & gs_trim_outside 		then ui_pict 96,downx,downy, 34, 110, 1		! "usw_sill_studws_fsill1_sill0_cas1"
				if gs_sill_outside & not(gs_trim_outside) 		then ui_pict 97,downx,downy, 34, 110, 1		! "usw_sill_studws_fsill1_sill1_cas0"
				if gs_sill_outside & gs_trim_outside 			then ui_pict 98,downx,downy, 34, 110, 1		! "usw_sill_studws_fsill1_sill1_cas1"

				ui_pict 104,downx+34,downy, 44, 110, 1		! "usw_sill_comp_fsill1"
			endif
			if gs_wt_m = 4 then
				if not(gs_sill_outside)	then ui_pict 99,downx,downy, 34, 110, 1			! "usw_sill_brickv_fsill1_sill0_cas1"
				if gs_sill_outside 		then ui_pict 100,downx,downy, 34, 110, 1		! "usw_sill_brickv_fsill1_sill1_cas1"

				ui_pict 104,downx+34,downy, 44, 110, 1		! "usw_sill_comp_fsill1"
			endif
		endif

		if gs_wt_m = 1 then
			if not(gs_board_inside) & not(gs_apron)	then ui_pict 105,downx+78,downy, 62, 110, 1		! "usw_sill_solid_st0_ap0"
			if not(gs_board_inside) & gs_apron 		then ui_pict 106,downx+78,downy, 62, 110, 1		! "usw_sill_solid_st0_ap1"
			if gs_board_inside & not(gs_apron) 		then ui_pict 107,downx+78,downy, 62, 110, 1		! "usw_sill_solid_st1_ap0"
			if gs_board_inside & gs_apron			then ui_pict 108,downx+78,downy, 62, 110, 1		! "usw_sill_solid_st1_ap1"
		else
			if not(gs_board_inside) & not(gs_apron)	then ui_pict 109,downx+78,downy, 62, 110, 1		! "usw_sill_comp_st0_ap0"
			if not(gs_board_inside) & gs_apron		then ui_pict 110,downx+78,downy, 62, 110, 1		! "usw_sill_comp_st0_ap1"
			if gs_board_inside & not(gs_apron)		then ui_pict 111,downx+78,downy, 62, 110, 1		! "usw_sill_comp_st1_ap0"
			if gs_board_inside & gs_apron			then ui_pict 112,downx+78,downy, 62, 110, 1		! "usw_sill_comp_st1_ap1"
		endif

	endif

	if gs_metal then		! Metal Windows

		if gs_wt_m = 1 then
			if not(gs_sill_outside) & not(gs_board_inside)	then ui_pict 113,downx,downy, 140, 110, 1		! "usmw_sill_solid_sill0_st0"
			if gs_sill_outside & not(gs_board_inside)		then ui_pict 114,downx,downy, 140, 110, 1		! "usmw_sill_solid_sill1_st0"
			if not(gs_sill_outside) & gs_board_inside		then ui_pict 115,downx,downy, 140, 110, 1		! "usmw_sill_solid_sill0_st1"
			if gs_sill_outside & gs_board_inside 			then ui_pict 116,downx,downy, 140, 110, 1		! "usmw_sill_solid_sill1_st1"
		endif
		if gs_wt_m=2 then
			if not(gs_sill_outside) & not(gs_board_inside)	then ui_pict 117,downx,downy, 140, 110, 1		! "usmw_sill_stud_sill0_st0"
			if gs_sill_outside & not(gs_board_inside) 		then ui_pict 118,downx,downy, 140, 110, 1		! "usmw_sill_stud_sill1_st0"
			if not(gs_sill_outside) & gs_board_inside		then ui_pict 119,downx,downy, 140, 110, 1		! "usmw_sill_stud_sill0_st1"
			if gs_sill_outside & gs_board_inside			then ui_pict 120,downx,downy, 140, 110, 1		! "usmw_sill_stud_sill1_st1"
		endif
		if gs_wt_m=4 then
			if not(gs_sill_outside) & not(gs_board_inside)	then ui_pict 121,downx,downy, 140, 110, 1		! "usmw_sill_brickv_sill0_st0"
			if gs_sill_outside & not(gs_board_inside)		then ui_pict 122,downx,downy, 140, 110, 1		! "usmw_sill_brickv_sill1_st0"
			if not(gs_sill_outside) & gs_board_inside		then ui_pict 123,downx,downy, 140, 110, 1		! "usmw_sill_brickv_sill0_st1"
			if gs_sill_outside & gs_board_inside			then ui_pict 124,downx,downy, 140, 110, 1		! "usmw_sill_brickv_sill1_st1"
		endif

	endif

	dy = 0

	if gs_board_inside & not(gs_stack_bottom) then
		ui_infield "gs_board_nosing",downx+145,downy, stx,0						ui_tooltip stSillTextUSA[11]
		ui_infield "gs_board_thk",downx+145,downy+30, stx,0						ui_tooltip stSillTextUSA[12]
	endif
	if gs_apron & not(gs_stack_bottom) then
		ui_infield "gs_apron_width",downx+145,downy+62, stx,0					ui_tooltip stSillTextUSA[13]
		if gs_apron then ui_infield "gs_apron_thk",downx+145,downy+92, stx,0	ui_tooltip stSillTextUSA[14]
	endif

	downy=28 + pageStartY
	downd=21

	if gs_sill_outside & not(gs_stack_bottom) then
		ui_infield "gs_sill_angle",downx-stx-5, downy, stx, 0					ui_tooltip stSillTextUSA[15]
		dy = dy + downd
		if	gs_win_type = 83 |\		! WIN_METAL_CURVED
			gs_win_type = 58 |\		! WIN_BOW
			gs_win_type = 59 |\		! WIN_SPLAYBAY
			gs_win_type = 60 then	! WIN_SQUAREBAY

			ui_infield "gs_sill_thk",downx-stx-5, downy+dy, stx, 0				ui_tooltip stSillTextUSA[16]
		endif
		ui_infield "gs_sill_nosing",downx-stx-5,downy+downd*3, stx,0			ui_tooltip stSillTextUSA[17]
	endif

	if gs_trim_outside & gs_wt_m<4 then
		ui_infield "gs_tw_bottom_out",downx-stx-5,downy+downd*2, stx,0			ui_tooltip stSillTextUSA[18]
	endif



	casd=24
	stx=65
	stx2=220
	stx3=150
	sy=125 + pageStartY
	if gs_sill_outside & not(gs_stack_bottom) & gs_wt_m <> 4 then
		ui_outfield stSillTextUSA[2], stx2, sy, stx3, 13
		ui_infield "gs_sill_ovhg_left", stx2+stx3+2, sy-2, stx, 20
		sy = sy + casd
		ui_outfield stSillTextUSA[3], stx2, sy, stx3, 13
		ui_infield "gs_sill_ovhg_right", stx2+stx3+2, sy-2, stx, 20
		sy = sy + casd
	endif
	if gs_board_inside & not(gs_stack_bottom) then
		ui_outfield stSillTextUSA[4], stx2, sy, stx3, 13
		ui_infield "gs_board_ovhg_left", stx2+stx3+2, sy-2, stx, 20
		sy = sy + casd
		ui_outfield stSillTextUSA[5], stx2, sy, stx3, 13
		ui_infield "gs_board_ovhg_right", stx2+stx3+2, sy-2, stx, 20
		sy = sy + casd

		if gs_fsill=1 then
			ui_outfield stSillTextUSA[7], stx2, sy, stx3, 13
			ui_infield "gs_rebw_lower", stx2+stx3+2, sy-2, stx, 20
			sy = sy + casd
		endif
	endif


	casd=24
	stx2=20
	stx3=150
	sy=135 + pageStartY
	ui_infield{3} "gs_sill_curved", stx2, sy, stx3, 18,
		7, "",
		2,
		1, 20, 20, 20, 20,
		0, stSillTextUSA[8], 0,
		1, stSillTextUSA[8], 1
	sy = sy + casd
	ui_infield{3} "gs_board_curved", stx2, sy, stx3, 18,
		7, "",
		2,
		1, 20, 20, 20, 20,
		0, stSillTextUSA[9], 0,
		1, stSillTextUSA[9], 1
	sy = sy + casd
	if gs_stack_bottom=0 & not(gs_metal) & gs_win_type < 73 & (gs_win_type < 58 | gs_win_type > 60) then
		ui_infield{3} "gs_fsill", stx2, sy, stx3, 18,
			7, "",
			2,
			1, 20, 20, 20, 20,
			0, stSillTextUSA[1], 0,
			1, stSillTextUSA[1], 1
		sy = sy + casd
	endif
endif


]]></Script_UI>

<!-- GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT -->

<Script_VL SectVersion="20" SectionFlags="0" SubIdent="0"><![CDATA[

! Contact person: <NJ>

! ==============================================================================
! This macro draws the Sill
! ------------------------------------------------------------------------------
! Input parameters:
!	A:						Window nominal width (length)
!	B:						Window nominal height (length)
!	gs_IsCurved:			Does the window follow the curvature of the wall? (0 / 1)
!	iWindowShape:			Shape of the window (integer)
!								0 = rectangular (default)
!								1 = arched
!							Note: only the rectangular shape can be a Corner Window
! Corner Function --------------------------------------------------------------
!	bLeftCornerFunction:		Turn macro in Corner Window mode at the left side (0 / 1)
!	leftCornerAngle:		Angle between connected walls in case of Corner Window (angle)
!	leftConnWallThk:		Thickness of the connected wall in case of Corner Window (length)
!	bRightCornerFunction:	Turn macro in Corner Window mode at the right side (0 / 1)
!	rightCornerAngle:		Angle between connected walls in case of Corner Window (angle)
!	rightConnWallThk:		Thickness of the connected wall in case of Corner Window (length)
! Sill -------------------------------------------------------------------------
!	iSillType:				Identifies the type of the Sill. (intger)
!	gs_sill_thk:			Thickness of the Sill. (length)
!	gs_sill_nosing:			Nosing of the Sill. (length)
!	gs_sill_angle:			Sill slope. (angle)
!	gs_sill_ovhg_left:		Sill overhang on the left side. (length)
!	gs_sill_ovhg_right:		Sill overhang on the right side. (length)
!	gs_sill_slip_in:		Slip in of the Sill. Only effective when iSillType = 2 or iSillType = 3 (length)
!	gs_sill_width:			Width of the Brick or Timber Sill.
!	gs_sill_topWidth:		Sill Top Width
!	gs_sill_topHeight:		Sill Top Height
!	gs_sill_curved:			Sill edge is curved or straight. (0 / 1)
!	gs_sill_endthk:			Outer thickness (CHE profile parameters)
!	gs_sill_elev:			Insulation thickness under the sill (CHE profile parameters)
!	gs_sill_dripnos:		Drin hanging height (CHE profile parameters)
!	gs_sill_dripwidth:		Drin width (CHE profile parameters)!
!	gs_sill_edge:			Parallel sill outer edge (only CHE - perpendicular, vertical)
!	gs_sill_element_thk:	Sill element thk (only CHE - solid parallel)
! Ganging ----------------------------------------------------------------------
!	gs_stack_left:			Align to door/window on left side (0 / 1)
!	gs_stack_right:			Align to door/window on right side (0 / 1)
!	gs_stack_bottom:		Align to door/window on bottom side (0 / 1)!
!
! Related Global Variables:
!	GLOB_SCRIPT_TYPE
!	GLOB_CONTEXT
!	WALL_THICKNESS
!	WALL_INCL
!	WIDO_FRAME_THICKNESS
!	WIDO_SILL
!	WIDO_LEFT_JAMB
!	WIDO_RIGHT_JAMB
!	WIDO_ORIG_DIST
!	WIDO_REVEAL_SIDE
!	SYMB_MIRRORED
!	SYMB_ROTANGLE
! ==============================================================================


! ==============================================================================
! Sill and Board
! ==============================================================================

dim SillTypeValueMask[]
dim iSillTypeValueMask[]

i=1
if bittest( gs_SillTypeEnable, 0) then 				! Timber Sill in Value list
	SillTypeValueMask[i]	= stSillTypes[1]
	iSillTypeValueMask[i]	= SILL_TIMBER
	i = i + 1
endif
if bittest( gs_SillTypeEnable, 1) then 				! Brick Sill in Value list
	SillTypeValueMask[i]	= stSillTypes[2]
	iSillTypeValueMask[i]	= SILL_BRICK
	i = i + 1
endif
if bittest( gs_SillTypeEnable, 2) then 				! Stone Sill in Value list
	SillTypeValueMask[i]	= stSillTypes[3]
	iSillTypeValueMask[i]	= SILL_STONE
	i = i + 1
endif
if bittest( gs_SillTypeEnable, 3) then 				! Ceramic Sill in Value list
	SillTypeValueMask[i]	= stSillTypes[4]
	iSillTypeValueMask[i]	= SILL_CERAMIC
	i = i + 1
endif
if bittest( gs_SillTypeEnable, 4) then 				! Eternite Sill in Value list
	SillTypeValueMask[i]	= stSillTypes[5]
	iSillTypeValueMask[i]	= SILL_ETHERNIT
	i = i + 1
endif
if bittest( gs_SillTypeEnable, 5) then 				! Concrete Tub in Value list
	SillTypeValueMask[i]	= stSillTypes[6]
	iSillTypeValueMask[i]	= SILL_CONCRETE_TUB
	i = i + 1
endif
if bittest( gs_SillTypeEnable, 6) then 				! Aluminum in Value list
	SillTypeValueMask[i]	= stSillTypes[7]
	iSillTypeValueMask[i]	= SILL_ALUMINIUM
	i = i + 1
endif
if bittest( gs_SillTypeEnable, 7) then 				! Solid Sill 1.1 / Massiv-Fensterbank 1.1 in Value list
	SillTypeValueMask[i]	= stSillTypes[8]
	iSillTypeValueMask[i]	= SILL_SOLID_11
	i = i + 1
endif
if bittest( gs_SillTypeEnable, 8) then 				! Solid Sill 1.2 / Massiv-Fensterbank 1.2 in Value list
	SillTypeValueMask[i]	= stSillTypes[9]
	iSillTypeValueMask[i]	= SILL_SOLID_12
	i = i + 1
endif
if bittest( gs_SillTypeEnable, 9) then 				! Solid Sill 2.2 / Massiv-Fensterbank 2.2 in Value list
	SillTypeValueMask[i]	= stSillTypes[10]
	iSillTypeValueMask[i]	= SILL_SOLID_22
	i = i + 1
endif
if bittest( gs_SillTypeEnable, 10) then 			! Metal Sheet / Metallfensterbank 1.1 in Value list
	SillTypeValueMask[i]	= stSillTypes[11]
	iSillTypeValueMask[i]	= SILL_METAL_1
	i = i + 1
endif
if bittest( gs_SillTypeEnable, 11) then 			! Solid parallel / massiv parallel in Value list
	SillTypeValueMask[i]	= stSillTypes[12]
	iSillTypeValueMask[i]	= SILL_PARALLEL
	i = i + 1
endif
if bittest( gs_SillTypeEnable, 12) then 			! Metal Sheet 2 in Value list
	SillTypeValueMask[i]	= stSillTypes[13]
	iSillTypeValueMask[i]	= SILL_METAL_2
	i = i + 1
endif
if bittest( gs_SillTypeEnable, 13) then 			! Solid parallel 2 / massiv parallel in Value list
	SillTypeValueMask[i]	= stSillTypes[14]
	iSillTypeValueMask[i]	= SILL_PARALLEL_2
	i = i + 1
endif
if bittest( gs_SillTypeEnable, 14) then 			! simple block in Value list
	SillTypeValueMask[i]	= stSillTypes[15]
	iSillTypeValueMask[i]	= SILL_SIMPLEBLOCK
	i = i + 1
endif
if bittest( gs_SillTypeEnable, 15) then 			! block in Value list
	SillTypeValueMask[i]	= stSillTypes[16]
	iSillTypeValueMask[i]	= SILL_BLOCK
	i = i + 1
endif
if bittest( gs_SillTypeEnable, 16) then 			! dutch in Value list
	SillTypeValueMask[i]	= stSillTypes[17]
	iSillTypeValueMask[i]	= SILL_DUTCH
	i = i + 1
endif

if gs_IsCurved then
	values{2} "iSillType" 	SILL_TIMBER, stSillTypes[1]! Timber Sill
else
	values{2} "iSillType" iSillTypeValueMask, SillTypeValueMask
endif


values{2} "iBrickSilldetlevel" 	BRICKSILL_SIMPLE,	stBsilldetlevel[1],
								BRICKSILL_DETAILED,	stBsilldetlevel[2]

if bDoorWithSidelightSupport then
	if not(gs_sidelight_left & gs_sidelight_parapet_hgt_left > EPS) then
		hideparameter "gs_sill_outside_sl_left"
		lock "gs_sill_outside_sl_left"
		if gs_sidelight_left & gs_sidelight_parapet_hgt_left < EPS then
			gs_sill_outside_sl_left = 0
			parameters gs_sill_outside_sl_left = 0
		endif
	endif
	if not(gs_sidelight_right & gs_sidelight_parapet_hgt_right > EPS) then
		hideparameter "gs_sill_outside_sl_right"
		lock "gs_sill_outside_sl_right"
		if gs_sidelight_right & gs_sidelight_parapet_hgt_right < EPS then
			gs_sill_outside_sl_right = 0
			parameters gs_sill_outside_sl_right = 0
		endif
	endif
endif

hideparameter "gs_sill_topHeight"	! can be used if needed by design

if not(bHasAnySillOn) | gs_stack_bottom then						! Off
	hideparameter	"iSillType",
					"gs_sill_thk",
					"gs_sill_nosing",
					"gs_sill_angle",
					"gs_sill_ovhg_left",
					"gs_sill_ovhg_right",
					"gs_sill_slip_in",
					"gs_sill_width",
					"gs_sill_pen_3D",
					"gs_sill_pen_sectcont",
					"gs_sill_fill",
					"gs_sill_pen_fg",
					"gs_sill_pen_bg",
					"gs_sill_pen_ins_sectcont",
					"gs_sill_fill_ins_fg",
					"gs_sill_pen_ins_fg",
					"gs_sill_pen_ins_bg",
					"gs_sill_mat",
					"iBrickSilldetlevel",
					"gs_brick_sill_br_thk",
					"gs_brick_sill_mort_thk",
					"gs_brick_sill_mort_mat",
					"gs_sill_topWidth"

	lock	"iSillType",
			"gs_sill_thk",
			"gs_sill_nosing",
			"gs_sill_angle",
			"gs_sill_ovhg_left",
			"gs_sill_ovhg_right",
			"gs_sill_slip_in",
			"gs_sill_width",
			"gs_sill_pen_3D",
			"gs_sill_pen_sectcont",
			"gs_sill_fill",
			"gs_sill_pen_fg",
			"gs_sill_pen_bg",
			"gs_sill_pen_ins_sectcont",
			"gs_sill_fill_ins_fg",
			"gs_sill_pen_ins_fg",
			"gs_sill_pen_ins_bg",
			"gs_sill_mat",
			"gs_sill_topWidth",
			"gs_sill_topHeight",
			"iBrickSilldetlevel",
			"gs_brick_sill_br_thk",
			"gs_brick_sill_mort_thk",
			"gs_brick_sill_mort_mat"

	if	bittest( gs_SillTypeEnable, 7) | \			! Solid Sill 1.1 / Massiv-Fensterbank 1.1 in Value list
		bittest( gs_SillTypeEnable, 8) | \			! Solid Sill 1.2 / Massiv-Fensterbank 1.1 in Value list
		bittest( gs_SillTypeEnable, 9) | \			! Solid Sill 2.2 / Massiv-Fensterbank 2.2 in Value list
		bittest( gs_SillTypeEnable, 10) | \			! Metal Sheet / Metallfensterbank 1.1 in Value list
		bittest( gs_SillTypeEnable, 12) | \			! Metal Sheet 2 in Value list
		bittest( gs_SillTypeEnable, 16) then		! dutch in Value list

		hideparameter	"gs_sill_endthk"
		lock	"gs_sill_endthk"
	endif

	if	bittest( gs_SillTypeEnable, 0) then			! Timber Sill in Value list
		hideparameter	"gs_sill_curved"
		lock	"gs_sill_curved"
	endif

	if	bittest( gs_SillTypeEnable, 0) | \			! Timber Sill in Value list
		bittest( gs_SillTypeEnable, 7) | \			! Solid Sill 1.1 / Massiv-Fensterbank 1.1 in Value list
		bittest( gs_SillTypeEnable, 8) | \			! Solid Sill 1.2 / Massiv-Fensterbank 1.2 in Value list
		bittest( gs_SillTypeEnable, 9) then			! Solid Sill 2.2 / Massiv-Fensterbank 2.2 in Value list

		hideparameter	"gs_sill_elev"
		lock	"gs_sill_elev"
	endif

	if	bittest( gs_SillTypeEnable, 9) | \			! Solid Sill 2.2 / Massiv-Fensterbank 2.2 in Value list
		bittest( gs_SillTypeEnable, 10) | \			! Metal Sheet / Metallfensterbank 1.1 in Value list
		bittest( gs_SillTypeEnable, 12) then		! Metal Sheet 2 in Value list

		hideparameter	"gs_sill_dripnos"
		lock	"gs_sill_dripnos"
	endif

	if bittest( gs_SillTypeEnable, 9) then			! Solid Sill 2.2 / Massiv-Fensterbank 2.2 in Value list
		hideparameter	"gs_sill_dripwidth"
		lock	"gs_sill_dripwidth"
	endif

	if bittest( gs_SillTypeEnable, 13) then			! Solid parallel 2 / massiv parallel in Value list
		hideparameter	"gs_sill_ins_below",
						"gs_sill_ins_use_wall_skin"
		lock	"gs_sill_ins_below",
				"gs_sill_ins_use_wall_skin"
	endif

	if	bittest( gs_SillTypeEnable, 11) |\ 			! SILL_PARALLEL
		bittest( gs_SillTypeEnable, 13) then		! SILL_PARALLEL_2

		hideparameter	"gs_sill_edge",
						"gs_sill_element_thk"

		lock	"gs_sill_edge",
				"gs_sill_element_thk"
	endif
else
	if iSillType <> SILL_PARALLEL_2 then
		hideparameter "gs_sill_ins_below", "gs_sill_ins_use_wall_skin"
		lock "gs_sill_ins_below", "gs_sill_ins_use_wall_skin"
	endif

	if bHasAnySillOn then			! Outside, Both Sides
		if iSillType <> SILL_BRICK then
			hideparameter	"iBrickSilldetlevel",
							"gs_brick_sill_br_thk",
							"gs_brick_sill_mort_thk",
							"gs_brick_sill_mort_mat"

			lock	"iBrickSilldetlevel",
					"gs_brick_sill_br_thk",
					"gs_brick_sill_mort_thk",
					"gs_brick_sill_mort_mat"
		endif

		maxSillThk = ac_reveal_height - bEnableCasing * gs_trim_outside * gs_trim_thk_out

! Timber Sill ------------------------------------------------------------------

		if iSillType = SILL_TIMBER then

			if GLOB_MODPAR_NAME = "iSillType" then		! Setup Timber Sill Defaults
				gs_sill_thk		= 0.025
				gs_sill_nosing	= max(0.030, minSillNosing)
				gs_sill_angle	= 3
				gs_sill_holeDepthBehind = 0

				parameters	gs_sill_thk		= gs_sill_thk,
							gs_sill_nosing	= gs_sill_nosing,
							gs_sill_angle	= gs_sill_angle,
							gs_sill_holeDepthBehind = gs_sill_holeDepthBehind
			endif

			hideparameter	"gs_sill_slip_in",
							"gs_board_slip_in"
			lock	"gs_sill_slip_in",
					"gs_board_slip_in"

			values "gs_sill_thk" 	range (0, maxSillThk]
			values "gs_sill_elev"	range [0, maxSillThk - gs_sill_thk]

			if maxSillAngle > EPS then
				if gs_sill_angle > maxSillAngle - EPS then
					gs_sill_angle = maxSillAngle - EPS
					parameters gs_sill_angle = maxSillAngle - EPS
				endif
				values "gs_sill_angle" range [0, maxSillAngle)
			else
				values "gs_sill_angle" range [0,)
			endif

			if curvedWall & abs(radSill) > EPS then
				if wallIsLeft then
					maxSillLength = abs(radSill - abs(WOD))
				else
					alfaR = alfaRight - alfaRightJamb + alfaSillRightOvhg
					pyR = ySign * radSill * cos(alfaR)

					alfaL = -alfaLeft + alfaLeftJamb - alfaSillLeftOvhg
					pyL = ySign * radSill * cos(alfaL)

					maxSillLength = max((abs(WOD) - pyL), (abs(WOD) - pyR))
				endif
			else
				maxSillLength = WIDO_SILL
			endif

			values "gs_sill_width"	range[maxSillLength,]
			if GLOB_MODPAR_NAME = "gs_sill_width" then
				gs_sill_nosing = gs_sill_width - maxSillLength
				parameters gs_sill_nosing = gs_sill_nosing
			else
				gs_sill_width = maxSillLength + gs_sill_nosing
				parameters gs_sill_width = gs_sill_width
			endif
		endif

! Brick Sill -------------------------------------------------------------------

		if iSillType = SILL_BRICK then

			if GLOB_MODPAR_NAME = "iSillType" then		! Setup Brick Sill Defaults
				gs_sill_thk			= 0.120
				gs_sill_nosing		= max(0.020, minSillNosing)
				gs_sill_angle		= 10
				gs_sill_ovhg_left	= 0
				gs_sill_ovhg_right	= 0
				gs_sill_slip_in		= min(0.020, WIDO_FRAME_THICKNESS / 3)
				gs_sill_holeDepthBehind = sin(gs_sill_angle) * gs_sill_thk

				parameters	gs_sill_thk			= gs_sill_thk,
							gs_sill_nosing		= gs_sill_nosing,
							gs_sill_angle		= gs_sill_angle,
							gs_sill_ovhg_left	= gs_sill_ovhg_left,
							gs_sill_ovhg_right	= gs_sill_ovhg_right,
							gs_sill_slip_in		= gs_sill_slip_in,
							gs_sill_holeDepthBehind = gs_sill_holeDepthBehind
			endif

			if not(bSillUSA) | (bSillUSA & isWindow) then values "gs_sill_holeDepthBehind" range [sin(gs_sill_angle) * gs_sill_thk,)

			hideparameter "gs_sill_curved"
			lock "gs_sill_curved"

			if curvedWall then
				if wallIsLeft then
					maxSillLength = abs(radSill - abs(WOD))
				else
					alfaR = alfaRight - alfaRightJamb + alfaSillRightOvhg
					pyR = ySign * radSill * cos(alfaR)

					alfaL = -alfaLeft + alfaLeftJamb - alfaSillLeftOvhg
					pyL = ySign * radSill * cos(alfaL)

					maxSillLength = max((abs(WOD) - pyL), (abs(WOD) - pyR))
				endif
			else
				maxSillLength = WIDO_SILL
			endif

			if GLOB_MODPAR_NAME = "gs_sill_width" then
				gs_sill_nosing = gs_sill_width * cos(gs_sill_angle) - gs_sill_thk * sin(gs_sill_angle) - maxSillLength - gs_sill_slip_in
				parameters gs_sill_nosing = gs_sill_nosing
			else
				gs_sill_width = gs_sill_thk * tan(gs_sill_angle) + (maxSillLength + gs_sill_slip_in + gs_sill_nosing) / cos(gs_sill_angle)
				parameters gs_sill_width = gs_sill_width
			endif

			values "gs_sill_thk"		range (0, maxSillThk]
			if maxSillAngle > EPS then
				if gs_sill_angle > maxSillAngle - EPS then
					gs_sill_angle = maxSillAngle - EPS
					parameters gs_sill_angle = maxSillAngle - EPS
				endif
				values "gs_sill_angle"		range [0, maxSillAngle)
			else
				values "gs_sill_angle"		range [0, )
			endif
			values "gs_sill_slip_in"	range [0, WIDO_FRAME_THICKNESS]
			values "gs_sill_width"		range [gs_sill_thk * tan(gs_sill_angle) + (maxSillLength + gs_sill_slip_in + minSillNosing) / cos(gs_sill_angle), )

			if bEnableBoard then
				values "gs_board_slip_in"	range [0, WIDO_FRAME_THICKNESS]
				if GLOB_MODPAR_NAME = "gs_sill_slip_in" then
					maxBoardSlipIn = WIDO_FRAME_THICKNESS - gs_sill_slip_in
					if gs_board_slip_in > maxBoardSlipIn then parameters gs_board_slip_in = maxBoardSlipIn
				endif
				if GLOB_MODPAR_NAME = "gs_board_slip_in" then
					maxSillSlipIn = WIDO_FRAME_THICKNESS - gs_board_slip_in
					if gs_sill_slip_in > maxSillSlipIn then parameters gs_sill_slip_in = maxSillSlipIn
				endif
			endif

			if iBrickSilldetlevel = BRICKSILL_SIMPLE then
				hideparameter	"gs_brick_sill_br_thk",
								"gs_brick_sill_mort_thk",
								"gs_brick_sill_mort_mat"
				lock			"gs_brick_sill_br_thk",
								"gs_brick_sill_mort_thk",
								"gs_brick_sill_mort_mat"
			endif

			if isWindow & not(gs_brick_sill) & bSillUSA then
				lock 			"gs_sill_mat"
				hideparameter	"gs_sill_mat"
			endif
		endif


! Simple Block Sill -------------------------------------------------------------------

		if iSillType = SILL_SIMPLEBLOCK then

			if GLOB_MODPAR_NAME = "iSillType" then		! Setup Simple Block Sill Defaults
				gs_sill_thk			= 0.1
				gs_sill_nosing		= 0.03
				gs_sill_angle		= 0
				gs_sill_ovhg_left	= 0
				gs_sill_ovhg_right	= 0
				gs_sill_slip_in		= 0.035
				gs_sill_holeDepthBehind = 0

				parameters	gs_sill_thk			= gs_sill_thk,
							gs_sill_nosing		= gs_sill_nosing,
							gs_sill_angle		= gs_sill_angle,
							gs_sill_ovhg_left	= gs_sill_ovhg_left,
							gs_sill_ovhg_right	= gs_sill_ovhg_right,
							gs_sill_slip_in		= gs_sill_slip_in,
							gs_sill_holeDepthBehind = gs_sill_holeDepthBehind
			endif

			values "gs_sill_holeDepthBehind" range [0,)

			hideparameter	"gs_sill_curved",
							"gs_sill_angle",
							"iBrickSilldetlevel",
							"gs_sill_endthk"
			lock	"gs_sill_curved",
					"gs_sill_angle",
					"iBrickSilldetlevel",
					"gs_sill_endthk"

			iBrickSilldetlevel = BRICKSILL_SIMPLE
			parameters iBrickSilldetlevel = iBrickSilldetlevel

			if curvedWall then
				if wallIsLeft then
					maxSillLength = abs(radSill - abs(WOD))
				else
					alfaR = alfaRight - alfaRightJamb + alfaSillRightOvhg
					pyR = ySign * radSill * cos(alfaR)

					alfaL = -alfaLeft + alfaLeftJamb - alfaSillLeftOvhg
					pyL = ySign * radSill * cos(alfaL)

					maxSillLength = max((abs(WOD) - pyL), (abs(WOD) - pyR))
				endif
			else
				maxSillLength = WIDO_SILL
			endif

			if GLOB_MODPAR_NAME = "gs_sill_width" then
				gs_sill_nosing = gs_sill_width * cos(gs_sill_angle) - gs_sill_thk * sin(gs_sill_angle) - maxSillLength - gs_sill_slip_in
				parameters gs_sill_nosing = gs_sill_nosing
			else
				gs_sill_width = gs_sill_thk * tan(gs_sill_angle) + (maxSillLength + gs_sill_slip_in + gs_sill_nosing) / cos(gs_sill_angle)
				parameters gs_sill_width = gs_sill_width
			endif

			values "gs_sill_thk"		range (0, maxSillThk]
			if maxSillAngle > EPS then
				if gs_sill_angle > maxSillAngle - EPS then
					gs_sill_angle = maxSillAngle - EPS
					parameters gs_sill_angle = maxSillAngle - EPS
				endif
				values "gs_sill_angle"		range [0, maxSillAngle)
			else
				values "gs_sill_angle"		range [0, )
			endif
			values "gs_sill_slip_in"	range [0, WIDO_FRAME_THICKNESS]
			values "gs_sill_width"		range [gs_sill_thk * tan(gs_sill_angle) + (maxSillLength + gs_sill_slip_in + minSillNosing) / cos(gs_sill_angle), )

			if bEnableBoard then
				values "gs_board_slip_in"	range [0, WIDO_FRAME_THICKNESS]
				if GLOB_MODPAR_NAME = "gs_sill_slip_in" then
					maxBoardSlipIn = WIDO_FRAME_THICKNESS - gs_sill_slip_in
					if gs_board_slip_in > maxBoardSlipIn then parameters gs_board_slip_in = maxBoardSlipIn
				endif
				if GLOB_MODPAR_NAME = "gs_board_slip_in" then
					maxSillSlipIn = WIDO_FRAME_THICKNESS - gs_board_slip_in
					if gs_sill_slip_in > maxSillSlipIn then parameters gs_sill_slip_in = maxSillSlipIn
				endif
			endif

			hideparameter	"gs_brick_sill_br_thk",
							"gs_brick_sill_mort_thk",
							"gs_brick_sill_mort_mat"
			lock	"gs_brick_sill_br_thk",
					"gs_brick_sill_mort_thk",
					"gs_brick_sill_mort_mat"
		endif


! Stone Sill -------------------------------------------------------------------

		if iSillType = SILL_STONE then

			if GLOB_MODPAR_NAME = "iSillType" then	! Setup Stone Sill Defaults
				minUpperWdt = 0.02

				gs_sill_thk			= 0.100
				gs_sill_nosing		= max(0.045, minSillNosing)
				gs_sill_angle		= 10
				gs_sill_ovhg_left	= 0
				gs_sill_ovhg_right	= 0
				gs_sill_slip_in		= 0.035
				gs_sill_holeDepthBehind = 0
				gs_sill_topWidth    = 0.01
				gs_sill_topHeight	= 0.01

				parameters	gs_sill_thk			= gs_sill_thk,
							gs_sill_nosing		= gs_sill_nosing,
							gs_sill_angle		= gs_sill_angle,
							gs_sill_ovhg_left	= gs_sill_ovhg_left,
							gs_sill_ovhg_right	= gs_sill_ovhg_right,
							gs_sill_slip_in		= gs_sill_slip_in,
							gs_sill_holeDepthBehind = gs_sill_holeDepthBehind,
							gs_sill_topWidth	= gs_sill_topWidth,
							gs_sill_topHeight	= gs_sill_topHeight
			endif

			if not(bSillUSA) | (bSillUSA & isWindow) then values "gs_sill_holeDepthBehind"	range [0,)
			values "gs_sill_topWidth"			range [0,)

			hideparameter "gs_sill_curved"
			lock "gs_sill_curved"

			if curvedWall then
				if wallIsLeft then
					maxSillLength = abs(radSill - abs(WOD))
				else
					alfaR = alfaRight - alfaRightJamb + alfaSillRightOvhg
					pyR = ySign * radSill * cos(alfaR)

					alfaL = -alfaLeft + alfaLeftJamb - alfaSillLeftOvhg
					pyL = ySign * radSill * cos(alfaL)

					maxSillLength = max((abs(WOD) - pyL), (abs(WOD) - pyR))
				endif
			else
				maxSillLength = WIDO_SILL
			endif

			if GLOB_MODPAR_NAME = "gs_sill_width" then
				gs_sill_nosing = gs_sill_width  - gs_sill_slip_in - maxSillLength
				parameters gs_sill_nosing = gs_sill_nosing
			else
				gs_sill_width = gs_sill_slip_in + maxSillLength + gs_sill_nosing
				parameters gs_sill_width = gs_sill_width
			endif

			values "gs_sill_thk"		range (0, maxSillThk]
			if maxSillAngle > EPS then
				if gs_sill_angle > maxSillAngle - EPS then
					gs_sill_angle = maxSillAngle - EPS
					parameters gs_sill_angle = maxSillAngle - EPS
				endif
				values "gs_sill_angle"		range [0, maxSillAngle)
			else
				values "gs_sill_angle"		range [0, )
			endif
			values "gs_sill_slip_in"	range [0, WIDO_FRAME_THICKNESS]
			values "gs_sill_width"		range [gs_sill_slip_in + maxSillLength + minSillNosing, )

			if bEnableBoard then
				values "gs_board_slip_in"	range [0, max(0, WIDO_FRAME_THICKNESS - gs_sill_topWidth - minUpperWdt)]
				if GLOB_MODPAR_NAME = "gs_sill_slip_in" then
					maxBoardSlipIn = WIDO_FRAME_THICKNESS - gs_sill_slip_in
					if gs_board_slip_in > maxBoardSlipIn then parameters gs_board_slip_in = maxBoardSlipIn
				endif
				if GLOB_MODPAR_NAME = "gs_board_slip_in" then
					maxSillSlipIn = WIDO_FRAME_THICKNESS - gs_board_slip_in
					if gs_sill_slip_in > maxSillSlipIn then parameters gs_sill_slip_in = maxSillSlipIn
				endif
			endif
		endif


! NED Sill Profiles ------------------------------------------------------------

		if iSillType = SILL_CERAMIC | iSillType = SILL_ETHERNIT | iSillType = SILL_CONCRETE_TUB | iSillType = SILL_ALUMINIUM then

			if curvedWall then
				if wallIsLeft then
					maxSillLength = abs(radSill - abs(WOD))
				else
					alfaR = alfaRight - alfaRightJamb + alfaSillRightOvhg
					pyR = ySign * radSill * cos(alfaR)

					alfaL = -alfaLeft + alfaLeftJamb - alfaSillLeftOvhg
					pyL = ySign * radSill * cos(alfaL)

					maxSillLength = max((abs(WOD) - pyL), (abs(WOD) - pyR))
				endif
			else
				maxSillLength = WIDO_SILL
			endif

			if GLOB_MODPAR_NAME = "iSillType" then
				if iSillType = SILL_CERAMIC then
					gs_sill_width		= 0.158
					gs_sill_nosing		= 0.03		!!!gs_sill_width - gs_sill_slip_in - maxSillLength
					gs_sill_thk			= 0.073
					gs_sill_endthk		= 0.027
					gs_sill_topHeight	= gs_sill_thk - gs_sill_endthk
					gs_sill_topWidth	= 0.03
					gs_sill_angle		= 8
					gs_sill_slip_in		= 0.035		!!!gs_sill_topHeight * sin(gs_sill_angle)
					gs_sill_holeDepthBehind = 0
				endif
				if iSillType = SILL_ETHERNIT then
					gs_sill_nosing		= 0.03
					gs_sill_thk			= 0.065
					gs_sill_endthk		= 0.03
					gs_sill_topWidth	= 0.02
					gs_sill_topHeight	= 0.01
					gs_sill_angle		= 10
					gs_sill_slip_in		= 0.035
					gs_sill_width		= gs_sill_nosing + WIDO_SILL + gs_sill_slip_in
					gs_sill_holeDepthBehind = 0
				endif
				if iSillType = SILL_CONCRETE_TUB then
					gs_sill_nosing	= 0.03
					gs_sill_thk		= 0.185
					gs_sill_slip_in	= 0.035
					gs_sill_width	= WIDO_SILL + gs_sill_nosing + gs_sill_slip_in
					gs_sill_angle	= 0
					gs_sill_holeDepthBehind = 0
				endif
				if iSillType = SILL_ALUMINIUM then
					gs_sill_width		= max(0.13, WIDO_SILL + 0.015)
					gs_sill_nosing		= gs_sill_width - gs_sill_slip_in - maxSillLength
					gs_sill_thk			= 0.05
					gs_sill_slip_in		= 0
					gs_sill_angle		= 15
					gs_sill_topHeight	= 0.018
					gs_sill_dripnos		= 0.02
					gs_sill_dripwidth 	= min(0.015, gs_sill_width - WIDO_SILL)
					gs_sill_holeDepthBehind = 0
					parameters	gs_sill_dripnos		= gs_sill_dripnos,
								gs_sill_dripwidth	= gs_sill_dripwidth
				endif
				parameters	gs_sill_width	= gs_sill_width,
							gs_sill_nosing	= gs_sill_nosing,
							gs_sill_thk		= gs_sill_thk,
							gs_sill_endthk	= gs_sill_endthk,
							gs_sill_angle	= gs_sill_angle,
							gs_sill_slip_in	= gs_sill_slip_in,
							gs_sill_holeDepthBehind = gs_sill_holeDepthBehind,
							gs_sill_topWidth	= gs_sill_topWidth,
							gs_sill_topHeight	= gs_sill_topHeight
			endif

			values "gs_sill_holeDepthBehind" range [0,)

			if iSillType = SILL_CERAMIC then
				parameters gs_sill_topHeight = gs_sill_thk - gs_sill_endthk
				lock "gs_sill_angle", "gs_sill_topHeight", "gs_sill_topWidth", "gs_sill_slip_wall"
				hideparameter "gs_sill_topWidth", "gs_sill_slip_wall"

				values "gs_sill_width"		range [WIDO_SILL, )
				values "gs_sill_thk"		range [0.03, maxSillThk]
				values "gs_sill_slip_in"	range [0, )
				values "gs_sill_angle"		range [0,90)
			endif

			if iSillType = SILL_ETHERNIT then
				hideparameter	"gs_sill_slip_wall"
				lock			"gs_sill_topHeight", "gs_sill_slip_wall"

				values "gs_sill_width"		range [WIDO_SILL, )
				values "gs_sill_thk"		range [gs_sill_topHeight, maxSillThk]
				values "gs_sill_slip_in"	range [0, )
				values "gs_sill_topWidth"	range [0,)

				if maxSillAngle > EPS then
					if gs_sill_angle > maxSillAngle - EPS then
						gs_sill_angle = maxSillAngle - EPS
						parameters gs_sill_angle = maxSillAngle - EPS
					endif
					values "gs_sill_angle" range [0, maxSillAngle)
				else
					values "gs_sill_angle" range [0,)
				endif
			endif

			if iSillType = SILL_CONCRETE_TUB then
				hideparameter 	"gs_sill_endthk",
								"gs_sill_angle",
								"gs_sill_slip_wall",
								"gs_sill_topWidth"
				lock 			"gs_sill_endthk",
								"gs_sill_angle",
								"gs_sill_slip_wall",
								"gs_sill_topWidth",
								"gs_sill_topHeight"

				values "gs_sill_width"		range [WIDO_SILL, )
				values "gs_sill_thk"		range (0, maxSillThk]
				values "gs_sill_slip_in"	range [0, )
			endif

			if iSillType = SILL_ALUMINIUM then
				hideparameter	"gs_sill_endthk",
								"gs_sill_angle",
								"gs_sill_slip_wall",
								"gs_sill_topWidth"
				lock			"gs_sill_endthk",
								"gs_sill_angle",
								"gs_sill_slip_wall",
								"gs_sill_topWidth"

				! can be used if needed by design:
				hideparameter	"gs_sill_dripnos",
								"gs_sill_dripwidth"
				lock			"gs_sill_dripnos",
								"gs_sill_dripwidth"

				values "gs_sill_width"		range [WIDO_SILL, )
				values "gs_sill_thk"		range [gs_sill_dripnos + gs_sill_topHeight, maxSillThk]
				values "gs_sill_slip_in"	range [0, )
			endif


			hideparameter "gs_sill_curved"
			lock "gs_sill_curved"

			if GLOB_MODPAR_NAME = "gs_sill_width" then
				gs_sill_nosing = gs_sill_width  - gs_sill_slip_in - maxSillLength
				parameters gs_sill_nosing = gs_sill_nosing
			else
				if GLOB_MODPAR_NAME = "gs_sill_angle" then
					if iSillType = SILL_ALUMINIUM then
						parameters gs_sill_thk = gs_sill_width * tan(gs_sill_angle) + gs_sill_topHeight
					endif
				else
					gs_sill_width = gs_sill_slip_in + maxSillLength + gs_sill_nosing
					parameters gs_sill_width = gs_sill_width
					if iSillType = SILL_ALUMINIUM then
						thk = 0.002
						parameters gs_sill_angle = atn((gs_sill_thk - gs_sill_topHeight - gs_sill_dripnos) / (gs_sill_width - thk))
					endif
				endif
			endif

		endif

! CHE Sill Profiles ------------------------------------------------------------

		if	iSillType = SILL_SOLID_11 | \
			iSillType = SILL_SOLID_12 | \
			iSillType = SILL_SOLID_22 | \
			iSillType = SILL_METAL_1  | \
			iSillType = SILL_PARALLEL | \
			iSillType = SILL_METAL_2  | \
			iSillType = SILL_PARALLEL_2 then

			if curvedWall & abs(radSill) > EPS then
				if wallIsLeft then
					maxSillLength = abs(radSill - abs(WOD))
				else
					alfaR = alfaRight - alfaRightJamb + alfaSillRightOvhg
					pyR = ySign * radSill * cos(alfaR)

					alfaL = -alfaLeft + alfaLeftJamb - alfaSillLeftOvhg
					pyL = ySign * radSill * cos(alfaL)

					maxSillLength = max((abs(WOD) - pyL), (abs(WOD) - pyR))
				endif
			else
				maxSillLength = WIDO_SILL
			endif
			maxSillLength = max(0, maxSillLength - (iSillType = SILL_PARALLEL_2) * gs_mountingFrame_depth * gs_mountingFrame)

			if GLOB_MODPAR_NAME = "iSillType" then
				gs_sill_width = WIDO_SILL + 0.02
				if gs_sill_width < 0.15 then gs_sill_width = 0.15
				parameters gs_sill_width = gs_sill_width
				if iSillType = SILL_SOLID_11 | iSillType = SILL_SOLID_12 | iSillType = SILL_SOLID_22 then
					if iSillType = SILL_SOLID_22 then
						gs_sill_thk			= 0.045
						gs_sill_endthk		= 0.025
					else
						gs_sill_thk			= 0.050
						gs_sill_endthk		= 0.030
					endif
					gs_sill_topHeight	= 0.010
					gs_sill_topWidth	= 0.010
					gs_sill_dripnos		= 0.010
					gs_sill_dripwidth	= 0.030
					gs_sill_slip_in		= 0
				endif
				if iSillType = SILL_METAL_1 then
					gs_sill_thk			= 0.050
					gs_sill_endthk		= 0.030
					gs_sill_topHeight	= 0.010
					gs_sill_dripnos		= 0.020
					gs_sill_slip_in		= 0
				endif
				if iSillType = SILL_PARALLEL | iSillType = SILL_PARALLEL_2 then
					gs_sill_thk			= 0.080
					gs_sill_angle		= 3
					gs_sill_width		= 0.200
					gs_sill_element_thk = 0.020
					gs_sill_slip_in		= 0
				endif
				if iSillType = SILL_METAL_2 then
					gs_sill_thk			= 0.080
					gs_sill_endthk		= 0.070
					gs_sill_topHeight	= 0.010
					gs_sill_topWidth	= 0.010
					gs_sill_dripnos		= 0.110
					gs_sill_dripwidth	= 0.030
					gs_sill_slip_in		= 0
				endif
				gs_sill_holeDepthBehind = 0
				parameters	gs_sill_thk			= gs_sill_thk,
							gs_sill_endthk		= gs_sill_endthk,
							gs_sill_topHeight	= gs_sill_topHeight,
							gs_sill_topWidth	= gs_sill_topWidth,
							gs_sill_dripnos		= gs_sill_dripnos,
							gs_sill_dripwidth	= gs_sill_dripwidth,
							gs_sill_slip_in		= gs_sill_slip_in,
							gs_sill_element_thk = gs_sill_element_thk,
							gs_sill_angle		= gs_sill_angle,
							gs_sill_width		= gs_sill_width,
							gs_sill_holeDepthBehind = gs_sill_holeDepthBehind

			endif

			if	iSillType = SILL_SOLID_11 | \
				iSillType = SILL_SOLID_12 | \
				iSillType = SILL_SOLID_22 then
				values "gs_sill_elev"		range[0, maxSillThk - gs_sill_thk]
			else
				values "gs_sill_elev"		range[0,]
			endif

			if iSillType = SILL_SOLID_22 then
				values "gs_sill_width"		range[maxSillLength + gs_sill_dripwidth,]
			else
				values "gs_sill_width"		range[maxSillLength,]
			endif
			values "gs_sill_endthk"		range[0,]
			values "gs_sill_thk"		range[gs_sill_endthk + gs_sill_topHeight, maxSillThk]
			values "gs_sill_dripnos"	range[0,]
			values "gs_sill_dripwidth"	range[0,]

			if iSillType = SILL_PARALLEL | iSillType = SILL_PARALLEL_2 then
				values "gs_sill_edge"			stSillEdge
				values "gs_sill_angle"			range[0,90)
				values "gs_sill_element_thk"	range(0,]

				hideparameter "gs_sill_curved", "gs_sill_slip_in"
				lock "gs_sill_curved", "gs_sill_slip_in"

				if iSillType = SILL_PARALLEL_2 then
					hideparameter "gs_sill_angle"
					lock "gs_sill_angle"

					if gs_mountingFrame | gs_reveal_bottom < EPS then
						hideparameter "gs_sill_ins_below"
						lock "gs_sill_ins_below"
					endif

					bDefaultElem		= (GLOB_INTGUID = "" | GLOB_INTGUID = "{00000000-0000-0000-0000-000000000000}")
					if not(bDefaultElem) & not(bCompositeWall) then
						lock "gs_sill_ins_use_wall_skin"
						hideparameter	"gs_sill_ins_use_wall_skin"
					endif

					if not(gs_sill_ins_below) then
						hideparameter	"gs_sill_ins_use_wall_skin",
										"gs_sill_pen_ins_sectcont",
										"gs_sill_fill_ins_fg",
										"gs_sill_pen_ins_fg",
										"gs_sill_pen_ins_bg"

						lock 	"gs_sill_ins_use_wall_skin",
								"gs_sill_pen_ins_sectcont",
								"gs_sill_fill_ins_fg",
								"gs_sill_pen_ins_fg",
								"gs_sill_pen_ins_bg"
					else
						if gs_sill_ins_use_wall_skin & bCompositeWall then
							hideparameter	"gs_sill_pen_ins_sectcont",
											"gs_sill_fill_ins_fg",
											"gs_sill_pen_ins_fg",
											"gs_sill_pen_ins_bg"

							lock 	"gs_sill_pen_ins_sectcont",
									"gs_sill_fill_ins_fg",
									"gs_sill_pen_ins_fg",
									"gs_sill_pen_ins_bg"
						endif
					endif
				else
					hideparameter "gs_sill_ins_below", "gs_sill_ins_use_wall_skin"
					lock "gs_sill_ins_below", "gs_sill_ins_use_wall_skin"
				endif
			else
				hideparameter "gs_sill_angle", "gs_sill_curved", "gs_sill_slip_in"
				lock "gs_sill_angle", "gs_sill_curved", "gs_sill_slip_in"
			endif


			if iSillType = SILL_PARALLEL | iSillType = SILL_PARALLEL_2 then
				if iSillType = SILL_PARALLEL then
					sillAngle 	= gs_sill_angle
					sillWido 	= WIDO_SILL
				else
					sillAngle = gs_reveal_outerBottom_angle
					sillWido 	= WIDO_SILL - gs_mountingFrame_depth * gs_mountingFrame
				endif
				if GLOB_MODPAR_NAME = "gs_sill_width" then
					if gs_sill_edge = stSillEdge[1] then		! Perpendicular
						gs_sill_nosing = gs_sill_width * cos (sillAngle) - sillWido
					else			! Vertical
						gs_sill_nosing = (gs_sill_width - gs_sill_element_thk * tan (sillAngle)) * cos (sillAngle) - sillWido
					endif
					parameters gs_sill_nosing = gs_sill_nosing
				else
					if gs_sill_edge = stSillEdge[1] then		! Perpendicular
						gs_sill_width = (sillWido + gs_sill_nosing) / cos (sillAngle)
					else			! Vertical
						gs_sill_width = (sillWido + gs_sill_nosing + gs_sill_element_thk * tan (sillAngle)) / cos (sillAngle)
					endif
					parameters gs_sill_width = gs_sill_width
				endif
			else
				if GLOB_MODPAR_NAME = "gs_sill_width" then
					gs_sill_nosing = gs_sill_width - WIDO_SILL
					parameters gs_sill_nosing = gs_sill_nosing
				else
					gs_sill_width = WIDO_SILL + gs_sill_nosing
					parameters gs_sill_width = gs_sill_width
				endif
			endif
		endif

! Block Sill -------------------------------------------------------------------

		if iSillType = SILL_BLOCK then
			if GLOB_MODPAR_NAME = "iSillType" then
				gs_sill_nosing	= 0
				gs_sill_thk		= 0.012

				parameters gs_sill_nosing = gs_sill_nosing, gs_sill_thk = gs_sill_thk
			endif

			gs_sill_angle		= 0
			gs_sill_width		= WIDO_FRAME_THICKNESS + gs_sill_nosing
			gs_sill_ovhg_left	= 0
			gs_sill_ovhg_right	= 0
			gs_sill_slip_in		= WIDO_FRAME_THICKNESS

			values "gs_sill_thk" range(0, maxSillThk]

			parameters gs_sill_anlge	= gs_sill_angle,
					gs_sill_width		= gs_sill_width,
					gs_sill_ovhg_left	= gs_sill_ovhg_left,
					gs_sill_ovhg_right	= gs_sill_ovhg_right,
					gs_sill_slip_in		= gs_sill_slip_in

			hideparameter	"gs_sill_angle",
							"gs_sill_ovhg_left",
							"gs_sill_ovhg_right",
							"gs_brick_sill_br_thk",
							"gs_brick_sill_mort_thk",
							"gs_brick_sill_mort_mat",
							"gs_sill_endthk"
			lock	"gs_sill_angle",
					"gs_sill_width",
					"gs_sill_slip_in",
					"gs_sill_ovhg_left",
					"gs_sill_ovhg_right",
					"gs_brick_sill_br_thk",
					"gs_brick_sill_mort_thk",
					"gs_brick_sill_mort_mat",
					"gs_sill_endthk"
		endif


! Dutch Profiled Sill ----------------------------------------------------------

		if iSillType = SILL_DUTCH then
			if GLOB_MODPAR_NAME = "iSillType" then
				gs_sill_width	= WIDO_FRAME_THICKNESS
				gs_sill_thk		= 0.1
				gs_sill_endthk	= 0.07
				gs_sill_nosing	= 0
				gs_sill_angle	= 10
				gs_sill_topWidth	= 0.042
				gs_sill_topHeight	= 0.02

				parameters gs_sill_width	= gs_sill_width,
						gs_sill_thk			= gs_sill_thk,
						gs_sill_endthk		= gs_sill_endthk,
						gs_sill_nosing		= gs_sill_nosing,
						gs_sill_angle		= gs_sill_angle,
						gs_sill_topWidth	= gs_sill_topWidth,
						gs_sill_topHeight	= gs_sill_topHeight
			endif

			if GLOB_MODPAR_NAME = "gs_sill_width" then
				gs_sill_nosing = gs_sill_width - WIDO_FRAME_THICKNESS
				parameters gs_sill_nosing = gs_sill_nosing
			else
				gs_sill_width = gs_sill_nosing + WIDO_FRAME_THICKNESS
				parameters gs_sill_width = gs_sill_width
			endif
			values "gs_sill_width"	range [WIDO_FRAME_THICKNESS, )
			values "gs_sill_nosing"	range [0, )

			values "gs_sill_thk" 		range (0, maxSillThk]
			values "gs_sill_endthk"		range [0, gs_sill_thk]
			gs_sill_endthk = min(gs_sill_endthk, gs_sill_thk)
			values "gs_sill_topHeight"	range [0, gs_sill_thk - gs_sill_endthk]
			if abs(gs_sill_width - gs_sill_topWidth) > EPS then
				values "gs_sill_angle"		range [0, atn((gs_sill_thk - gs_sill_topHeight) / (gs_sill_width - gs_sill_topWidth))]
			endif
			values "gs_sill_topWidth"	range (0, gs_sill_width)

			if GLOB_MODPAR_NAME = "gs_sill_angle" then
				gs_sill_endthk = gs_sill_thk - gs_sill_topHeight - (gs_sill_width - gs_sill_topWidth) * tan(gs_sill_angle)
				parameters gs_sill_endthk = gs_sill_endthk
			else
				if abs(gs_sill_width - gs_sill_topWidth) > EPS then
					gs_sill_angle = atn((gs_sill_thk - gs_sill_endthk - gs_sill_topHeight) / (gs_sill_width - gs_sill_topWidth))
					parameters gs_sill_angle = gs_sill_angle
				endif
			endif

			gs_sill_ovhg_left = 0
			gs_sill_ovhg_right = 0
			gs_sill_slip_in	= WIDO_FRAME_THICKNESS

			parameters 	gs_sill_ovhg_left	= gs_sill_ovhg_left,
						gs_sill_ovhg_right	= gs_sill_ovhg_right,
						gs_sill_slip_in		= gs_sill_slip_in

			hideparameter "gs_sill_ovhg_left", "gs_sill_ovhg_right"
			lock "gs_sill_ovhg_left", "gs_sill_ovhg_right", "gs_sill_slip_in"
		endif


! Common Settings for All Sill Types -------------------------------------------

		if not(iSillType = SILL_TIMBER | iSillType = SILL_SOLID_11 | iSillType = SILL_SOLID_12 | iSillType = SILL_SOLID_22) then
			lock "gs_sill_elev"
			hideparameter "gs_sill_elev"
		endif
		if not(iSillType = SILL_ALUMINIUM | iSillType = SILL_SOLID_22 | iSillType = SILL_METAL_1 | iSillType = SILL_METAL_2) then
			lock "gs_sill_dripnos"
			hideparameter "gs_sill_dripnos"
		endif
		if not(iSillType = SILL_ALUMINIUM | iSillType = SILL_SOLID_22) then
			lock "gs_sill_dripwidth"
			hideparameter "gs_sill_dripwidth"
		endif

		values "gs_sill_nosing"		range [minSillNosing,]
		values "gs_sill_ovhg_left"	range [0,]
		values "gs_sill_ovhg_right"	range [0,]
	endif

	if	bittest( gs_SillTypeEnable, 11) | \			! Solid parallel / massiv parallel in Value list
		bittest( gs_SillTypeEnable, 13) then		! Solid parallel 2 / massiv parallel in Value list

		if iSillType <> SILL_PARALLEL & iSillType <> SILL_PARALLEL_2 then
			hideparameter	"gs_sill_edge", "gs_sill_element_thk"
			lock 			"gs_sill_edge", "gs_sill_element_thk"
		endif
	endif

	if gs_stack_left then
		hideparameter "gs_sill_ovhg_left"
		lock "gs_sill_ovhg_left"
	endif
	if gs_stack_right then
		hideparameter "gs_sill_ovhg_right"
		lock "gs_sill_ovhg_right"
	endif
endif

if bSillUSA then						! USA Sill parameter handling
	if isWindow then
		if not( gs_win_type = 83 |\		! WIN_METAL_CURVED
				gs_win_type = 58 |\		! WIN_BOW
				gs_win_type = 59 |\		! WIN_SPLAYBAY
				gs_win_type = 60) then	! WIN_SQUAREBAY
	
			hideparameter "gs_sill_thk"
			lock "gs_sill_thk"
		endif

		if ((gs_wt_m = 4) & not(gs_brick_sill) & gs_fsill) then
			hideparameter	"gs_sill_ovhg_left",
							"gs_sill_ovhg_right"
	
			lock	"gs_sill_ovhg_left",
					"gs_sill_ovhg_right"
		endif
	endif
endif

if not(iSillType = SILL_BRICK |iSillType = SILL_STONE | iSillType = SILL_CERAMIC | \
		iSillType = SILL_ETHERNIT | iSillType = SILL_CONCRETE_TUB | iSillType = SILL_ALUMINIUM | iSillType = SILL_SIMPLEBLOCK) then
	hideparameter "gs_sill_holeDepthBehind"
	lock "gs_sill_holeDepthBehind"
endif

if not(iSillType = SILL_STONE | iSillType = SILL_CERAMIC | iSillType = SILL_ETHERNIT | \
		iSillType = SILL_CONCRETE_TUB | iSillType = SILL_ALUMINIUM | iSillType = SILL_DUTCH) then
	hideparameter	"gs_sill_topWidth"
	lock			"gs_sill_topWidth", "gs_sill_topHeight"
endif

if	bittest( gs_SillTypeEnable, 3) |\		! SILL_CERAMIC
	bittest( gs_SillTypeEnable, 4) |\		! SILL_ETHERNIT
	bittest( gs_SillTypeEnable, 5) |\		! SILL_CONCRETE_TUB
	bittest( gs_SillTypeEnable, 6) then		! SILL_ALUMINIUM

	if not(iSillType = SILL_CERAMIC | iSillType = SILL_ETHERNIT | iSillType = SILL_CONCRETE_TUB | \
			iSillType = SILL_ALUMINIUM) then
		hideparameter	"gs_sill_slip_wall"
		lock			"gs_sill_slip_wall"
	endif
endif

]]></Script_VL>

<!-- GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT -->

<Comment SectVersion="20" SectionFlags="0" SubIdent="0">
<![CDATA[]]>
</Comment>

<CalledMacros SectVersion="2" SectionFlags="0" SubIdent="0">
	<Macro>
		<MName><![CDATA["SaveQueue_WMCC"]]></MName>
		<MainGUID>3C5CB4C9-88DB-4D04-980A-0422BE2B1A24</MainGUID>
	</Macro>
	<Macro>
		<MName><![CDATA["LoadQueue_WMCC"]]></MName>
		<MainGUID>4D59CACA-3851-4598-A37A-A70EB0E48955</MainGUID>
	</Macro>
</CalledMacros>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="11" path="uipicts/Sill/ui_sill_leftovhg_2.png">
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="12" path="uipicts/Sill/ui_sill_rightovhg_2.png">
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="13" path="uipicts/Sill/ui_sill_leftovhg_win0.png">
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="14" path="uipicts/Sill/ui_sill_rightovhg_win0.png">
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="15" path="uipicts/Sill/ui_sill_leftovhg_win1_out.png">
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="16" path="uipicts/Sill/ui_sill_rightovhg_win1_out.png">
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="17" path="uipicts/Sill/ui_sill_leftovhg_win1_in.png">
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="18" path="uipicts/Sill/ui_sill_rightovhg_win1_in.png">
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="19" path="uipicts/Sill/ui_sill_leftovhg_win2_out.png">
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="20" path="uipicts/Sill/ui_sill_rightovhg_win2_out.png">
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="21" path="uipicts/Sill/ui_sill_leftovhg_win2_in.png">
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="22" path="uipicts/Sill/ui_sill_rightovhg_win2_in.png">
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="23" path="uipicts/Sill/ui_sill_leftovhg_win3.png">
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="24" path="uipicts/Sill/ui_sill_rightovhg_win3.png">
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="25" path="uipicts/Sill/ui_sill_leftovhg_win0_noboard.png">
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="26" path="uipicts/Sill/ui_sill_rightovhg_win0_noboard.png">
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="27" path="uipicts/Sill/ui_sill_leftovhg_win1_out_noboard.png">
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="28" path="uipicts/Sill/ui_sill_rightovhg_win1_out_noboard.png">
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="29" path="uipicts/Sill/ui_sill_leftovhg_win1_in_noboard.png">
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="30" path="uipicts/Sill/ui_sill_rightovhg_win1_in_noboard.png">
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="31" path="uipicts/Sill/ui_sill_leftovhg_win2_out_noboard.png">
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="32" path="uipicts/Sill/ui_sill_rightovhg_win2_out_noboard.png">
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="33" path="uipicts/Sill/ui_sill_leftovhg_win2_in_noboard.png">
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="34" path="uipicts/Sill/ui_sill_rightovhg_win2_in_noboard.png">
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="35" path="uipicts/Sill/ui_sill_leftovhg_win3_noboard.png">
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="36" path="uipicts/Sill/ui_sill_rightovhg_win3_noboard.png">
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="37" path="uipicts/Sill/uiSillSectWin0.png">
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="38" path="uipicts/Sill/uiSillSectWin1_out.png">
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="39" path="uipicts/Sill/uiSillSectWin1_in.png">
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="40" path="uipicts/Sill/uiSillSectWin2_out.png">
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="41" path="uipicts/Sill/uiSillSectWin2_in.png">
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="42" path="uipicts/Sill/uiSillSectWin3.png">
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="43" path="uipicts/Sill/ui_sill_angle.png">
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="51" path="uipicts/Sill/uiSillSect00NoSill.png">
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="52" path="uipicts/Sill/ui_sill_type.png">
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="53" path="uipicts/Sill/ui_sill_leftovhg_2_br.png">
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="54" path="uipicts/Sill/ui_sill_rightovhg_2_br.png">
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="55" path="uipicts/Sill/ui_sill_leftovhg_win0_br.png">
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="56" path="uipicts/Sill/ui_sill_rightovhg_win0_br.png">
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="57" path="uipicts/Sill/ui_sill_leftovhg_win1_out_br.png">
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="58" path="uipicts/Sill/ui_sill_rightovhg_win1_out_br.png">
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="59" path="uipicts/Sill/ui_sill_leftovhg_win1_in_br.png">
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="60" path="uipicts/Sill/ui_sill_rightovhg_win1_in_br.png">
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="61" path="uipicts/Sill/ui_sill_leftovhg_win2_out_br.png">
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="62" path="uipicts/Sill/ui_sill_rightovhg_win2_out_br.png">
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="63" path="uipicts/Sill/ui_sill_leftovhg_win2_in_br.png">
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="64" path="uipicts/Sill/ui_sill_rightovhg_win2_in_br.png">
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="65" path="uipicts/Sill/ui_sill_leftovhg_win3_br.png">
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="66" path="uipicts/Sill/ui_sill_rightovhg_win3_br.png">
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="69" path="uipicts/Sill/ui_sill_12_solidparalel_winout.png">
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="70" path="uipicts/Sill/ui_sill_12_solidparalel_winin.png">
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="74" path="uipicts/Sill/usw_sill_solid_fsill0_sill0_cas0.png">
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="75" path="uipicts/Sill/usw_sill_solid_fsill0_sill0_cas1.png">
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="76" path="uipicts/Sill/usw_sill_solid_fsill0_sill1_cas0.png">
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="77" path="uipicts/Sill/usw_sill_solid_fsill0_sill1_cas1.png">
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="78" path="uipicts/Sill/usw_sill_stud_fsill0_sill0_cas0.png">
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="79" path="uipicts/Sill/usw_sill_stud_fsill0_sill0_cas1.png">
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="80" path="uipicts/Sill/usw_sill_stud_fsill0_sill1_cas0.png">
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="81" path="uipicts/Sill/usw_sill_stud_fsill0_sill1_cas1.png">
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="82" path="uipicts/Sill/usw_sill_studws_fsill0_sill0_cas0.png">
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="83" path="uipicts/Sill/usw_sill_studws_fsill0_sill0_cas1.png">
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="84" path="uipicts/Sill/usw_sill_studws_fsill0_sill1_cas0.png">
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="85" path="uipicts/Sill/usw_sill_studws_fsill0_sill1_cas1.png">
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="86" path="uipicts/Sill/usw_sill_brickv_fsill0_sill0_cas1.png">
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="87" path="uipicts/Sill/usw_sill_brickv_fsill0_sill1_cas1.png">
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="88" path="uipicts/Sill/usw_sill_solid_fsill1_sill0_cas0.png">
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="89" path="uipicts/Sill/usw_sill_solid_fsill1_sill0_cas1.png">
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="90" path="uipicts/Sill/usw_sill_solid_fsill1_sill1_cas0.png">
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="91" path="uipicts/Sill/usw_sill_solid_fsill1_sill1_cas1.png">
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="92" path="uipicts/Sill/usw_sill_stud_fsill1_sill0_cas1.png">
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="93" path="uipicts/Sill/usw_sill_stud_fsill1_sill1_cas0.png">
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="94" path="uipicts/Sill/usw_sill_stud_fsill1_sill1_cas1.png">
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="95" path="uipicts/Sill/usw_sill_studws_fsill1_sill0_cas0.png">
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="96" path="uipicts/Sill/usw_sill_studws_fsill1_sill0_cas1.png">
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="97" path="uipicts/Sill/usw_sill_studws_fsill1_sill1_cas0.png">
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="98" path="uipicts/Sill/usw_sill_studws_fsill1_sill1_cas1.png">
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="99" path="uipicts/Sill/usw_sill_brickv_fsill1_sill0_cas1.png">
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="100" path="uipicts/Sill/usw_sill_brickv_fsill1_sill1_cas1.png">
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="101" path="uipicts/Sill/usw_sill_solid_fsill0.png">
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="102" path="uipicts/Sill/usw_sill_comp_fsill0.png">
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="103" path="uipicts/Sill/usw_sill_solid_fsill1.png">
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="104" path="uipicts/Sill/usw_sill_comp_fsill1.png">
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="105" path="uipicts/Sill/usw_sill_solid_st0_ap0.png">
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="106" path="uipicts/Sill/usw_sill_solid_st0_ap1.png">
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="107" path="uipicts/Sill/usw_sill_solid_st1_ap0.png">
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="108" path="uipicts/Sill/usw_sill_solid_st1_ap1.png">
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="109" path="uipicts/Sill/usw_sill_comp_st0_ap0.png">
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="110" path="uipicts/Sill/usw_sill_comp_st0_ap1.png">
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="111" path="uipicts/Sill/usw_sill_comp_st1_ap0.png">
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="112" path="uipicts/Sill/usw_sill_comp_st1_ap1.png">
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="113" path="uipicts/Sill/usmw_sill_solid_sill0_st0.png">
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="114" path="uipicts/Sill/usmw_sill_solid_sill1_st0.png">
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="115" path="uipicts/Sill/usmw_sill_solid_sill0_st1.png">
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="116" path="uipicts/Sill/usmw_sill_solid_sill1_st1.png">
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="117" path="uipicts/Sill/usmw_sill_stud_sill0_st0.png">
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="118" path="uipicts/Sill/usmw_sill_stud_sill1_st0.png">
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="119" path="uipicts/Sill/usmw_sill_stud_sill0_st1.png">
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="120" path="uipicts/Sill/usmw_sill_stud_sill1_st1.png">
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="121" path="uipicts/Sill/usmw_sill_brickv_sill0_st0.png">
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="122" path="uipicts/Sill/usmw_sill_brickv_sill1_st0.png">
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="123" path="uipicts/Sill/usmw_sill_brickv_sill0_st1.png">
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="124" path="uipicts/Sill/usmw_sill_brickv_sill1_st1.png">
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="125" path="uipicts/Sill/ui_sill_14_solidparalel2_winin.png">
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="126" path="uipicts/Sill/ui_sill_14_solidparalel2_winout.png">
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="127" path="uipicts/Sill/ui_sill_14_solidparalel2_withoutbottomreveal_winin.png">
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="128" path="uipicts/Sill/ui_sill_14_solidparalel2_withoutbottomreveal_winout.png">
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="129" path="uipicts/Sill/ui_sill_14_solidparalel2_blindframe_winin.png">
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="130" path="uipicts/Sill/ui_sill_14_solidparalel2_blindframe_winout.png">
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="131" path="uipicts/Sill/ui_sill_14_solidparalel2_withoutinsulation_winin.png">
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="132" path="uipicts/Sill/ui_sill_14_solidparalel2_withoutinsulation_winout.png">
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="133" path="uipicts/Sill/uiSillSect01Timber.png">
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="134" path="uipicts/Sill/uiSillSect02BrickD.png">
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="135" path="uipicts/Sill/uiSillSect02BrickW.png">
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="136" path="uipicts/Sill/uiSillSect03StoneD.png">
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="137" path="uipicts/Sill/uiSillSect03StoneW.png">
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="138" path="uipicts/Sill/uiSillSect04CeramicW.png">
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="139" path="uipicts/Sill/uiSillSect05EternitW.png">
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="140" path="uipicts/Sill/uiSillSect06ConcreteW.png">
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="141" path="uipicts/Sill/uiSillSect07AluminiumW.png">
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="142" path="uipicts/Sill/uiSillSect08Solid1.png">
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="143" path="uipicts/Sill/uiSillSect09Solid2.png">
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="144" path="uipicts/Sill/uiSillSect10Solid3.png">
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="145" path="uipicts/Sill/uiSillSect11Metal1.png">
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="146" path="uipicts/Sill/uiSillSect13Metal2.png">
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="147" path="uipicts/Sill/uiSillSect15SimpleBlockW.png">
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="148" path="uipicts/Sill/uiSillSectBottomD1.png">
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="149" path="uipicts/Sill/uiSillSectBottomD2.png">
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="150" path="uipicts/Sill/uiSillSectBottomD3.png">
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="151" path="uipicts/Sill/uiSillSectBottomW1.png">
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="152" path="uipicts/Sill/uiSillSectBottomW2.png">
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="153" path="uipicts/Sill/uiSillSectBottomW3.png">
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="154" path="uipicts/Sill/uiSillSectDoor1.png">
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="155" path="uipicts/Sill/uiSillSectDoor2.png">
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="156" path="uipicts/Sill/uiSillSectArrowForSolid.png">
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="157" path="uipicts/Sill/uiSillSectArrowForSolid2.png">
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="158" path="uipicts/Sill/uiSillSectArrowForMetal.png">
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="159" path="uipicts/Sill/uiSillSectArrowForSBlock.png">
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="160" path="uipicts/Sill/uiSillSectArrowForBrickD.png">
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="161" path="uipicts/Sill/uiSillPlanLeftovhgDoorIn.png">
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="162" path="uipicts/Sill/uiSillPlanLeftovhgDoorInBr.png">
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="163" path="uipicts/Sill/uiSillPlanLeftovhgDoorInNoboard.png">
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="164" path="uipicts/Sill/uiSillPlanLeftovhgDoorOut.png">
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="165" path="uipicts/Sill/uiSillPlanLeftovhgDoorOutBr.png">
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="166" path="uipicts/Sill/uiSillPlanLeftovhgDoorOutNoboard.png">
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="167" path="uipicts/Sill/uiSillPlanRightovhgDoorIn.png">
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="168" path="uipicts/Sill/uiSillPlanRightovhgDoorInBr.png">
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="169" path="uipicts/Sill/uiSillPlanRightovhgDoorInNoboard.png">
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="170" path="uipicts/Sill/uiSillPlanRightovhgDoorOut.png">
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="171" path="uipicts/Sill/uiSillPlanRightovhgDoorOutBr.png">
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="172" path="uipicts/Sill/uiSillPlanRightovhgDoorOutNoboard.png">
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="173" path="uipicts/Sill/usw_sill_solid_fsill0_nosill.png">
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="174" path="uipicts/Sill/usw_sill_comp_fsill0_nosill.png">
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="175" path="uipicts/Sill/usw_sill_stud_fsill1_sill0_cas0.png">
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="176" path="uipicts/Sill/uiSillSect15SimpleBlockD.png">
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="177" path="uipicts/Sill/uiSillSect16DutchSillD.png">
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="178" path="uipicts/Sill/uiSillSectArrowForSBlockD.png">
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="179" path="uipicts/Sill/uiSillSectDoor1wFrame.png">
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="180" path="uipicts/Sill/uiSillSectDoor2wFrame.png">
</GDLPict>

<GDLPict MIME="image/png" SectVersion="19" SectionFlags="0" SubIdent="181" path="uipicts/Sill/uiSillSect16DutchSillW.png">
</GDLPict>

<!-- GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT -->

<Script_FWM SectVersion="20" SectionFlags="0" SubIdent="0"><![CDATA[

]]></Script_FWM>

<!-- GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT -->

<Script_BWM SectVersion="20" SectionFlags="0" SubIdent="0"><![CDATA[

]]></Script_BWM>

<Keywords SectVersion="1" SectionFlags="0" SubIdent="0">
<![CDATA[]]>
</Keywords>

<Copyright SectVersion="1" SectionFlags="0" SubIdent="0"><Author>BIMobject</Author><License><Type>CC BY-ND</Type><Version>3.0</Version></License></Copyright><ParamSection SectVersion="25" SectionFlags="0" SubIdent="0">
	<ParamSectHeader>
		<Version>25</Version>
		<AutoHotspots>no</AutoHotspots>
		<StatBits>
			<STBit_FixSize/>
		</StatBits>
		<WDLeftFrame>0</WDLeftFrame>
		<WDRightFrame>0</WDRightFrame>
		<WDTopFrame>0</WDTopFrame>
		<WDBotFrame>0</WDBotFrame>
		<LayFlags>65535</LayFlags>
		<WDMirrorThickness>0</WDMirrorThickness>
		<WDWallInset>0</WDWallInset>
		<SymbolColor>0</SymbolColor>
	</ParamSectHeader>
	<Parameters>
		<Length Name="A">
			<Description><![CDATA["Dimension 1"]]></Description>
			<Value>1</Value>
		</Length>
		<Length Name="B">
			<Description><![CDATA["Dimension 2"]]></Description>
			<Value>1</Value>
		</Length>
		<Length Name="ZZYZX">
			<Description><![CDATA["Height"]]></Description>
			<Flags>
				<ParFlg_Hidden/>
			</Flags>
			<Value>1</Value>
		</Length>
		<Boolean Name="AC_show2DHotspotsIn3D">
			<Description><![CDATA["Show 2D Hotspots in 3D"]]></Description>
			<Flags>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0</Value>
		</Boolean>
		<Length Name="ac_bottomlevel">
			<Description><![CDATA["Bottom Level"]]></Description>
			<Flags>
				<ParFlg_Hidden/>
			</Flags>
			<Value>1</Value>
		</Length>
		<Length Name="ac_toplevel">
			<Description><![CDATA["Top Level"]]></Description>
			<Flags>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0</Value>
		</Length>
		<Integer Name="gs_macro_version">
			<Description><![CDATA["Macro Version"]]></Description>
			<Value>12</Value>
		</Integer>
		<Angle Name="AC_Hole_Position_Angle">
			<Description><![CDATA["Hole Position Angle"]]></Description>
			<Value>0</Value>
		</Angle>
		<Boolean Name="AC_HoleSideMaterial">
			<Description><![CDATA["Hole has Wall's Side Surface"]]></Description>
			<Value>0</Value>
		</Boolean>
		<Integer Name="AC_WallType">
			<Description><![CDATA["Wall Type"]]></Description>
			<Value>1</Value>
		</Integer>
		<Integer Name="AC_WindowInWallContour">
			<Description><![CDATA["Window in Wall Contour"]]></Description>
			<ArrayValues FirstDimension="4" SecondDimension="0">
				<AVal Row="1">0</AVal>
				<AVal Row="2">0</AVal>
				<AVal Row="3">0</AVal>
				<AVal Row="4">0</AVal>
			</ArrayValues>
		</Integer>
		<Length Name="AC_WallContourPolygon">
			<Description><![CDATA["Wall Contour Polygon"]]></Description>
			<ArrayValues FirstDimension="1" SecondDimension="3">
				<AVal Column="1" Row="1">0</AVal>
				<AVal Column="2" Row="1">0</AVal>
				<AVal Column="3" Row="1">0</AVal>
			</ArrayValues>
		</Length>
		<Integer Name="AC_Wall_Direction_Type">
			<Description><![CDATA["Wall Direction Type"]]></Description>
			<Value>0</Value>
		</Integer>

		<!-- gs_wallhole_geometry: PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK -->

		<Title Name="gs_wallhole_geometry">
			<Description><![CDATA["Wallhole Geometry"]]></Description>
		</Title>
		<Length Name="refWidth">
			<Description><![CDATA["Reference Width"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Length>
		<Length Name="leftWidth">
			<Description><![CDATA["Left Offset from the Origo"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Length>
		<Length Name="rightWidth">
			<Description><![CDATA["Right Offset from the Origo"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Length>
		<Length Name="radSill">
			<Description><![CDATA["Curved Wall - Sill Radius"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Length>
		<Length Name="WOD">
			<Description><![CDATA["Curved Wall - Wall Center Distance"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Length>
		<Length Name="overSizeLower">
			<Description><![CDATA[""]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Length>
		<Length Name="offsY">
			<Description><![CDATA["Vertical Offset Size"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Length>

		<!-- gs_macro_control_parameters: PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK -->

		<Title Name="gs_macro_control_parameters">
			<Description><![CDATA["Macro Control Parameters"]]></Description>
		</Title>
		<Boolean Name="isWindow">
			<Description><![CDATA["Window=1, Door=0"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Boolean>
		<Boolean Name="gs_IsCurved">
			<Description><![CDATA["Curved Window"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Boolean>
		<Boolean Name="bParalellInCurvedWalls">
			<Description><![CDATA["Parallel Opening in Curved Walls"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Boolean>
		<Boolean Name="bEnableBoard">
			<Description><![CDATA["Enable/Disable Board Function"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1</Value>
		</Boolean>
		<Boolean Name="bEnableCasing">
			<Description><![CDATA["Enable/Disable Casing Function"]]></Description>
			<Value>0</Value>
		</Boolean>
		<Boolean Name="bOpeningDirection">
			<Description><![CDATA["Opening Direction Inside/Outside"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Boolean>
		<Boolean Name="bDoorWithSidelightSupport">
			<Description><![CDATA[""]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Boolean>
		<Integer Name="iWindowShape">
			<Description><![CDATA["Window Shape [0 - 1]"]]></Description>
			<Flags>
				<ParFlg_BoldName/>
			</Flags>
			<Value>0</Value>
		</Integer>

		<!-- gs_window_sizes: PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK -->

		<Title Name="gs_window_sizes">
			<Description><![CDATA["Window Sizes"]]></Description>
		</Title>
		<Length Name="ac_reveal_height">
			<Description><![CDATA["ac_reveal_height"]]></Description>
			<Value>0</Value>
		</Length>
		<Boolean Name="gs_reveal_nominal">
			<Description><![CDATA["Set Reveal Size as Nominal Size"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Boolean>

		<!-- iRevealType: PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK -->

		<Integer Name="iRevealType">
			<Description><![CDATA["Reveal Type"]]></Description>
			<Flags>
				<ParFlg_BoldName/>
			</Flags>
			<Value>1</Value>
		</Integer>
		<Integer Name="iSillRevealType">
			<Description><![CDATA[""]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Integer>
		<Angle Name="gs_reveal_left_angle">
			<Description><![CDATA["Angle Side 2"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>20</Value>
		</Angle>
		<Angle Name="gs_reveal_right_angle">
			<Description><![CDATA["Angle Side"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>20</Value>
		</Angle>
		<Length Name="leftRevealPnts">
			<Description><![CDATA["Left Reveal Points"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<ArrayValues FirstDimension="1" SecondDimension="2">
				<AVal Column="1" Row="1">0</AVal>
				<AVal Column="2" Row="1">0</AVal>
			</ArrayValues>
		</Length>
		<Length Name="rightRevealPnts">
			<Description><![CDATA["Right Reveal Points"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<ArrayValues FirstDimension="1" SecondDimension="2">
				<AVal Column="1" Row="1">0</AVal>
				<AVal Column="2" Row="1">0</AVal>
			</ArrayValues>
		</Length>
		<Integer Name="iRevealPointsIdx">
			<Description><![CDATA["Reveal Points Index"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<ArrayValues FirstDimension="20" SecondDimension="0">
				<AVal Row="1">1</AVal>
				<AVal Row="2">1</AVal>
				<AVal Row="3">1</AVal>
				<AVal Row="4">1</AVal>
				<AVal Row="5">1</AVal>
				<AVal Row="6">1</AVal>
				<AVal Row="7">1</AVal>
				<AVal Row="8">1</AVal>
				<AVal Row="9">1</AVal>
				<AVal Row="10">1</AVal>
				<AVal Row="11">1</AVal>
				<AVal Row="12">1</AVal>
				<AVal Row="13">1</AVal>
				<AVal Row="14">1</AVal>
				<AVal Row="15">1</AVal>
				<AVal Row="16">1</AVal>
				<AVal Row="17">1</AVal>
				<AVal Row="18">1</AVal>
				<AVal Row="19">1</AVal>
				<AVal Row="20">1</AVal>
			</ArrayValues>
		</Integer>
		<Length Name="skinOffsetSill">
			<Description><![CDATA["Thickness of Hidden Wall Skins at Sill Side"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Length>
		<Length Name="original_gs_reveal_bottom">
			<Description><![CDATA[""]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Length>
		<Length Name="gs_reveal_bottom">
			<Description><![CDATA["Sill Jamb Depth"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.06</Value>
		</Length>
		<Length Name="gs_reveal_bottom_sL">
			<Description><![CDATA["Sill Depth Side 2"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Length>
		<Length Name="gs_reveal_bottom_sR">
			<Description><![CDATA["Sill Depth Side 1"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Length>
		<Angle Name="gs_reveal_outerBottom_angle">
			<Description><![CDATA["Outer Angle Bottom Side"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>20</Value>
		</Angle>
		<Length Name="gs_reveal_left_sL">
			<Description><![CDATA["Lower Jamb Depth Side 2"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Length>
		<Length Name="gs_reveal_right_sR">
			<Description><![CDATA["Lower Jamb Depth Side 1"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Length>
		<Boolean Name="gs_mountingFrame">
			<Description><![CDATA[""]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Boolean>
		<Length Name="gs_mountingFrame_depth">
			<Description><![CDATA[""]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Length>

		<!-- gs_turn_plaster: PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK -->

		<Title Name="gs_turn_plaster">
			<Description><![CDATA["Turn Plaster"]]></Description>
		</Title>
		<Boolean Name="gs_turn_plaster_show_3D">
			<Description><![CDATA["Show in 3D"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Boolean>
		<Integer Name="nSkinTurnOut">
			<Description><![CDATA[""]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Integer>
		<Integer Name="nSkinTurnIn">
			<Description><![CDATA[""]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Integer>
		<Length Name="thkPlasterAtSillLeft">
			<Description><![CDATA["Plaster Thickness at Sill - Left Side"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Length>
		<Length Name="thkPlasterAtSillRight">
			<Description><![CDATA["Plaster Thickness at Sill - Right Side"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Length>
		<Length Name="thkPlasterAtSillSlLeft">
			<Description><![CDATA["Plaster Thickness at Sill - Left Sidelight Side"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Length>
		<Length Name="thkPlasterAtSillSlRight">
			<Description><![CDATA["Plaster Thickness at Sill - Right Sidelight Side"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Length>

		<!-- gs_corner_functions: PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK -->

		<Title Name="gs_corner_functions">
			<Description><![CDATA["Corner Functions"]]></Description>
		</Title>
		<Boolean Name="bLeftCornerFunction">
			<Description><![CDATA["Left Corner"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Boolean>
		<Angle Name="leftCornerAngle">
			<Description><![CDATA["Left Corner Angle"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Angle>
		<Length Name="leftConnWallThk">
			<Description><![CDATA["Left Connected Wall Thickness"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Unique/>
			</Flags>
			<Value>0</Value>
		</Length>
		<Boolean Name="bRightCornerFunction">
			<Description><![CDATA["Right Corner"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Boolean>
		<Angle Name="rightCornerAngle">
			<Description><![CDATA["Right Corner Angle"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Angle>
		<Length Name="rightConnWallThk">
			<Description><![CDATA["Right Connected Wall Thickness"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Unique/>
			</Flags>
			<Value>0</Value>
		</Length>

		<!-- gs_window_oversize: PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK -->

		<Title Name="gs_window_oversize">
			<Description><![CDATA["Oversize"]]></Description>
		</Title>
		<Length Name="gs_left_oversize">
			<Description><![CDATA["Left Opening Oversize"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Length>
		<Length Name="gs_right_oversize">
			<Description><![CDATA["Right Opening Oversize"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Length>
		<Length Name="gs_lower_oversize">
			<Description><![CDATA["Lower Opening Oversize"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Length>
		<Boolean Name="gs_trim_outside">
			<Description><![CDATA["Casing Outside"]]></Description>
			<Flags>
				<ParFlg_Hidden/>
			</Flags>
			<Value>1</Value>
		</Boolean>
		<Boolean Name="bDrawOutsideTrim">
			<Description><![CDATA["Casing Outside"]]></Description>
			<Flags>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0</Value>
		</Boolean>
		<Length Name="gs_trim_thk_out">
			<Description><![CDATA["Thickness on Wall"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.019</Value>
		</Length>
		<Boolean Name="gs_trim_atframe_out">
			<Description><![CDATA["Casing at Frame Outside"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Boolean>
		<Length Name="gs_trim_width_out">
			<Description><![CDATA["Thickness in Wallhole"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Length>

		<!-- thresholdCHE: PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK -->

		<Title Name="thresholdCHE">
			<Description><![CDATA["CHE Threshold Parameters"]]></Description>
		</Title>
		<Length Name="thresholdExtraHole3D">
			<Description><![CDATA["Threshold Extra Hole"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Length>
		<Integer Name="iThresholdType">
			<Description><![CDATA["Threshold"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Integer>

		<!-- gs_sill_outside: PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK -->

		<Boolean Name="gs_sill_outside">
			<Description><![CDATA["Sill"]]></Description>
			<Flags>
				<ParFlg_BoldName/>
			</Flags>
			<Value>1</Value>
		</Boolean>
		<Boolean Name="gs_sill_outside_sl_left">
			<Description><![CDATA["Sill - Sidelight Left"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1</Value>
		</Boolean>
		<Boolean Name="gs_sill_outside_sl_right">
			<Description><![CDATA["Sil - Sidelight Left"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1</Value>
		</Boolean>
		<Boolean Name="bDrawSill">
			<Description><![CDATA["Draw Sill 2D and 3D"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1</Value>
		</Boolean>
		<Boolean Name="gs_fsill">
			<Description><![CDATA["Bottom frame at Sill"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Boolean>
		<Integer Name="gs_SillTypeEnable">
			<Description><![CDATA["Sill Type Enable"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>2047</Value>
		</Integer>
		<Boolean Name="gs_sill_oversize">
			<Description><![CDATA["Sill Oversize"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Boolean>
		<Integer Name="iSillType">
			<Description><![CDATA["Type of the Sill"]]></Description>
			<Flags>
				<ParFlg_Child/>
				<ParFlg_Hidden/>
			</Flags>
			<Value>1</Value>
		</Integer>
		<Length Name="gs_sill_thk">
			<Description><![CDATA["Sill Thickness"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Length>
		<Length Name="gs_sill_endthk">
			<Description><![CDATA["Sill Front Thickness"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.03</Value>
		</Length>
		<Length Name="gs_sill_elev">
			<Description><![CDATA["Sill Elevation"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Length>
		<Boolean Name="gs_sill_drip">
			<Description><![CDATA["Sill Drip"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Boolean>
		<Length Name="gs_sill_dripnos">
			<Description><![CDATA["Sill Drip Overlap"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.02</Value>
		</Length>
		<Length Name="gs_sill_dripwidth">
			<Description><![CDATA["Sill Drip Width"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.01</Value>
		</Length>
		<Length Name="gs_sill_nosing">
			<Description><![CDATA["Sill Nosing"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.03</Value>
		</Length>
		<Angle Name="gs_sill_angle">
			<Description><![CDATA["Sill Angle"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>3</Value>
		</Angle>
		<String Name="gs_sill_edge">
			<Description><![CDATA["Sill Edge Type"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<Length Name="gs_sill_element_thk">
			<Description><![CDATA["Sill Height"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.02</Value>
		</Length>
		<Length Name="gs_sill_ovhg_left">
			<Description><![CDATA["Sill Overhang Left"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Length>
		<Length Name="gs_sill_ovhg_right">
			<Description><![CDATA["Sill Overhang Right"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Length>
		<Length Name="gs_sill_slip_in">
			<Description><![CDATA["Sill Slip-in Depth"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Length>
		<Length Name="gs_sill_slip_wall">
			<Description><![CDATA["Sill Slip from Wall"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Length>
		<Length Name="gs_sill_holeDepthBehind">
			<Description><![CDATA[""]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Length>
		<Length Name="gs_sill_width">
			<Description><![CDATA["Width of Sill"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.03</Value>
		</Length>
		<Length Name="gs_sill_topWidth">
			<Description><![CDATA["Sill Top Width"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.02</Value>
		</Length>
		<Length Name="gs_sill_topHeight">
			<Description><![CDATA["Sill Top Height"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.01</Value>
		</Length>
		<Integer Name="iBrickSilldetlevel">
			<Description><![CDATA["Brick Sill 3D Detail Level"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1</Value>
		</Integer>
		<Length Name="gs_brick_sill_br_thk">
			<Description><![CDATA["Brick Thickness"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.065</Value>
		</Length>
		<Length Name="gs_brick_sill_mort_thk">
			<Description><![CDATA["Mortar Thickness"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.015</Value>
		</Length>
		<Boolean Name="gs_sill_curved">
			<Description><![CDATA["Sill is Curved in Curved Walls"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1</Value>
		</Boolean>
		<Boolean Name="gs_sill_ins_below">
			<Description><![CDATA["Insulation below Sill"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1</Value>
		</Boolean>
		<Boolean Name="gs_sill_ins_use_wall_skin">
			<Description><![CDATA["Use Wall Insulation Skin"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Boolean>
		<Length Name="minSillNosing">
			<Description><![CDATA["Minimal Nosing"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Length>

		<!-- gs_board_inside: PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK -->

		<Boolean Name="gs_board_inside">
			<Description><![CDATA["Board"]]></Description>
			<Flags>
				<ParFlg_BoldName/>
			</Flags>
			<Value>0</Value>
		</Boolean>
		<Length Name="gs_board_thk">
			<Description><![CDATA["Board Thickness"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0.025</Value>
		</Length>
		<Length Name="gs_board_slip_in">
			<Description><![CDATA["Board Slip-in Depth"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Length>
		<Boolean Name="bShowSillSplice">
			<Description><![CDATA["Show Sill Splice Lines (CW)"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1</Value>
		</Boolean>
		<Boolean Name="bWindowSymbolAtMiddle">
			<Description><![CDATA["Window Symbol at Middle"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Boolean>

		<!-- gs_2D_representation: PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK -->

		<Title Name="gs_2D_representation">
			<Description><![CDATA["2D and Section Representation"]]></Description>
		</Title>
		<Integer Name="lod2D_sillBoard">
			<Description><![CDATA["Level of Detail in 2D"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1</Value>
		</Integer>
		<Boolean Name="bShowAddHotspots">
			<Description><![CDATA["Show Additional Hotspots"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Boolean>
		<PenColor Name="gs_pen_2D">
			<Description><![CDATA["2D Contour Pen"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>4</Value>
		</PenColor>
		<Boolean Name="gs_bFills">
			<Description><![CDATA["Use Fills"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Boolean>
		<FillPattern Name="gs_sill_wallhole_fill">
			<Description><![CDATA["Wallhole Fill Type"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</FillPattern>
		<PenColor Name="gs_sill_wallhole_pen_fg">
			<Description><![CDATA["Wallhole Fill Pen"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</PenColor>
		<PenColor Name="gs_sill_wallhole_pen_bg">
			<Description><![CDATA["Wallhole Fill Background Pen"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>92</Value>
		</PenColor>
		<FillPattern Name="gs_sill_wallhole_fill_sl">
			<Description><![CDATA["Wallhole Fill Type"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</FillPattern>
		<PenColor Name="gs_sill_wallhole_pen_sl_fg">
			<Description><![CDATA["Wallhole Fill Pen"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</PenColor>
		<PenColor Name="gs_sill_wallhole_pen_sl_bg">
			<Description><![CDATA["Wallhole Fill Background Pen"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</PenColor>
		<LineType Name="gs_sillTreshold_lineType">
			<Description><![CDATA["Threshold Line Type"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1</Value>
		</LineType>
		<PenColor Name="gs_sill_pen_2D">
			<Description><![CDATA["Sill 2D Pen"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</PenColor>
		<PenColor Name="gs_sill_pen_3D">
			<Description><![CDATA["Sill 3D Pen"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</PenColor>
		<FillPattern Name="gs_sill_fill">
			<Description><![CDATA["Sill Section Fill Type"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>65</Value>
		</FillPattern>
		<PenColor Name="gs_sill_pen_fg">
			<Description><![CDATA["Sill Section Fill Pen"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</PenColor>
		<PenColor Name="gs_sill_pen_bg">
			<Description><![CDATA["Sill Section Fill Background Pen"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>92</Value>
		</PenColor>
		<PenColor Name="gs_sill_pen_sectcont">
			<Description><![CDATA["Section Contour Pen"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</PenColor>
		<PenColor Name="gs_sill_pen_ins_sectcont">
			<Description><![CDATA["Section Insulation Contour Pen"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>2</Value>
		</PenColor>
		<FillPattern Name="gs_sill_fill_ins_fg">
			<Description><![CDATA["Section Insulation Fill Type"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</FillPattern>
		<PenColor Name="gs_sill_pen_ins_fg">
			<Description><![CDATA["Section Insulation Fill Pen"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</PenColor>
		<PenColor Name="gs_sill_pen_ins_bg">
			<Description><![CDATA["Section Insulation Fill Background Pen"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</PenColor>

		<!-- gs_3D_representation: PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK -->

		<Title Name="gs_3D_representation">
			<Description><![CDATA["3D Representation"]]></Description>
		</Title>
		<Integer Name="lod3D">
			<Description><![CDATA["Level of Detail in 3D"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1</Value>
		</Integer>
		<Integer Name="iLoD3D">
			<Description><![CDATA[""]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1</Value>
		</Integer>
		<Integer Name="lod3D_Sill">
			<Description><![CDATA["3D Detail Level for Sill"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Integer>
		<PenColor Name="gs_frame_pen">
			<Description><![CDATA["Frame Pen"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>2</Value>
		</PenColor>

		<!-- gs_window_material: PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK -->

		<Title Name="gs_window_material">
			<Description><![CDATA["Surfaces"]]></Description>
		</Title>
		<Material Name="gs_sill_mat">
			<Description><![CDATA["Sill Surface"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>38</Value>
		</Material>
		<Material Name="gs_brick_sill_mort_mat">
			<Description><![CDATA["Mortar Surface"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>2</Value>
		</Material>

		<!-- ac_details: PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK -->

		<Title Name="ac_details">
			<Description><![CDATA["Computed Oversize Values"]]></Description>
		</Title>
		<Length Name="ac_left_oversize">
			<Description><![CDATA["AC Left Opening Oversize"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Length>
		<Length Name="ac_right_oversize">
			<Description><![CDATA["AC Right Opening Oversize"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Length>
		<Length Name="ac_lower_oversize">
			<Description><![CDATA["AC Lower Opening Oversize"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Length>

		<!-- gs_window_stack: PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK -->

		<Title Name="gs_window_stack">
			<Description><![CDATA["Ganging"]]></Description>
		</Title>
		<Boolean Name="gs_stack_left">
			<Description><![CDATA["Connection on the Left"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Boolean>
		<Boolean Name="gs_stack_right">
			<Description><![CDATA["Connection on the Right"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Boolean>
		<Boolean Name="gs_stack_bottom">
			<Description><![CDATA["Connection on the Bottom"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Boolean>

		<!-- gs_sidelight_left: PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK -->

		<Boolean Name="gs_sidelight_left">
			<Description><![CDATA["Left Sidelight"]]></Description>
			<Flags>
				<ParFlg_BoldName/>
			</Flags>
			<Value>0</Value>
		</Boolean>
		<Length Name="gs_sidelight_WHole_width_left">
			<Description><![CDATA[""]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Length>
		<Length Name="gs_sidelight_parapet_hgt_left">
			<Description><![CDATA[""]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Length>

		<!-- gs_sidelight_right: PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK -->

		<Boolean Name="gs_sidelight_right">
			<Description><![CDATA["Right Sidelight"]]></Description>
			<Flags>
				<ParFlg_BoldName/>
			</Flags>
			<Value>0</Value>
		</Boolean>
		<Length Name="gs_sidelight_WHole_width_right">
			<Description><![CDATA[""]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Length>
		<Length Name="gs_sidelight_parapet_hgt_right">
			<Description><![CDATA[""]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Length>

		<!-- gs_string_resources: PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK -->

		<Title Name="gs_string_resources">
			<Description><![CDATA["String Resources"]]></Description>
		</Title>
		<String Name="stSillTypes">
			<Description><![CDATA["gs_sill_type"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<ArrayValues FirstDimension="17" SecondDimension="0">
				<AVal Row="1"><![CDATA["Timber Sill"]]></AVal>
				<AVal Row="2"><![CDATA["Brick Sill"]]></AVal>
				<AVal Row="3"><![CDATA["Stone Sill"]]></AVal>
				<AVal Row="4"><![CDATA["Ceramic Sill"]]></AVal>
				<AVal Row="5"><![CDATA["Eternit Sill"]]></AVal>
				<AVal Row="6"><![CDATA["Concrete Tub"]]></AVal>
				<AVal Row="7"><![CDATA["Aluminum Sill"]]></AVal>
				<AVal Row="8"><![CDATA["Solid Sill 1.1"]]></AVal>
				<AVal Row="9"><![CDATA["Solid Sill 1.2"]]></AVal>
				<AVal Row="10"><![CDATA["Solid Sill 2.2"]]></AVal>
				<AVal Row="11"><![CDATA["Metal Sheet"]]></AVal>
				<AVal Row="12"><![CDATA["Solid Parallel"]]></AVal>
				<AVal Row="13"><![CDATA["Metal Sheet 2"]]></AVal>
				<AVal Row="14"><![CDATA["Solid Parallel 2"]]></AVal>
				<AVal Row="15"><![CDATA["Simple Block"]]></AVal>
				<AVal Row="16"><![CDATA["Block Sill"]]></AVal>
				<AVal Row="17"><![CDATA["Dutch Profiled Sill"]]></AVal>
			</ArrayValues>
		</String>
		<String Name="stBsilldetlevel">
			<Description><![CDATA["gs_brick_sill_detlev"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<ArrayValues FirstDimension="2" SecondDimension="0">
				<AVal Row="1"><![CDATA["Simple"]]></AVal>
				<AVal Row="2"><![CDATA["Detailed"]]></AVal>
			</ArrayValues>
		</String>
		<String Name="stSillEdge">
			<Description><![CDATA[""]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<ArrayValues FirstDimension="2" SecondDimension="0">
				<AVal Row="1"><![CDATA["Perpendicular"]]></AVal>
				<AVal Row="2"><![CDATA["Vertical"]]></AVal>
			</ArrayValues>
		</String>
		<String Name="stSillUi">
			<Description><![CDATA[""]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<ArrayValues FirstDimension="42" SecondDimension="0">
				<AVal Row="1"><![CDATA["Sill"]]></AVal>
				<AVal Row="2"><![CDATA["Sill Type"]]></AVal>
				<AVal Row="3"><![CDATA["Overhang Left"]]></AVal>
				<AVal Row="4"><![CDATA["Overhang Right"]]></AVal>
				<AVal Row="5"><![CDATA["Slip in Depth"]]></AVal>
				<AVal Row="6"><![CDATA["Is Curved in Curved Walls"]]></AVal>
				<AVal Row="7"><![CDATA["Sill Oversize"]]></AVal>
				<AVal Row="8"><![CDATA["Surface"]]></AVal>
				<AVal Row="9"><![CDATA["Fill Type"]]></AVal>
				<AVal Row="10"><![CDATA["Fill Pen"]]></AVal>
				<AVal Row="11"><![CDATA["Background Pen"]]></AVal>
				<AVal Row="12"><![CDATA["Brick"]]></AVal>
				<AVal Row="13"><![CDATA["Mortar"]]></AVal>
				<AVal Row="14"><![CDATA["3D Detail Level"]]></AVal>
				<AVal Row="15"><![CDATA["Sill Detail Level"]]></AVal>
				<AVal Row="16"><![CDATA["Check this option if the parapet height should be measured from the top of the sill."]]></AVal>
				<AVal Row="17"><![CDATA["Brick Thickness"]]></AVal>
				<AVal Row="18"><![CDATA["Mortar Thickness"]]></AVal>
				<AVal Row="19"><![CDATA["Sill Angle"]]></AVal>
				<AVal Row="20"><![CDATA["Sill Thickness"]]></AVal>
				<AVal Row="21"><![CDATA["Sill Nosing"]]></AVal>
				<AVal Row="22"><![CDATA["Sill Width"]]></AVal>
				<AVal Row="23"><![CDATA["Sill Elevation"]]></AVal>
				<AVal Row="24"><![CDATA["Sill End Thickness"]]></AVal>
				<AVal Row="25"><![CDATA["Sill Drip Length"]]></AVal>
				<AVal Row="26"><![CDATA["Sill Drip Width"]]></AVal>
				<AVal Row="27"><![CDATA["Section Attributes"]]></AVal>
				<AVal Row="28"><![CDATA["Insulation Section Attributes"]]></AVal>
				<AVal Row="29"><![CDATA["Contour Pen"]]></AVal>
				<AVal Row="30"><![CDATA["Sill Height"]]></AVal>
				<AVal Row="31"><![CDATA["Outer Edge"]]></AVal>
				<AVal Row="32"><![CDATA["Insulation below Sill"]]></AVal>
				<AVal Row="33"><![CDATA["Use Wall Insulation Skin"]]></AVal>
				<AVal Row="34"><![CDATA["Rear Hole Depth"]]></AVal>
				<AVal Row="35"><![CDATA["Upper Thickness"]]></AVal>
				<AVal Row="36"><![CDATA["Upper Width"]]></AVal>
				<AVal Row="37"><![CDATA["Sill Front Side Thickness"]]></AVal>
				<AVal Row="38"><![CDATA["Sill - Sidelight 1"]]></AVal>
				<AVal Row="39"><![CDATA["Sill - Sidelight 2"]]></AVal>
				<AVal Row="40"><![CDATA["Sill - Door"]]></AVal>
				<AVal Row="41"><![CDATA["Sill - Sidelight"]]></AVal>
				<AVal Row="42"><![CDATA[""]]></AVal>
			</ArrayValues>
		</String>
		<Boolean Name="bSillPage">
			<Description><![CDATA[""]]></Description>
			<Value>0</Value>
		</Boolean>
		<Integer Name="iPanelType">
			<Description><![CDATA[""]]></Description>
			<Value>0</Value>
		</Integer>

		<!-- gs_usa_parameters: PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK -->

		<Title Name="gs_usa_parameters">
			<Description><![CDATA["USA Parameters"]]></Description>
		</Title>
		<Boolean Name="bSillUSA">
			<Description><![CDATA[""]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Boolean>
		<Boolean Name="gs_brick_sill">
			<Description><![CDATA["Brick Sill"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Boolean>
		<Integer Name="gs_wt_m">
			<Description><![CDATA["Wall Type"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Integer>
		<Boolean Name="bSillPageUSA">
			<Description><![CDATA[""]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Boolean>
		<Length Name="bSillNnosUsa">
			<Description><![CDATA[""]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Length>
		<Length Name="frameWidthLeft">
			<Description><![CDATA[""]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Length>
		<Length Name="frameWidthRight">
			<Description><![CDATA[""]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Length>
		<String Name="stSillTextUSA">
			<Description><![CDATA[""]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<ArrayValues FirstDimension="18" SecondDimension="0">
				<AVal Row="1"><![CDATA[""]]></AVal>
				<AVal Row="2"><![CDATA[""]]></AVal>
				<AVal Row="3"><![CDATA[""]]></AVal>
				<AVal Row="4"><![CDATA[""]]></AVal>
				<AVal Row="5"><![CDATA[""]]></AVal>
				<AVal Row="6"><![CDATA[""]]></AVal>
				<AVal Row="7"><![CDATA[""]]></AVal>
				<AVal Row="8"><![CDATA[""]]></AVal>
				<AVal Row="9"><![CDATA[""]]></AVal>
				<AVal Row="10"><![CDATA[""]]></AVal>
				<AVal Row="11"><![CDATA[""]]></AVal>
				<AVal Row="12"><![CDATA[""]]></AVal>
				<AVal Row="13"><![CDATA[""]]></AVal>
				<AVal Row="14"><![CDATA[""]]></AVal>
				<AVal Row="15"><![CDATA[""]]></AVal>
				<AVal Row="16"><![CDATA[""]]></AVal>
				<AVal Row="17"><![CDATA[""]]></AVal>
				<AVal Row="18"><![CDATA[""]]></AVal>
			</ArrayValues>
		</String>
		<String Name="stBoardUI">
			<Description><![CDATA[""]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<ArrayValues FirstDimension="9" SecondDimension="0">
				<AVal Row="1"><![CDATA[""]]></AVal>
				<AVal Row="2"><![CDATA[""]]></AVal>
				<AVal Row="3"><![CDATA[""]]></AVal>
				<AVal Row="4"><![CDATA[""]]></AVal>
				<AVal Row="5"><![CDATA[""]]></AVal>
				<AVal Row="6"><![CDATA[""]]></AVal>
				<AVal Row="7"><![CDATA[""]]></AVal>
				<AVal Row="8"><![CDATA[""]]></AVal>
				<AVal Row="9"><![CDATA[""]]></AVal>
			</ArrayValues>
		</String>
		<String Name="stCasingUI">
			<Description><![CDATA[""]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<ArrayValues FirstDimension="46" SecondDimension="0">
				<AVal Row="1"><![CDATA[""]]></AVal>
				<AVal Row="2"><![CDATA[""]]></AVal>
				<AVal Row="3"><![CDATA[""]]></AVal>
				<AVal Row="4"><![CDATA[""]]></AVal>
				<AVal Row="5"><![CDATA[""]]></AVal>
				<AVal Row="6"><![CDATA[""]]></AVal>
				<AVal Row="7"><![CDATA[""]]></AVal>
				<AVal Row="8"><![CDATA[""]]></AVal>
				<AVal Row="9"><![CDATA[""]]></AVal>
				<AVal Row="10"><![CDATA[""]]></AVal>
				<AVal Row="11"><![CDATA[""]]></AVal>
				<AVal Row="12"><![CDATA[""]]></AVal>
				<AVal Row="13"><![CDATA[""]]></AVal>
				<AVal Row="14"><![CDATA[""]]></AVal>
				<AVal Row="15"><![CDATA[""]]></AVal>
				<AVal Row="16"><![CDATA[""]]></AVal>
				<AVal Row="17"><![CDATA[""]]></AVal>
				<AVal Row="18"><![CDATA[""]]></AVal>
				<AVal Row="19"><![CDATA[""]]></AVal>
				<AVal Row="20"><![CDATA[""]]></AVal>
				<AVal Row="21"><![CDATA[""]]></AVal>
				<AVal Row="22"><![CDATA[""]]></AVal>
				<AVal Row="23"><![CDATA[""]]></AVal>
				<AVal Row="24"><![CDATA[""]]></AVal>
				<AVal Row="25"><![CDATA[""]]></AVal>
				<AVal Row="26"><![CDATA[""]]></AVal>
				<AVal Row="27"><![CDATA[""]]></AVal>
				<AVal Row="28"><![CDATA[""]]></AVal>
				<AVal Row="29"><![CDATA[""]]></AVal>
				<AVal Row="30"><![CDATA[""]]></AVal>
				<AVal Row="31"><![CDATA[""]]></AVal>
				<AVal Row="32"><![CDATA[""]]></AVal>
				<AVal Row="33"><![CDATA[""]]></AVal>
				<AVal Row="34"><![CDATA[""]]></AVal>
				<AVal Row="35"><![CDATA[""]]></AVal>
				<AVal Row="36"><![CDATA[""]]></AVal>
				<AVal Row="37"><![CDATA[""]]></AVal>
				<AVal Row="38"><![CDATA[""]]></AVal>
				<AVal Row="39"><![CDATA[""]]></AVal>
				<AVal Row="40"><![CDATA[""]]></AVal>
				<AVal Row="41"><![CDATA[""]]></AVal>
				<AVal Row="42"><![CDATA[""]]></AVal>
				<AVal Row="43"><![CDATA[""]]></AVal>
				<AVal Row="44"><![CDATA[""]]></AVal>
				<AVal Row="45"><![CDATA[""]]></AVal>
				<AVal Row="46"><![CDATA[""]]></AVal>
			</ArrayValues>
		</String>
		<String Name="stSubTabpageToolTip">
			<Description><![CDATA[""]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value><![CDATA[""]]></Value>
		</String>
		<Boolean Name="gs_apron">
			<Description><![CDATA["Apron"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Boolean>
		<Boolean Name="gs_metal">
			<Description><![CDATA["Metal Window"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Boolean>
		<Integer Name="gs_win_type">
			<Description><![CDATA["Window Type"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1</Value>
		</Integer>
		<Length Name="CasingOutsLeftOutPoint">
			<Description><![CDATA[""]]></Description>
			<Value>0.1</Value>
		</Length>
		<Length Name="CasingOutsRightOutPoint">
			<Description><![CDATA[""]]></Description>
			<Value>0.1</Value>
		</Length>
		<Boolean Name="gs_trim_show_cover_out">
			<Description><![CDATA["Cover Outer Wall Surface"]]></Description>
			<Value>1</Value>
		</Boolean>
		<Boolean Name="bShowSillUICHE">
			<Description><![CDATA[""]]></Description>
			<Value>0</Value>
		</Boolean>
		<Boolean Name="bShowSillOversize">
			<Description><![CDATA[""]]></Description>
			<Value>1</Value>
		</Boolean>

		<!-- frameParameters: PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK -->

		<Title Name="frameParameters">
			<Description><![CDATA["Frame"]]></Description>
		</Title>
		<Length Name="leftFrameOffset">
			<Description><![CDATA["Left Frame"]]></Description>
			<Value>0.05</Value>
		</Length>
		<Length Name="rightFrameOffset">
			<Description><![CDATA["Right Frame"]]></Description>
			<Value>0.05</Value>
		</Length>
	</Parameters>
</ParamSection>
</Symbol>
