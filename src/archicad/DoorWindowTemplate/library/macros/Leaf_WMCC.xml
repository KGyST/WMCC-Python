<Symbol IsArchivable="no" IsPlaceable="no" MainGUID="0AC8A4D5-5DA3-4684-927C-C731C168DAE7" MigrationValue="Normal" Owner="1196638531" Signature="1196644685" Version="34">
<Ancestry SectVersion="1" SectionFlags="0" SubIdent="0" Template="no">
	<MainGUID>F938E33A-329D-4A36-BE3E-85E126820996</MainGUID>
	<MainGUID>103E8D2C-8230-42E1-9597-46F84CCE28C0</MainGUID>
	<MainGUID>B2970E4C-8680-4061-8670-2F4B638F3953</MainGUID>
</Ancestry>

<CalledMacros SectVersion="2" SectionFlags="0" SubIdent="0">
	<Macro>
		<MName><![CDATA["Profil_WMCC"]]></MName>
		<MainGUID>38D7C161-614B-45E5-9FF0-A3726F441B49</MainGUID>
	</Macro>
</CalledMacros>

<!-- GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT -->

<Script_3D SectVersion="20" SectionFlags="0" SubIdent="0"><![CDATA[

resol gs_resol

pen gs_leaf_pen

! ==================================================================
! Flipping at Inward Opening
! ==================================================================
if not(bOpenOut) then
	mulz -1
	addz -gs_frame_thk
endif

! ==================================================================
! Transformations of leaf opening
! ==================================================================

OpenNumTrans	= 0


if	bShowHinge &\
	(iOpeningType = OPTYPE_SIDE_HUNG |\
	iOpeningType = OPTYPE_SIDE_HUNG_M |\
	iOpeningType = OPTYPE_TILT_TURN |\
	iOpeningType = OPTYPE_TILT_TURN_M) then

	mulx LeafXMirr
	add A/2 + hingeOffsX,	0, -hingeOffsZ

	gosub "hinge"

	del 2
endif


if	iOpeningType = OPTYPE_TILT_TURN |\
	iOpeningType = OPTYPE_TILT_TURN_M then

	rotz 90
	add -B/2 - hingeOffsX,	0,	-hingeOffsZ

	hotspot 0,										0,				0,											UnID,"gs_open_3D_tt", 6		: UnID = UnID+1
	hotspot OpLineLeafHeight,						0,				0,											UnID,"gs_open_3D_tt", 4+128	: UnID = UnID+1
	hotspot OpLineLeafHeight * cos(gs_open_3D_tt),	0,				- OpLineLeafHeight * sin(gs_open_3D_tt),	UnID,"gs_open_3D_tt", 5		: UnID = UnID+1
	hotspot 0,										-1,				0,											UnID,"gs_open_3D_tt", 7		: UnID = UnID+1

	roty gs_open_3D_tt
	add B/2 + hingeOffsX,	0, hingeOffsZ
	rotz -90
	OpenNumTrans	= OpenNumTrans + 5
endif

if	iOpeningType = OPTYPE_SIDE_HUNG |\
	iOpeningType = OPTYPE_SIDE_HUNG_M |\
	iOpeningType = OPTYPE_TILT_TURN |\
	iOpeningType = OPTYPE_TILT_TURN_M then

	mulx LeafXMirr
	add A/2 + hingeOffsX,	0, -hingeOffsZ

	hotspot 0,									-B/2 + handleOffsY,				0,										UnID,"gs_open_3D", 6	: UnID = UnID+1
	hotspot -OpLineLeafWidth,					-B/2 + handleOffsY,				0,										UnID,"gs_open_3D", 4+128	: UnID = UnID+1
	hotspot -OpLineLeafWidth * cos(gs_open_3D),	-B/2 + handleOffsY,				- OpLineLeafWidth * sin(gs_open_3D),	UnID,"gs_open_3D", 5	: UnID = UnID+1
	hotspot 0,									-B/2 + handleOffsY + HSRevAng,	0,										UnID,"gs_open_3D", 7	: UnID = UnID+1

	roty -gs_open_3D
	add -A/2 - hingeOffsX,	0, hingeOffsZ
	OpenNumTrans	= OpenNumTrans + 4
endif

if	iOpeningType = OPTYPE_VER_PIVOT |\
	iOpeningType = OPTYPE_VER_PIVOT_M then

	mulx LeafXMirr
	add 0, -B/2 + handleOffsY, -hingeOffsZ

	hotspot 0,										0,			0,										UnID,"gs_open_3D", 6	: UnID = UnID+1
	hotspot -OpLineLeafWidth/2,						0,			0,										UnID,"gs_open_3D", 4+128	: UnID = UnID+1
	hotspot -OpLineLeafWidth/2 * cos(gs_open_3D),	0,  		- OpLineLeafWidth/2 * sin(gs_open_3D),	UnID,"gs_open_3D", 5	: UnID = UnID+1
	hotspot 0,										HSRevAng,	0,										UnID,"gs_open_3D", 7	: UnID = UnID+1

	roty -gs_open_3D
	add 0,	0, hingeOffsZ
	OpenNumTrans	= OpenNumTrans + 4
endif

if	iOpeningType = OPTYPE_HOR_PIVOT then

	add 0, 0, -hingeOffsZ

	hotspot 0,			0,										0,										UnID,"gs_open_3D", 6	: UnID = UnID+1
	hotspot 0,			OpLineLeafHeight/2,						0,										UnID,"gs_open_3D", 4+128	: UnID = UnID+1
	hotspot 0,			OpLineLeafHeight/2 * cos(gs_open_3D),  	- OpLineLeafHeight/2 * sin(gs_open_3D),	UnID,"gs_open_3D", 5	: UnID = UnID+1
	hotspot HSRevAng,	0,										0,										UnID,"gs_open_3D", 7	: UnID = UnID+1

	rotx -gs_open_3D
	add 0,	0, hingeOffsZ
	OpenNumTrans	= OpenNumTrans + 3
endif

if	iOpeningType = OPTYPE_BOTTOM_HUNG |\
	iOpeningType = OPTYPE_TOP_HUNG then

	muly LeafYMirr
	rotz 90
	add -B/2 - hingeOffsX,	0,	-hingeOffsZ

	hotspot 0,									0,				0,										UnID,"gs_open_3D", 6		: UnID = UnID+1
	hotspot OpLineLeafHeight,					0,				0,										UnID,"gs_open_3D", 4+128	: UnID = UnID+1
	hotspot OpLineLeafHeight * cos(gs_open_3D),	0,				- OpLineLeafHeight * sin(gs_open_3D),	UnID,"gs_open_3D", 5		: UnID = UnID+1
	hotspot 0,									-HSRevAng,		0,										UnID,"gs_open_3D", 7		: UnID = UnID+1

	roty gs_open_3D
	add B/2 + hingeOffsX,	0, hingeOffsZ
	rotz -90
	OpenNumTrans	= OpenNumTrans + 6
endif

if	iOpeningType = OPTYPE_LEFT_SLIDING |\
	iOpeningType = OPTYPE_RIGHT_SLIDING then

	mulx LeafXMirr

	if	iOpeningType = OPTYPE_LEFT_SLIDING then
		hotspot A/2,					-B/2 + handleOffsY,	0,		UnID,	"gs_open_3D_w", 1+128	: UnID = UnID+1
		hotspot A/2 - gs_open_3D_w,		-B/2 + handleOffsY,	0,		UnID,	"gs_open_3D_w", 2		: UnID = UnID+1
		hotspot A/2 + 0.1,				-B/2 + handleOffsY,	0,		UnID,	"gs_open_3D_w", 3		: UnID = UnID+1
	
		addx -gs_open_3D_w
	else
		hotspot A/2,					-B/2 + handleOffsY,	0,		UnID,	"gs_open_3D_2_w", 1+128	: UnID = UnID+1
		hotspot A/2 - gs_open_3D_2_w,	-B/2 + handleOffsY,	0,		UnID,	"gs_open_3D_2_w", 2		: UnID = UnID+1
		hotspot A/2 + 0.1,				-B/2 + handleOffsY,	0,		UnID,	"gs_open_3D_2_w", 3		: UnID = UnID+1

		addx -gs_open_3D_2_w
	endif
	
	OpenNumTrans	= OpenNumTrans + 2
endif


if iDetLevel3D >= DETLEVEL_3D_100 then

	material materialS[MAT_SASH_OUT]
	if	iOpeningType = OPTYPE_FIXED then
		material materialS[MAT_GLASS]
	endif

	poly_ 10,
		-A/2,	-B/2, 1,
		-A/2,	B/2, 1,
		A/2,	B/2, 1,
		A/2,	-B/2, 1,
		-A/2,	-B/2, -1,

		-A/2 + gs_leaf_width,	-B/2 + gs_leaf_width, 1,
		-A/2 + gs_leaf_width,	B/2 - gs_leaf_width, 1,
		A/2 - gs_leaf_width,	B/2 - gs_leaf_width, 1,
		A/2 - gs_leaf_width,	-B/2 + gs_leaf_width, 1,
		-A/2 + gs_leaf_width,	-B/2 + gs_leaf_width, -1

	material materialS[MAT_GLASS]
	poly_ 4,
		-A/2 + gs_leaf_width,	-B/2 + gs_leaf_width, 1,
		-A/2 + gs_leaf_width,	B/2 - gs_leaf_width, 1,
		A/2 - gs_leaf_width,	B/2 - gs_leaf_width, 1,
		A/2 - gs_leaf_width,	-B/2 + gs_leaf_width, 1
	
	
!	poly 4,
!		-A/2,	-B/2,
!		-A/2,	B/2,
!		A/2,	B/2,
!		A/2,	-B/2

else
	!!!!!!!!!!!!!!*****************************************************************************************
	!!!!!!!!!!!!!!********************************   	Leaf Profiles     *********************************
	!!!!!!!!!!!!!!*****************************************************************************************

	gosub "LeafType1"


	!!!!!!!!!!!!!!*****************************************************************************************
	!!!!!!!!!!!!!!********************************   	Glazing     ***************************************
	!!!!!!!!!!!!!!*****************************************************************************************
	body -1
	
	pen gs_glass_pen
	
	DelGlasTrans = 0
	addz OffsetZ	: DelGlasTrans = DelGlasTrans + 1
	for u = 1 to GlassLayers
		material materialS[MAT_GLASS]
		sect_fill fFillS[FILL_GLASS], pFillS[FILL_GLASS][FP_BGPEN], pFillS[FILL_GLASS][FP_FGPEN], pFillS[FILL_GLASS][FP_CONTPEN]
	
		if	not(GLOB_CONTEXT = 3 &\		! workaround since only 2 layers can be transparent in AC18 Cinema rendering
			u <> 1 &\
			u <> GlassLayers) then
			prism_ 5, GlassThk[u][1],
				-A/2 + OffsetGL,	-B/2 + OffsetGBot,	15,
				 A/2 - OffsetGR,	-B/2 + OffsetGBot,	15,
				 A/2 - OffsetGR,	 B/2 - OffsetGTop,	15,
				-A/2 + OffsetGL,	 B/2 - OffsetGTop,	15,
				-A/2 + OffsetGL,	-B/2 + OffsetGBot,	-1
			body -1
		endif
	
		addz GlassThk[u][1]	: DelGlasTrans = DelGlasTrans + 1
		if GlassThk[u][2] > EPS then
			material materialS[MAT_GLASSBACK]
			sect_fill fFillS[FILL_SEALANT], pFillS[FILL_SEALANT][FP_BGPEN], pFillS[FILL_SEALANT][FP_FGPEN], pFillS[FILL_SEALANT][FP_CONTPEN]
	
			prism_ 10, GlassThk[u][2],
				-A/2 + OffsetGL,	-B/2 + OffsetGBot,	15,
				 A/2 - OffsetGR,	-B/2 + OffsetGBot,	15,
				 A/2 - OffsetGR,	 B/2 - OffsetGTop,	15,
				-A/2 + OffsetGL,	 B/2 - OffsetGTop,	15,
				-A/2 + OffsetGL,	-B/2 + OffsetGBot,	-1,
		
				-A/2 + OffsetGL + GumiDepth,	-B/2 + OffsetGBot + GumiDepth,	15,
				 A/2 - OffsetGR - GumiDepth,	-B/2 + OffsetGBot + GumiDepth,	15,
				 A/2 - OffsetGR - GumiDepth,	 B/2 - OffsetGTop - GumiDepth,	15,
				-A/2 + OffsetGL + GumiDepth,	 B/2 - OffsetGTop - GumiDepth,	15,
				-A/2 + OffsetGL + GumiDepth,	-B/2 + OffsetGBot + GumiDepth,	-1
			body -1
		endif
		addz GlassThk[u][2]	: DelGlasTrans = DelGlasTrans + 1
	next u
	
	del DelGlasTrans
endif

!!!!!!**********************************************************************  HANDLE 
!!!!!!**********************************************************************  HANDLE 
!!!!!!**********************************************************************  HANDLE 

pen gs_leaf_pen

if	bShowHandle &\
	iOpeningType <> OPTYPE_FIXED &\
	iOpeningType <> OPTYPE_FIXED_SCREW then

	handleTransNum = 0

	if	iOpeningType = OPTYPE_BOTTOM_HUNG |\
		iOpeningType = OPTYPE_TOP_HUNG |\
		iOpeningType = OPTYPE_HOR_PIVOT then
		add 0, B/2 - handleOffsX, 0
		handleTransNum = handleTransNum + 1
	else
		if	iOpeningType = OPTYPE_LEFT_SLIDING |\
			iOpeningType = OPTYPE_RIGHT_SLIDING then
			mulx -1
			handleTransNum = handleTransNum + 1
		endif

		add -A/2 + handleOffsX, -B/2 + handleOffsY, 0
		handleTransNum = handleTransNum + 1
	endif
	mulz -1
		gosub "handle"
	del 1

	if not(isWindow) then
		addz gs_leaf_thk
			gosub "handle"
		del 1
	endif

	del handleTransNum
endif



!!!!!!**********************************************************************  OPENING LINES 
!!!!!!**********************************************************************  OPENING LINES 
!!!!!!**********************************************************************  OPENING LINES 

if bOplines3d then 
	PEN gs_opLinePen

	oplineTransNum = 0
	oplineOffs = 0.0001
	
	if  iOpeningType = OPTYPE_SIDE_HUNG |\
		iOpeningType = OPTYPE_SIDE_HUNG_M |\
		iOpeningType = OPTYPE_TILT_TURN |\
		iOpeningType = OPTYPE_TILT_TURN_M then 

		if gs_opline_style_m = 2  then 
			MULx -1
			oplineTransNum = oplineTransNum + 1
		endif

		OpLineType3d = opLineType3dIn
		dx1 = A/2: dy1 = -B/2 : dz1 = -oplineOffs : dx2 = -A/2: dy2 = 0  : dz2 = -oplineOffs
		gosub "LineTypeDefiner"
		dx1 = A/2 : dy1 = B/2 : dz1 = -oplineOffs : dx2 = -A/2 : dy2 = 0  : dz2 = -oplineOffs
		gosub "LineTypeDefiner"
	
		opLineType3d = opLineType3dOut
		dx1 = A/2 : dy1 = -B/2 : dz1 = gs_leaf_thk+oplineOffs : dx2 = -A/2 : dy2 = 0  : dz2 = gs_leaf_thk+oplineOffs
		gosub "LineTypeDefiner"
		dx1 = A/2 : dy1 = B/2 : dz1 = gs_leaf_thk+oplineOffs : dx2 = -A/2 : dy2 = 0  : dz2 = gs_leaf_thk+oplineOffs
		gosub "LineTypeDefiner"

		del oplineTransNum
	endif 

	if	iOpeningType = OPTYPE_TILT_TURN |\
		iOpeningType = OPTYPE_TILT_TURN_M |\
		iOpeningType = OPTYPE_BOTTOM_HUNG |\
		iOpeningType = OPTYPE_TOP_HUNG then 

		oplineTransNum = 0

		if gs_opline_style_m = 2  then 
			MULx -1
			oplineTransNum = oplineTransNum + 1
		endif

		OpLineType3d = opLineType3dIn
		dx1 = -A/2: dy1 = -B/2 : dz1 = -oplineOffs : dx2 = 0: dy2 = B/2  : dz2 = -oplineOffs
		gosub "LineTypeDefiner"
		dx1 = A/2: dy1 = -B/2 : dz1 = -oplineOffs : dx2 = 0: dy2 = B/2  : dz2 = -oplineOffs
		gosub "LineTypeDefiner"

		opLineType3d = opLineType3dOut
		dx1 = -A/2 : dy1 = -B/2 : dz1 = gs_leaf_thk+oplineOffs : dx2 = 0 : dy2 = B/2  : dz2 = gs_leaf_thk+oplineOffs
		gosub "LineTypeDefiner"
		dx1 = A/2 : dy1 = -B/2 : dz1 = gs_leaf_thk+oplineOffs : dx2 = 0 : dy2 = B/2  : dz2 = gs_leaf_thk+oplineOffs
		gosub "LineTypeDefiner"

		del oplineTransNum
	endif


	if	iOpeningType = OPTYPE_RIGHT_SLIDING |\
		iOpeningType = OPTYPE_LEFT_SLIDING then 

		oplineTransNum = 0

		if gs_opline_style_m = 2  then 
			MULx -1
			oplineTransNum = oplineTransNum + 1
		endif

		addx -A/2
		oplineTransNum = oplineTransNum + 1

		dz1 = 0
		dz2 = 0

		opLineType3d = opLineType3dIn
		dx1 = A/4 : dy1 = 0 : dx2 = 3*A/4 : dy2 = 0
		gosub "LineTypeDefiner"
		dx1 = A/4 : dy1 = 0 : dx2 = A/4+0.1 : dy2 = 0.05
		gosub "LineTypeDefiner"
		dx1 = A/4 : dy1 = 0 : dx2 = A/4+0.1 : dy2 = -0.05
		gosub "LineTypeDefiner"


		opLineType3d = opLineType3dOut
		dz1 = gs_leaf_thk
		dz2 = gs_leaf_thk
		dx1 = A/4 : dy1 = 0 : dx2 = 3*A/4 : dy2 = 0
		gosub "LineTypeDefiner"
		dx1 = A/4 : dy1 = 0 : dx2 = A/4+0.1 : dy2 = 0.05
		gosub "LineTypeDefiner"
		dx1 = A/4 : dy1 = 0 : dx2 = A/4+0.1 : dy2 = -0.05
		gosub "LineTypeDefiner"
	
		del oplineTransNum

	endif

	if	iOpeningType = OPTYPE_VER_PIVOT |\
		iOpeningType = OPTYPE_VER_PIVOT_M then

		OpLineType3d = opLineType3dIn
		dx1 = -A/2: dy1 = 0 : dz1 = -oplineOffs : dx2 = 0: dy2 = B/2  : dz2 = -oplineOffs
		gosub "LineTypeDefiner"
		dx1 = -A/2: dy1 = 0 : dz1 = -oplineOffs : dx2 = 0: dy2 = -B/2  : dz2 = -oplineOffs
		gosub "LineTypeDefiner"
		dx1 = A/2 : dy1 = 0 : dz1 = gs_leaf_thk+oplineOffs : dx2 = 0 : dy2 = B/2  : dz2 = gs_leaf_thk+oplineOffs
		gosub "LineTypeDefiner"
		dx1 = A/2 : dy1 = 0 : dz1 = gs_leaf_thk+oplineOffs : dx2 = 0 : dy2 = -B/2  : dz2 = gs_leaf_thk+oplineOffs
		gosub "LineTypeDefiner"

		opLineType3d = opLineType3dOut
		dx1 = -A/2 : dy1 = 0 : dz1 = gs_leaf_thk+oplineOffs : dx2 = 0 : dy2 = B/2  : dz2 = gs_leaf_thk+oplineOffs
		gosub "LineTypeDefiner"
		dx1 = -A/2 : dy1 = 0 : dz1 = gs_leaf_thk+oplineOffs : dx2 = 0 : dy2 = -B/2  : dz2 = gs_leaf_thk+oplineOffs
		gosub "LineTypeDefiner"
		dx1 = A/2: dy1 = 0 : dz1 = -oplineOffs : dx2 = 0: dy2 = B/2  : dz2 = -oplineOffs
		gosub "LineTypeDefiner"
		dx1 = A/2: dy1 = 0 : dz1 = -oplineOffs : dx2 = 0: dy2 = -B/2  : dz2 = -oplineOffs
		gosub "LineTypeDefiner"

	endif

	if	iOpeningType = OPTYPE_HOR_PIVOT then
		OpLineType3d = opLineType3dIn
		dx1 = -A/2: dy1 = 0 : dz1 = -oplineOffs : dx2 = 0: dy2 = B/2  : dz2 = -oplineOffs
		gosub "LineTypeDefiner"
		dx1 = A/2: dy1 = 0 : dz1 = -oplineOffs : dx2 = 0: dy2 = B/2  : dz2 = -oplineOffs
		gosub "LineTypeDefiner"
		dx1 = -A/2 : dy1 = 0 : dz1 = gs_leaf_thk+oplineOffs : dx2 = 0 : dy2 = -B/2  : dz2 = gs_leaf_thk+oplineOffs
		gosub "LineTypeDefiner"
		dx1 = A/2 : dy1 = 0 : dz1 = gs_leaf_thk+oplineOffs : dx2 = 0 : dy2 = -B/2  : dz2 = gs_leaf_thk+oplineOffs
		gosub "LineTypeDefiner"

		opLineType3d = opLineType3dOut
		dx1 = -A/2 : dy1 = 0 : dz1 = gs_leaf_thk+oplineOffs : dx2 = 0 : dy2 = B/2  : dz2 = gs_leaf_thk+oplineOffs
		gosub "LineTypeDefiner"
		dx1 = A/2 : dy1 = 0 : dz1 = gs_leaf_thk+oplineOffs : dx2 = 0 : dy2 = B/2  : dz2 = gs_leaf_thk+oplineOffs
		gosub "LineTypeDefiner"
		dx1 = -A/2: dy1 = 0 : dz1 = -oplineOffs : dx2 = 0: dy2 = -B/2  : dz2 = -oplineOffs
		gosub "LineTypeDefiner"
		dx1 = A/2: dy1 = 0 : dz1 = -oplineOffs : dx2 = 0: dy2 = -B/2  : dz2 = -oplineOffs
		gosub "LineTypeDefiner"

	endif
endif


del OpenNumTrans

if not(bOpenOut) then
	del 2
endif

! ==================================================================
END	! END ! END ! END ! END ! END ! END ! END ! END ! END ! END ! END
! ==================================================================

! ==================================================================
"baseTexture":
! ==================================================================
	base
	vert 0,   0,   0	!#1
	vert 0,   0,   0.1	!#2
	vert 0.1, 0,   0	!#3
	vert 0,   0.1, 0	!#4
	coor 258, -1, -2, -3, -4
	body -1 
return


!!!!!!*********************************************************** LINE TYPES

"LineTypeDefiner":
	!!!dx1 = 0 : dy1 = 0 : dz1 = 0 : dx2 = 1 : dy2 = 0 : dz2 = 0.8 	
		
	if opLineType3d <EPS then 
		LIN_ dx1, dy1, dz1, dx2, dy2, dz2 
	endif

	if ABS(opLineType3d-1)<EPS then 
		MainLineLength = 0.1
		MainGap = 0.05
		Length2D = SQR((dx2-dx1)**2+(dy2-dy1)**2)
		Length3D = SQR((Length2D)**2+(dz2-dz1)**2)
		
		LineNum = MAX(1, INT(Length3D/(MainLineLength+MainGap)))

		dxfull = ((dx2-dx1)/LineNum)
		dyfull = ((dy2-dy1)/LineNum)
		dzfull = ((dz2-dz1)/LineNum)

		dxline = ((dx2-dx1)/LineNum)*(MainLineLength/(MainLineLength+MainGap))
		dyline = ((dy2-dy1)/LineNum)*(MainLineLength/(MainLineLength+MainGap))
		dzline = ((dz2-dz1)/LineNum)*(MainLineLength/(MainLineLength+MainGap))

		ADD dx1, dy1, dz1 !+ 0.018
		for LNum=1 to LineNum
			ADD (LNum-1)*dxfull, (LNum-1)*dyfull, (LNum-1)*dzfull
			LIN_ 0, 0, 0, dxline, dyline, dzline
			DEL 1
		next LNum
		DEL 1
	endif

	if ABS(opLineType3d-2) <EPS then 
		MainLineLength = 0.1
		MainGap = 0.05
		MainPoint = 0.02

		Length2D = SQR((dx2-dx1)**2+(dy2-dy1)**2)
		Length3D = SQR((Length2D)**2+(dz2-dz1)**2)
		
		LineNum = MAX(1, INT(Length3D/(MainLineLength+2*MainGap+MainPoint)))
		
		dxfull = ((dx2-dx1)/LineNum)
		dyfull = ((dy2-dy1)/LineNum)
		dzfull = ((dz2-dz1)/LineNum)

		dxline = ((dx2-dx1)/LineNum)*(MainLineLength/(MainLineLength+2*MainGap+MainPoint))
		dyline = ((dy2-dy1)/LineNum)*(MainLineLength/(MainLineLength+2*MainGap+MainPoint))
		dzline = ((dz2-dz1)/LineNum)*(MainLineLength/(MainLineLength+2*MainGap+MainPoint))

		dxgap = ((dx2-dx1)/LineNum)*(MainGap/(MainLineLength+2*MainGap+MainPoint))
		dygap = ((dy2-dy1)/LineNum)*(MainGap/(MainLineLength+2*MainGap+MainPoint))
		dzgap = ((dz2-dz1)/LineNum)*(MainGap/(MainLineLength+2*MainGap+MainPoint))

		dxpoint = ((dx2-dx1)/LineNum)*(MainPoint/(MainLineLength+2*MainGap+MainPoint))
		dypoint = ((dy2-dy1)/LineNum)*(MainPoint/(MainLineLength+2*MainGap+MainPoint))
		dzpoint = ((dz2-dz1)/LineNum)*(MainPoint/(MainLineLength+2*MainGap+MainPoint))

		ADD dx1, dy1, dz1 !+ 0.018
		for LNum=1 to LineNum
			ADD (LNum-1)*dxfull, (LNum-1)*dyfull, (LNum-1)*dzfull
			LIN_ 0, 0, 0, dxline, dyline, dzline
			ADD dxline+dxgap, dyline+dygap, dzline+dzgap
			LIN_ 0, 0, 0, dxpoint, dypoint, dzpoint	
			DEL 2
		next LNum
		DEL 1
	endif
return


! ==================================================================
"handle":
! ==================================================================
	if iDetLevel3D > DETLEVEL_3D_50 then return

	nsH = NSP

	material materialS[MAT_HANDLE]
	sect_fill fFillS[FILL_HANDLE], pFillS[FILL_HANDLE][FP_BGPEN], pFillS[FILL_HANDLE][FP_FGPEN], pFillS[FILL_HANDLE][FP_CONTPEN]

	! --- Handle #1 ---
	if iHandleType = HANDLE_1 then

		cylind tHandleBase, rHandleBase

		if	iOpeningType <> OPTYPE_BOTTOM_HUNG &\
			iOpeningType <> OPTYPE_TOP_HUNG &\
			iOpeningType <> OPTYPE_HOR_PIVOT then
			addy -distHandleBase
			cylind tHandleBase, rHandleBase
			del 1
		endif
		addz tHandleBase
		put \
			0, 0, -0.1, 0,
			0, 0, 0, 0,
			0, 0, lHandle1 - rHandleCurve, 0
		if abs(rHandleCurve) > EPS then
			angHd	= 90 / ceil (gs_resol / 3)
			for wH = 1 to ceil (gs_resol / 3) - 1
				put rHandleCurve * (1 - cos (wH * angHd)), 0,
					lHandle1 - rHandleCurve + rHandleCurve * sin (wH * angHd), 0
			next wH
		endif
		put \
			rHandleCurve, 0, lHandle1, 0,
			lHandle2, 0, lHandle1, 0,
			lHandle2 + 0.1, 0, lHandle1, 0
		if nsH > 0 then put get (nsH)
		if	iHandleStatus	= HANDLE_DOWN then
			rotz -90
		endif
		if	iHandleStatus	= HANDLE_SIDE then
			rotz 0
		endif
		if	iHandleStatus	= HANDLE_UP then
			rotz 90
		endif
			tube 2, (NSP - nsH) / 4, 63,
				0, 0, 901,
				rHandle, 360, 4001,
				get (NSP - nsH)
		del 1
		del 1
	endif

!	! --- Handle #2 ---
!
return


! ==================================================================
"hinge":
! ==================================================================
	if nHinge < EPS or iDetLevel3D > DETLEVEL_3D_50 then return

	material materialS[MAT_HANDLE]
	sect_fill fFillS[FILL_HANDLE], pFillS[FILL_HANDLE][FP_BGPEN], pFillS[FILL_HANDLE][FP_FGPEN], pFillS[FILL_HANDLE][FP_CONTPEN]

	rotx -90
	rotz 180

	! --- Hinge #1 ---
		if iHingeType = HINGE_1 then
			for wH = 1 to nHinge
				addz zPosHinges[wH]
					! upper part
					addz gapHinge / 2
					rotz -gs_open_3D
						cylind hHingeT, rHinge
						prism 4, hHingeT / 2,
							0.000, rHinge,
							0.000, rHinge + 0.025,
							0.0025, rHinge + 0.025,
							0.0025, rHinge
					del 2
					! lower part
					addz -hHingeB - gapHinge / 2
						cylind hHingeB, rHinge
						addz hHingeB / 2
							prism 4, hHingeB / 2,
								0.000, rHinge,
								0.000, rHinge + 0.025,
								-0.0025, rHinge + 0.025,
								-0.0025, rHinge
						del 1
					del 1
				del 1
			next wH
		endif

!	! --- Hinge #2 ---
!

	del 2
return


]]></Script_3D>

<!-- GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT -->

<Script_2D SectVersion="20" SectionFlags="0" SubIdent="0"><![CDATA[


! ==================================================================
! Flipping at Inward Opening
! ==================================================================
if not(bOpenOut) then
	mul2 1, -1
	add2 0, gs_frame_thk
endif


! ==================================================================
! Transformations of leaf opening
! ==================================================================

OpenNumTrans	= 0

if	iOpeningType = OPTYPE_SIDE_HUNG |\
	iOpeningType = OPTYPE_SIDE_HUNG_M |\
	iOpeningType = OPTYPE_TILT_TURN |\
	iOpeningType = OPTYPE_TILT_TURN_M then

	mul2 LeafXMirr, 1
	add2 A/2 + hingeOffsX,	hingeOffsZ


	hotspot2 0,										0,									UnID,"gs_open_2D", 6 + 512 * bHSRevAng		: UnID = UnID+1
	hotspot2 -OpLineLeafWidth,						0,									UnID,"gs_open_2D", 4+128					: UnID = UnID+1
	hotspot2 -OpLineLeafWidth * cos(gs_open_2D),	OpLineLeafWidth * sin(gs_open_2D),	UnID,"gs_open_2D", 5						: UnID = UnID+1

	if bShowHinge then
		gosub "hinge"
	endif

	rot2 -gs_open_2D
	add2 -A/2 - hingeOffsX,	-hingeOffsZ
	OpenNumTrans	= OpenNumTrans + 4
endif

if	iOpeningType = OPTYPE_LEFT_SLIDING |\
	iOpeningType = OPTYPE_RIGHT_SLIDING then

	mul2 LeafXMirr, 1

	if	iOpeningType = OPTYPE_LEFT_SLIDING then
		hotspot2 A/2,						0,		UnID,	"gs_open_2D_w", 1+128	: UnID = UnID+1
		hotspot2 A/2 - gs_open_2D_w,		0,		UnID,	"gs_open_2D_w", 2		: UnID = UnID+1
		hotspot2 A/2 + 0.1,					0,		UnID,	"gs_open_2D_w", 3		: UnID = UnID+1

		add2 -gs_open_2D_w, 0
	else
		hotspot2 A/2,						0,		UnID,	"gs_open_2D_2_w", 1+128	: UnID = UnID+1
		hotspot2 A/2 - gs_open_2D_2_w,		0,		UnID,	"gs_open_2D_2_w", 2		: UnID = UnID+1
		hotspot2 A/2 + 0.1,					0,		UnID,	"gs_open_2D_2_w", 3		: UnID = UnID+1
	
		add2 -gs_open_2D_2_w, 0
	endif

	OpenNumTrans	= OpenNumTrans + 2
endif

if	iOpeningType = OPTYPE_VER_PIVOT |\
	iOpeningType = OPTYPE_VER_PIVOT_M then

	mul2 LeafXMirr, 1
	add2 0, hingeOffsZ

	hotspot2 0,										0,										UnID,"gs_open_2D", 6 + 512 * bHSRevAng	: UnID = UnID+1
	hotspot2 -OpLineLeafWidth/2,					0,										UnID,"gs_open_2D", 4+128	: UnID = UnID+1
	hotspot2 -OpLineLeafWidth/2 * cos(gs_open_2D),	OpLineLeafWidth/2 * sin(gs_open_2D),UnID,"gs_open_2D", 5	: UnID = UnID+1

	rot2 -gs_open_2D
	add2 0,	-hingeOffsZ

	OpenNumTrans	= OpenNumTrans + 4

endif

if iDetLevel2D	>= DETLEVEL_2D_100 then

	pen			pFills[FILL_SASH][FP_CONTPEN]
	line_type	lFillS[FILL_SASH]

	line2 -A/2, 0, A/2, 0

else
	
	! ==================================================================
	! Leaf Background Fill
	! ==================================================================

	if iOpeningType <> OPTYPE_FIXED then
		pen 		pFills[FILL_EMPTY][FP_CONTPEN]
		line_type	lFillS[FILL_EMPTY]
		Fill		fFillS[FILL_EMPTY]

		FillStatus	= 1 + 2 !+ 4
		FillOffsetZ= 0
		
		FillOffsetLout	= 0.038
		FillOffsetRout	= 0.038
		FillOffsetLin	= 0.038
		FillOffsetRin	= 0.038
		

		poly2_b 4, FillStatus, pFillS[FILL_EMPTY][FP_FGPEN], pFillS[FILL_EMPTY][FP_BGPEN],
			-A/2 + FillOffsetLout,	FillOffsetZ,				1,
			A/2 - FillOffsetRout,	FillOffsetZ,				0, 
			A/2 - FillOffsetRin,	FillOffsetZ - gs_leaf_thk,	1,
			-A/2 + FillOffsetLin,	FillOffsetZ - gs_leaf_thk,	0
	endif
	
	
	!!!!!!!!!!!!!!*****************************************************************************************
	!!!!!!!!!!!!!!********************************   	Frame Profiles     ********************************
	!!!!!!!!!!!!!!*****************************************************************************************

		gosub "LeafType1"
	
	
	!!!!!!!!!!!!!!*****************************************************************************************
	!!!!!!!!!!!!!!********************************   	Glazing     ***************************************
	!!!!!!!!!!!!!!*****************************************************************************************
	
	
	DelGlasTrans = 0
	ADD2 0, -OffsetZ 	: DelGlasTrans = DelGlasTrans+1
	MUL2 1,-1			: DelGlasTrans = DelGlasTrans+1


	for u=1 to GlassLayers

		pen			pFillS[FILL_GLASS][FP_CONTPEN]
		line_type	lFillS[FILL_GLASS]
		Fill 		fFillS[FILL_GLASS]
		Pen_FG = pFillS[FILL_GLASS][FP_FGPEN]
		Pen_BG = pFillS[FILL_GLASS][FP_BGPEN]

		poly2_b 5,1+2,Pen_FG, Pen_BG,
			-A/2 + OffsetGL,	0,1,
			A/2 - OffsetGR,		0,1,
			A/2 - OffsetGR,		GlassThk[u][1],1,
			-A/2 + OffsetGL,	GlassThk[u][1],1,
			-A/2 + OffsetGL,	0,-1
	
		ADD2 0, GlassThk[u][1]	: DelGlasTrans = DelGlasTrans+1
		if GlassThk[u][2] > EPS then 
	
			pen			pFillS[FILL_SEALANT][FP_CONTPEN]
			line_type	lFillS[FILL_SEALANT]
			Fill 		fFillS[FILL_SEALANT]
			Pen_FG = pFillS[FILL_SEALANT][FP_FGPEN]
			Pen_BG = pFillS[FILL_SEALANT][FP_BGPEN]
	
			poly2_b 5,1+2,Pen_FG, Pen_BG,
				-A/2 + OffsetGL,				0,1,
				-A/2 + OffsetGL + GumiDepth,	0,1,
				-A/2 + OffsetGL + GumiDepth,	GlassThk[u][2],1,
				-A/2 + OffsetGL,				GlassThk[u][2],1,
				-A/2 + OffsetGL,				0,-1
	
			poly2_b 5,1+2,Pen_FG, Pen_BG,
				A/2 - OffsetGR,				0,1,
				A/2 - OffsetGR-GumiDepth,	0,1,
				A/2 - OffsetGR-GumiDepth,	GlassThk[u][2],1,
				A/2 - OffsetGR,				GlassThk[u][2],1,
				A/2 - OffsetGR,				0,-1
	
		endif
		ADD2 0, GlassThk[u][2]	: DelGlasTrans = DelGlasTrans+1
	next u
	DEL DelGlasTrans 

endif


!!!!!!**********************************************************************  HANDLE 
!!!!!!**********************************************************************  HANDLE 
!!!!!!**********************************************************************  HANDLE 
if bShowHandle  &\
	iOpeningType <> OPTYPE_FIXED &\
	iOpeningType <> OPTYPE_FIXED_SCREW &\
	iOpeningType <> OPTYPE_BOTTOM_HUNG &\
	iOpeningType <> OPTYPE_HOR_PIVOT then

	handleTransNum = 0
	
	if	iOpeningType = OPTYPE_LEFT_SLIDING |\
		iOpeningType = OPTYPE_RIGHT_SLIDING then
		mul2 -1,1
		handleTransNum = handleTransNum + 1
	endif
	if	iOpeningType <> OPTYPE_TOP_HUNG then
		add2 -A/2 + handleOffsX, 0
		handleTransNum = handleTransNum + 1
	endif
	gosub "handle"

	if not(isWindow) then
		add2 0, -gs_leaf_thk
		mul2 1, -1
			gosub "handle"
		handleTransNum = handleTransNum + 2
	endif
	del handleTransNum
endif

!!!!!!**********************************************************************  OPENING LINES 
!!!!!!**********************************************************************  OPENING LINES 
!!!!!!**********************************************************************  OPENING LINES 

del OpenNumTrans


if	iOpeningType = OPTYPE_SIDE_HUNG |\
	iOpeningType = OPTYPE_SIDE_HUNG_M |\
	iOpeningType = OPTYPE_LEFT_SLIDING |\
	iOpeningType = OPTYPE_RIGHT_SLIDING |\
	iOpeningType = OPTYPE_TILT_TURN |\
	iOpeningType = OPTYPE_TILT_TURN_M |\
	iOpeningType = OPTYPE_VER_PIVOT |\
	iOpeningType = OPTYPE_VER_PIVOT_M then
	gosub "oplines"
endif


!!!!!!**********************************************************************
if not(bOpenOut) then
	del 2
endif


END
!!!!!!!*****************************************************************************
!!!!!!!*END END END END END END END END END END END END END END END END END END ****
!!!!!!!*****************************************************************************

!!!!!!!!!=======================================================================  Put The Profile on Both side - Left + Right
! Incoming Parameters
! [nsp] - Profile Contour parameters [X,Y,Status]
! Pen_FG - Fill Pen 
! Pen_BG - Background Fill Pen
! OffsetR - Rigth Frame Offset
! OffsetL - Left Frame Offset
!
! Returning Parameters
! None
!
! Returning Model
! Profile Polygon fill
!!!!!!!!------------------------------------------------------------------------
"DrawFill2D":
	if nsp>8 then 
		ADD2 A/2,0
		poly2_b nsp/3, 1+2, Pen_FG, Pen_BG,
			use(nsp)
		DEL 1
		ADD2 -A/2,0
		MUL2 -1,1
		poly2_b nsp/3, 1+2, Pen_FG, Pen_BG,
			get(nsp)
		DEL 2
	else
		for i=1 to nsp
			temp = get(1)
		next i
	endif

return


! ---------------------------------------------------------------------------
"oplines":
! ---------------------------------------------------------------------------
	
	mul2 LeafXMirr, 1

		if	iOpeningType = OPTYPE_LEFT_SLIDING |\
			iOpeningType = OPTYPE_RIGHT_SLIDING then
			if gs_iSlidingType = LINE_SHAPE_SLIDING_ARROW then
				gosub "slidingOpeningArrow"
			endif
			if gs_iSlidingType = LINE_SHAPE_SLIDING_SIMPLE_LINE then
				gosub "slidingOpeningSimpleLine"
			endif
		else
			if	iOpeningType = OPTYPE_VER_PIVOT |\
				iOpeningType = OPTYPE_VER_PIVOT_M then
				gosub "pivotOpeningLine"
			else
				gosub "swingOpeningLine"
			endif
		endif
	del 1

return

! ---------------------------------------------------------------------------
"slidingOpeningSimpleLine":
! ---------------------------------------------------------------------------

	add2 0, -LeafPosZ - gs_frame_thk/2

	line2 0, 0.5, 0, -0.5

	del 1

return

! ---------------------------------------------------------------------------
"slidingOpeningArrow":
! ---------------------------------------------------------------------------

	pen gs_opLinePen
	line_type gs_swingLineType

	if	iOpeningType = OPTYPE_LEFT_SLIDING then
		add2 -gs_open_2D_w - 0.1, 0
	else
		add2 -gs_open_2D_2_w - 0.1, 0
	endif
		line2 0, 0.10, 0.20, 0.10
	
		line2 0.00, 0.10, 0.05, 0.13
		line2 0.00, 0.10, 0.05, 0.07
	del 1
return

! ---------------------------------------------------------------------------
"swingOpeningLine":
! ---------------------------------------------------------------------------

	pen gs_opLinePen
	line_type gs_swingLineType

	add2 A/2 + hingeOffsX,	hingeOffsZ

	if	abs(gs_open_2D) > EPS then
		if gs_iSwingType=1 then 
			arc2 0, 0, OpLineLeafWidth, 180 - gs_open_2D,  180
		else
			line2 -OpLineLeafWidth, 0, -OpLineLeafWidth * cos(gs_open_2D), OpLineLeafWidth * sin(gs_open_2D)
		endif
	endif

	del 1
return

! ---------------------------------------------------------------------------
"pivotOpeningLine":
! ---------------------------------------------------------------------------

	pen gs_opLinePen
	line_type gs_swingLineType

	add2 0,	hingeOffsZ

	if	abs(gs_open_2D) > EPS then
		if gs_iSwingType=1 then 
			arc2 0, 0, OpLineLeafWidth/2, 180 - gs_open_2D,  180
			arc2 0, 0, OpLineLeafWidth/2, -gs_open_2D,  0
		else
			line2 -OpLineLeafWidth/2, 0, -OpLineLeafWidth/2 * cos(gs_open_2D), OpLineLeafWidth/2 * sin(gs_open_2D)
			line2 OpLineLeafWidth/2, 0, OpLineLeafWidth/2 * cos(gs_open_2D), -OpLineLeafWidth/2 * sin(gs_open_2D)
		endif
	endif

	del 1
return


! ---------------------------------------------------------------------------
"handle":
! ---------------------------------------------------------------------------
	if iDetLevel2D > DETLEVEL_2D_50 then return

	pen			pFillS[FILL_HANDLE][FP_CONTPEN]
	line_type	lFillS[FILL_HANDLE]
	Fill		fFillS[FILL_HANDLE]
	Pen_FG = pFillS[FILL_HANDLE][FP_FGPEN]
	Pen_BG = pFillS[FILL_HANDLE][FP_BGPEN]

	! --- Handle #1 ---
	if iHandleType = HANDLE_1 then
		poly2_b 5, 7, Pen_FG, Pen_BG,
			-rHandleBase, 0, 1,
			 rHandleBase, 0, 1,
			 rHandleBase, tHandleBase, 1,
			-rHandleBase, tHandleBase, 1,
			-rHandleBase, 0, -1
		add2 0, tHandleBase
		if	iHandleStatus	= HANDLE_SIDE then
			if	abs(rHandleCurve) > EPS then
				poly2_b 9, 7, Pen_FG, Pen_BG,
					-rHandle, 0, 1,
					-rHandle, lHandle1 - rHandleCurve, 1,
					 rHandleCurve, lHandle1 + rHandle, 1001,
					 lHandle2, lHandle1 + rHandle, 1,
					 lHandle2, lHandle1 - rHandle, 1,
					 rHandleCurve, lHandle1 - rHandle, 1,
					 rHandle, lHandle1 - rHandleCurve, 1001,
					 rHandle, 0, 1,
					-rHandle, 0, -1
			else
				poly2_b 7, 7, Pen_FG, Pen_BG,
					-rHandle, 0, 1,
					-rHandle, lHandle1 + rHandle, 1,
					 lHandle2, lHandle1 + rHandle, 1,
					 lHandle2, lHandle1 - rHandle, 1,
					 rHandle, lHandle1 - rHandle, 1,
					 rHandle, 0, 1,
					-rHandle, 0, -1
			endif
		endif
		if	iHandleStatus	= HANDLE_DOWN |\
			iHandleStatus	= HANDLE_UP then
			poly2_b 7, 7, Pen_FG, Pen_BG,
				-rHandle, 0, 1,
				-rHandle, lHandle1 - rHandle, 1,
				0,		lHandle1 - rHandle, 900,
				0,		-180,	4001,
				rHandle, lHandle1 - rHandle, 1,
				rHandle, 0, 1, 	
				-rHandle, 0, -1
		endif

		del 1
	endif

!	! --- Handle #2 ---
!
return

! ---------------------------------------------------------------------------
"hinge":
! ---------------------------------------------------------------------------
	if nHinge < EPS or iDetLevel2D > DETLEVEL_2D_50 then return

	pen			pFillS[FILL_HANDLE][FP_CONTPEN]
	line_type	lFillS[FILL_HANDLE]
	Fill		fFillS[FILL_HANDLE]
	Pen_FG = pFillS[FILL_HANDLE][FP_FGPEN]
	Pen_BG = pFillS[FILL_HANDLE][FP_BGPEN]

	! --- Hinge #1 ---
	if iHingeType = HINGE_1 then
		poly2_b 2, 7, Pen_FG, Pen_BG,
			0, 0, 901,
			rHinge, 360, 4001
	endif

!	! --- Hinge #2 ---
!
return


]]></Script_2D>

<!-- GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT -->

<Script_1D SectVersion="20" SectionFlags="0" SubIdent="0"><![CDATA[

EPS = 0.001


TubeStatus 	= 1+2+32+16 + 64	!!!! Default Tube Status
ShowHoles	= 1					!!!! If you want to hide the holes in the profiles switch it to 0
ShowArcs	= 1					!!!! Show Profile Arcs in 3D


! iOpeningType:
	OPTYPE_EMPTY				= -1	! Empty (no sash, no glass)
	OPTYPE_SOLID				= 0		! Solid panel in sash
	OPTYPE_FIXED				= 1		! Fixed Glass
	OPTYPE_FIXED_SCREW			= 2		! Fixed Sash
	OPTYPE_SIDE_HUNG			= 3		! Side Hung
	OPTYPE_SIDE_HUNG_M			= 4		! Side Hung Mirrored
	OPTYPE_TILT_TURN			= 5		! Tilt and Turn
	OPTYPE_TILT_TURN_M			= 6		! Tilt and Turn Mirrored
	OPTYPE_BOTTOM_HUNG			= 7		! Bottom Hung
	OPTYPE_TOP_HUNG				= 8		! Top Hung
	OPTYPE_HOR_PIVOT			= 9		! Horizontal Pivot Hung
	OPTYPE_VER_PIVOT			= 10	! Vertical Pivotted
	OPTYPE_TILT_SLIDE			= 11	! Tilt and Slide
	OPTYPE_LEFT_SLIDING			= 12	! Left Sliding
	OPTYPE_RIGHT_SLIDING		= 13	! Right Sliding
	OPTYPE_UP_SLIDING			= 14	! Sliding Up
	OPTYPE_DOWN_SLIDING			= 15	! Sliding Down
	OPTYPE_VER_PIVOT_M			= 16	! Vertical Pivotted Mirrored
	OPTYPE_DOUBLE_SIDE_HUNG		= 18	! Double Sash
	OPTYPE_DOUBLE_TILT_TURN		= 19	! Double Tilt and Turn
	OPTYPE_DOUBLE_TILT_TURN_M	= 20	! Double Tilt and Turn Mirrored
	OPTYPE_SLIDING_HOR			= 21	! Sliding
	OPTYPE_SLIDING_HOR_M		= 22	! Sliding Mirrored
	OPTYPE_DOUBLE_SLIDING_HOR	= 23	! Double Sliding
	OPTYPE_DOUBLE_SLIDING_HOR_M	= 24	! Double Sliding Mirrored
	OPTYPE_SLIDING_VER			= 25	! Single Hung
	OPTYPE_DOUBLE_SLIDING_VER	= 26	! Double Hung
	OPTYPE_SLIDING_FIX			= 27	! Sliding Fix
	OPTYPE_SLIDING_FIX_M		= 28	! Sliding Fix Mirrored
	OPTYPE_TOP_SWING			= 31	! Top Swing
	OPTYPE_SIDE_SWING			= 32	! Side Swing
	OPTYPE_SIDE_SWING_M			= 33	! Side Swing mirrored
	OPTYPE_TOP_TURN				= 34	! Top Turn
	OPTYPE_FIXED_COMBI			= 35	! Fixed Glass Combi window

! iGlassType
	GLASS_4_12_4_12_4	= 1
	GLASS_4_10_4		= 2


! iDetLevel2D
	DETLEVEL_2D_MVO		= -2
	DETLEVEL_2D_SCALE	= -1
	DETLEVEL_2D_OFF		= 0
	DETLEVEL_2D_10		= 10
	DETLEVEL_2D_50		= 50
	DETLEVEL_2D_100		= 100
	DETLEVEL_2D_200		= 200

! iDetLevel3D
	DETLEVEL_3D_MVO		= -2
	DETLEVEL_3D_SCALE	= -1
	DETLEVEL_3D_OFF		= 0
	DETLEVEL_3D_10		= 10
	DETLEVEL_3D_50		= 50
	DETLEVEL_3D_100		= 100

! Profile array indexes
	PAI_PRNUM		= 1
	PAI_MOVX		= 2
	PAI_MOVY		= 3
	PAI_ROT			= 4
	PAI_MIRRX		= 5
	PAI_MIRRY		= 6
	PAI_STARTOFFS	= 7
	PAI_ENDOFFS		= 8
	PAI_MAT			= 9
	PAI_STARTROT	= 10
	PAI_ENDROT		= 11
	PAI_FILL		= 12

! Fill/contour array column positions as seen in sect_attrs
	FP_BGPEN		= 1		! Background pen
	FP_FGPEN		= 2		! Foreground pen
	FP_CONTPEN		= 3		! Contour pen
	FP_FILL			= 4		! Type
	FP_LTYPE		= 5		! Linetype

! iType3D
	MAT_IN			= 1		! Inner side surface
	MAT_OUT			= 2		! Outer side surface
	MAT_SHUTBOX		= 3		! Shutter box
	MAT_STEEL		= 4 	! Steel surface
	MAT_SEALANT		= 5		! Sealant surface
	MAT_THERMAL		= 6		! Thermal blocker
	MAT_GLASSBACK 	= 7		! Glassback
	MAT_BRUSH		= 8		! Brush
	MAT_GLASS		= 9		! Glass surface
	MAT_HANDLE		= 10	! Operator (handle, hinge) surfaces
	MAT_THRESHOLD	= 11	! Threshold
	MAT_SASH_IN		= 12	! Sash inner, if differs from frame
	MAT_SASH_OUT	= 13	! Sash outer, if differs from frame
	MAT_FOAM 		= 14 	! Foam fillings
	MAT_SHUTSLAT	= 15	! Shutter slats
	
!iType2D - 2d pen settings
	FILL_EMPTY			= 1 ! Non section lines
	FILL_ALU			= 2 ! Aluminium
	FILL_WOOD			= 3 ! Timber
	FILL_PVC			= 4 ! PVC
	FILL_STEEL			= 5 ! Steel
	FILL_FOAM			= 6 ! Foam
	FILL_SEALANT		= 7 ! Gum
	FILL_THERMAL		= 8 ! Thermal blocker
	FILL_GLASS			= 9 ! Glass
	FILL_SASH			= 10 ! Sash
	FILL_FRAME			= 11 ! Frame
	FILL_HANDLE			= 12 ! Operator (kilincs, vasalat) szín
	FILL_WALLHOLE		= 13 ! Wallhole fill
	FILL_ORIGFRAME		= 14 ! Original frame fill

! gs_iSlidingType:
	LINE_SHAPE_SLIDING_NONE			= 0
	LINE_SHAPE_SLIDING_ARROW		= 1
	LINE_SHAPE_SLIDING_SIMPLE_LINE	= 2

! iHandleType
	HANDLE_NONE			= 1
	HANDLE_1			= 2

! iHingeType
	HINGE_NONE			= 1
	HINGE_1				= 2

! iHandleStatus
	HANDLE_DOWN			= 1
	HANDLE_SIDE			= 2
	HANDLE_UP			= 3

! ==================================================================
! Leaf variables
! ==================================================================

bLeafXMirr	= (iOpeningType = OPTYPE_RIGHT_SLIDING |\
				iOpeningType = OPTYPE_SIDE_HUNG_M |\
				iOpeningType = OPTYPE_TILT_TURN_M |\
				iOpeningType = OPTYPE_VER_PIVOT_M)
LeafXMirr		= 1 - 2 * bLeafXMirr

bLeafYMirr	=	(iOpeningType = OPTYPE_TOP_HUNG)
LeafYMirr		= 1 - 2 * bLeafYMirr

bHSRevAng	= not(bLeafXMirr) exor not(bOpenOut)
HSRevAng	= 1 - 2 * bHSRevAng


OpLineLeafWidth		= A + hingeOffsX
OpLineLeafHeight	= B + hingeOffsX

! ------------------------------------------------------------------
! Handle
! ------------------------------------------------------------------
iHandleType = HANDLE_1

if iHandleType = HANDLE_1 then
	rHandle			= 0.010		! radius of handle
	lHandle1		= 0.045		! length of 1st part
	lHandle2		= 0.110		! length of 2nd part
	rHandleBase		= 0.020		! radius of base
	tHandleBase		= 0.006		! thickness of base
	rHandleCurve	= 0.020		! radius of curve, 0 means not filleted corner
	distHandleBase	= 0.080		! distance between bases
endif

if isWindow then
	if	iOpeningType = OPTYPE_BOTTOM_HUNG |\
		iOpeningType = OPTYPE_TOP_HUNG |\
		iOpeningType = OPTYPE_HOR_PIVOT then

		iHandleStatus	= HANDLE_SIDE
		if	(GLOB_SCRIPT_TYPE = 3 &\
			abs(gs_open_3D) > EPS) |\
			(GLOB_SCRIPT_TYPE = 2 &\
			abs(gs_open_2D) > EPS) then

			iHandleStatus	= HANDLE_DOWN

		endif
	else
		iHandleStatus	= HANDLE_DOWN
		if GLOB_SCRIPT_TYPE = 3 then
			if abs(gs_open_3D) > EPS then
				iHandleStatus	= HANDLE_SIDE
			endif
			if abs(gs_open_3D_tt) > EPS then
				iHandleStatus	= HANDLE_UP
			endif
		endif
		if GLOB_SCRIPT_TYPE = 2 then
			if abs(gs_open_2D) > EPS then
				iHandleStatus	= HANDLE_SIDE
			endif
		endif
	endif
else
	iHandleStatus	= HANDLE_SIDE
endif


! ------------------------------------------------------------------
! Hinge
! ------------------------------------------------------------------
iHingeType = HINGE_1

if iHingeType = HINGE_1 then
	rHinge		= 0.005		! radius of cylinder
	hHingeB		= 0.040		! height of lower part
	hHingeT		= 0.035		! height of upper part
	gapHinge	= 0.001		! gap between the lower and the upper part
endif

matHinge	= gs_handle_mat

dim zPosHinges[]
nHinge	= 0
hHinge	= hHingeB + hHingeT + gapHinge
nHinge	= nHinge + 1 : zPosHinges[nHinge] = -B/2 + abs(B/2 - hHinge) * 0.3 + hHingeB + gapHinge/2
nHinge	= nHinge + 1 : zPosHinges[nHinge] =  B/2 - abs(B/2 - hHinge) * 0.3 - hHingeT - gapHinge/2


!!!!!!**********************************************************************  Define Glass Panels - PARAMETERS
!!!!!!**********************************************************************  Define Glass Panels - PARAMETERS 
!!!!!!**********************************************************************  Define Glass Panels - PARAMETERS

OffsetGBot 	= 0.032 :	OffsetGTop 	= 0.032
OffsetGR 	= 0.032 :	OffsetGL 	= 0.032
GumiDepth = 0.01
OffsetZ = 0.009

dim GlassThk[][2]


GlassThk[1][1] = 0.004
GlassThk[1][2] = 0.010
GlassThk[2][1] = 0.004
GlassThk[2][2] = -1

if iGlassType = GLASS_4_12_4_12_4 then
	GlassThk[1][1] = 0.004
	GlassThk[1][2] = 0.012
	GlassThk[2][1] = 0.004
	GlassThk[2][2] = 0.012
	GlassThk[3][1] = 0.004
	GlassThk[3][2] = -1
endif

GlassLayers = vardim1(GlassThk)

GlazingThk = 0
for i = 1 to GlassLayers
	GlazingThk = GlazingThk + GlassThk[i][1]
	if GlassThk[i][2] <> -1 then
		GlazingThk = GlazingThk + GlassThk[i][2]
	endif
next i

! ==============================================================================
!
! End of Master Script
!
! ==============================================================================

goto "endMasterSript"

! ==============================================================================
!
! SubRutines
!
! ==============================================================================

! ==============================================================================
!  Profile definitons
! ==============================================================================

"LeafType1":
	dim ProfArr[][]
	PN = 1

	ProfArr[PN][PAI_PRNUM] = 101	: ProfArr[PN][PAI_MOVX] = 0		: ProfArr[PN][PAI_MOVY] = 0
	ProfArr[PN][PAI_ROT] = 90		: ProfArr[PN][PAI_MIRRX] = 1	: ProfArr[PN][PAI_MIRRY] = 0
	ProfArr[PN][PAI_STARTOFFS] = 0	: ProfArr[PN][PAI_ENDOFFS] = 0	: ProfArr[PN][PAI_MAT] = MAT_SASH_OUT
	ProfArr[PN][PAI_STARTROT] = 0	: ProfArr[PN][PAI_ENDROT] = 0	: ProfArr[PN][PAI_FILL] = FILL_SASH
	PN = PN+1

	ProfArr[PN][PAI_PRNUM] = 102	: ProfArr[PN][PAI_MOVX] = 0		: ProfArr[PN][PAI_MOVY] = 0
	ProfArr[PN][PAI_ROT] = 90		: ProfArr[PN][PAI_MIRRX] = 1	: ProfArr[PN][PAI_MIRRY] = 0
	ProfArr[PN][PAI_STARTOFFS] = 0	: ProfArr[PN][PAI_ENDOFFS] = 0	: ProfArr[PN][PAI_MAT] = MAT_SASH_IN
	ProfArr[PN][PAI_STARTROT] = 0	: ProfArr[PN][PAI_ENDROT] = 0	: ProfArr[PN][PAI_FILL] = FILL_SASH
	PN = PN+1

	ProfArr[PN][PAI_PRNUM] = 202	: ProfArr[PN][PAI_MOVX] = 0		: ProfArr[PN][PAI_MOVY] = 0
	ProfArr[PN][PAI_ROT] = 90		: ProfArr[PN][PAI_MIRRX] = 1	: ProfArr[PN][PAI_MIRRY] = 0
	ProfArr[PN][PAI_STARTOFFS] = 0	: ProfArr[PN][PAI_ENDOFFS] = 0	: ProfArr[PN][PAI_MAT] = MAT_SEALANT
	ProfArr[PN][PAI_STARTROT] = 0	: ProfArr[PN][PAI_ENDROT] = 0	: ProfArr[PN][PAI_FILL] = FILL_SEALANT
	PN = PN+1

	ProfArr[PN][PAI_PRNUM] = 202	: ProfArr[PN][PAI_MOVX] = 0		: ProfArr[PN][PAI_MOVY] = 0.021
	ProfArr[PN][PAI_ROT] = 90		: ProfArr[PN][PAI_MIRRX] = 1	: ProfArr[PN][PAI_MIRRY] = 0
	ProfArr[PN][PAI_STARTOFFS] = 0	: ProfArr[PN][PAI_ENDOFFS] = 0	: ProfArr[PN][PAI_MAT] = MAT_SEALANT
	ProfArr[PN][PAI_STARTROT] = 0	: ProfArr[PN][PAI_ENDROT] = 0	: ProfArr[PN][PAI_FILL] = FILL_SEALANT
	PN = PN+1

	if GLOB_SCRIPT_TYPE = 3 then
		PUT -A/2 + 1,	-B/2,		0, 0 
		PUT -A/2,		-B/2,		0, 0 
		PUT -A/2, 		 B/2,		0, 0 
		PUT  A/2, 		 B/2,		0, 0 
		PUT  A/2, 		-B/2,		0, 0 
		PUT -A/2, 		-B/2,		0, 0 
		PUT -A/2, 		-B/2 + 1,	0, 0 
	else
		put -A/2,  0, -1
		put  A/2,  0,  1
	endif

	PathNum = nsp / 4 
	gosub "PlaceFrameGroup"
return

! ==============================================================================
! /Profile definitons
! ==============================================================================

! ==============================================================================
! Calculate VECTOR Angle Normal Angle
! ------------------------------------------------------------------------------

"VectorAngle":
	!!!  INCOMING: dx, dy
	!!!  RETURNING: VectAng
		
	VectAng = 90
	if abs (dx) > EPS then 
		VectAng = atn (dy / dx)
		if VectAng > 0  and dx < EPS then VectAng = VectAng + 180
		if VectAng <= 0 and dx < EPS then VectAng = VectAng + 180
	else
		if dy > EPS then 
			VectAng = 90 
		else
			VectAng = 270 
		endif
	endif

	if VectAng < EPS then VectAng=VectAng + 360
return

! ==============================================================================

"CleanStack":
	for z = 1 to nsp
		temp = get (1)
	next z
return

!!!!!!!!!!!!!!!!*********************************************************** Place FrameGroup
"PlaceFrameGroup":
	dim TubeCoordS[][]
	if GLOB_SCRIPT_TYPE = 2 then
		PathNum = nsp / 3
		for tp=1 to PathNum
			TubeCoordS[tp][1] = get(1)	!X
			TubeCoordS[tp][2] = get(1)	!Y
			TubeCoordS[tp][3] = get(1)	!mir x
		next tp
	else
		PathNum = nsp / 4
		for tp=1 to PathNum
			TubeCoordS[tp][1] = get(1)	!X
			TubeCoordS[tp][2] = get(1)	!Y
			TubeCoordS[tp][3] = get(1)	!Z
			TubeCoordS[tp][4] = get(1)	!Rotation, should be 0
		next tp
	endif

	for fnm = 1 to PN-1
		CALL "Profil_WMCC" PARAMETERS 	all	\
			ShowHoles 		= ShowHoles,
			ShowArcs 		= ShowArcs,
			ProfArr 		= ProfArr[fnm],				!
			TubeCoordS		= TubeCoordS, 				!
			PathNum			= PathNum
		ProfilNum = nsp/3	
	next fnm
return

! ==============================================================================
!
! End of Macros Script
!
! ==============================================================================

"endMasterSript":



]]></Script_1D>

<!-- GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT -->

<Script_PR SectVersion="20" SectionFlags="0" SubIdent="0"><![CDATA[

]]></Script_PR>

<!-- GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT -->

<Script_UI SectVersion="20" SectionFlags="0" SubIdent="0"><![CDATA[

]]></Script_UI>

<!-- GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT -->

<Script_VL SectVersion="20" SectionFlags="0" SubIdent="0"><![CDATA[

]]></Script_VL>

<!-- GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT -->

<Script_FWM SectVersion="20" SectionFlags="0" SubIdent="0"><![CDATA[

]]></Script_FWM>

<!-- GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT -->

<Script_BWM SectVersion="20" SectionFlags="0" SubIdent="0"><![CDATA[

]]></Script_BWM>

<Keywords SectVersion="1" SectionFlags="0" SubIdent="0">
<![CDATA[]]>
</Keywords>

<!-- GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT ===== GDL SCRIPT -->

<Comment SectVersion="20" SectionFlags="0" SubIdent="0">
<![CDATA[]]>
</Comment>

<Copyright SectVersion="1" SectionFlags="0" SubIdent="0"><Author>BIMobject</Author><License><Type>CC BY-ND</Type><Version>3.0</Version></License></Copyright><ParamSection SectVersion="25" SectionFlags="0" SubIdent="0">
	<ParamSectHeader>
		<Version>25</Version>
		<AutoHotspots>no</AutoHotspots>
		<StatBits>
			<STBit_FixSize/>
		</StatBits>
		<WDLeftFrame>0</WDLeftFrame>
		<WDRightFrame>0</WDRightFrame>
		<WDTopFrame>0</WDTopFrame>
		<WDBotFrame>0</WDBotFrame>
		<LayFlags>65535</LayFlags>
		<WDMirrorThickness>0</WDMirrorThickness>
		<WDWallInset>0</WDWallInset>
		<SymbolColor>0</SymbolColor>
	</ParamSectHeader>
	<Parameters>
		<Length Name="A">
			<Description><![CDATA["Dimension 1"]]></Description>
			<Value>1</Value>
		</Length>
		<Length Name="B">
			<Description><![CDATA["Dimension 2"]]></Description>
			<Value>1</Value>
		</Length>
		<Length Name="ZZYZX">
			<Description><![CDATA["Height"]]></Description>
			<Value>1</Value>
		</Length>
		<Boolean Name="AC_show2DHotspotsIn3D">
			<Description><![CDATA["Show 2D Hotspots in 3D"]]></Description>
			<Flags>
				<ParFlg_Hidden/>
			</Flags>
			<Value>1</Value>
		</Boolean>
		<Length Name="ac_bottomlevel">
			<Description><![CDATA["Bottom Level"]]></Description>
			<Flags>
				<ParFlg_Hidden/>
			</Flags>
			<Value>1</Value>
		</Length>
		<Length Name="ac_toplevel">
			<Description><![CDATA["Top Level"]]></Description>
			<Flags>
				<ParFlg_Hidden/>
			</Flags>
			<Value>0</Value>
		</Length>
		<Integer Name="iOpeningType">
			<Description><![CDATA[""]]></Description>
			<Value>3</Value>
		</Integer>
		<Boolean Name="bOpenOut">
			<Description><![CDATA["Outward Opening"]]></Description>
			<Value>0</Value>
		</Boolean>
		<Integer Name="iLeafType">
			<Description><![CDATA["Leaf Type"]]></Description>
			<Value>1</Value>
		</Integer>
		<Integer Name="gs_resol">
			<Description><![CDATA[""]]></Description>
			<Value>18</Value>
		</Integer>
		<Length Name="gs_leaf_width">
			<Description><![CDATA[""]]></Description>
			<Value>0.08</Value>
		</Length>
		<Length Name="gs_leaf_thk">
			<Description><![CDATA[""]]></Description>
			<Value>0.06</Value>
		</Length>
		<Length Name="gs_frame_thk">
			<Description><![CDATA[""]]></Description>
			<Value>0.1</Value>
		</Length>
		<Integer Name="iGlassType">
			<Description><![CDATA[""]]></Description>
			<Value>1</Value>
		</Integer>
		<Length Name="LeafPosZ">
			<Description><![CDATA[""]]></Description>
			<Value>0</Value>
		</Length>
		<Length Name="hingeOffsX">
			<Description><![CDATA[""]]></Description>
			<Value>0</Value>
		</Length>
		<Length Name="hingeOffsZ">
			<Description><![CDATA[""]]></Description>
			<Value>0</Value>
		</Length>
		<Length Name="handleOffsX">
			<Description><![CDATA[""]]></Description>
			<Value>0.02</Value>
		</Length>
		<Length Name="handleOffsY">
			<Description><![CDATA[""]]></Description>
			<Value>0.4</Value>
		</Length>
		<Boolean Name="bShowHandle">
			<Description><![CDATA[""]]></Description>
			<Value>1</Value>
		</Boolean>
		<Boolean Name="bShowHinge">
			<Description><![CDATA[""]]></Description>
			<Value>1</Value>
		</Boolean>
		<Integer Name="UnID">
			<Description><![CDATA[""]]></Description>
			<Value>200</Value>
		</Integer>
		<Boolean Name="isWindow">
			<Description><![CDATA[""]]></Description>
			<Value>0</Value>
		</Boolean>
		<Integer Name="iDoublage">
			<Description><![CDATA[""]]></Description>
			<Value>1</Value>
		</Integer>
		<Length Name="DoublageThk">
			<Description><![CDATA[""]]></Description>
			<Value>0.1</Value>
		</Length>

		<!-- t_Surfaces: PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK -->

		<Title Name="t_Surfaces">
			<Description><![CDATA["Surfaces"]]></Description>
		</Title>
		<Material Name="gs_leaf_mat_out">
			<Description><![CDATA["Leaf Surface Outside"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>15</Value>
		</Material>
		<Material Name="gs_leaf_mat_in">
			<Description><![CDATA["Leaf Surface Inside"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>15</Value>
		</Material>
		<Material Name="gs_glass_mat">
			<Description><![CDATA["Glass Surface"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>29</Value>
		</Material>
		<Material Name="gs_handle_mat">
			<Description><![CDATA["Handle Surface"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>11</Value>
		</Material>

		<!-- gs_2D_representation: PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK -->

		<Title Name="gs_2D_representation">
			<Description><![CDATA["2D and Section Representation"]]></Description>
		</Title>
		<Integer Name="iDetLevel2D">
			<Description><![CDATA["2D Detail Level"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>10</Value>
		</Integer>
		<PenColor Name="gs_pen_2D">
			<Description><![CDATA["Uncut Line Pen"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>3</Value>
		</PenColor>
		<PenColor Name="gs_leaf_pen_2D">
			<Description><![CDATA["Leaf Contour Pen"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>3</Value>
		</PenColor>

		<!-- gs_3D_representation: PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK -->

		<Title Name="gs_3D_representation">
			<Description><![CDATA["3D Representation"]]></Description>
		</Title>
		<Integer Name="iDetLevel3D">
			<Description><![CDATA[""]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>10</Value>
		</Integer>
		<PenColor Name="gs_leaf_pen">
			<Description><![CDATA["Leaf Pen"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>3</Value>
		</PenColor>
		<PenColor Name="gs_glass_pen">
			<Description><![CDATA["Leaf Glass Pen"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>3</Value>
		</PenColor>

		<!-- gs_opening_params: PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK -->

		<Title Name="gs_opening_params">
			<Description><![CDATA["Opening"]]></Description>
		</Title>
		<Angle Name="gs_open_2D">
			<Description><![CDATA["Opening Angle in 2D"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Angle>
		<Angle Name="gs_open_3D">
			<Description><![CDATA["Opening Angle in 3D"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Angle>
		<Angle Name="gs_open_3D_tt">
			<Description><![CDATA["Opening Angle in 3D"]]></Description>
			<Value>0</Value>
		</Angle>
		<Length Name="gs_open_2D_w">
			<Description><![CDATA["Opening Width in 2D"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Length>
		<Length Name="gs_open_2D_2_w">
			<Description><![CDATA["Opening Width in 2D"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Length>
		<Length Name="gs_open_3D_w">
			<Description><![CDATA["Opening Width in 3D"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Length>
		<Length Name="gs_open_3D_2_w">
			<Description><![CDATA["Opening Width in 3D"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>0</Value>
		</Length>

		<!-- opening_lines: PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK -->

		<Title Name="opening_lines">
			<Description><![CDATA["Opening Lines"]]></Description>
		</Title>
		<Boolean Name="bOplines3d">
			<Description><![CDATA["Show Opening Line"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1</Value>
		</Boolean>
		<LineType Name="opLineType3dIn">
			<Description><![CDATA["Opening LineType In"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1</Value>
		</LineType>
		<LineType Name="opLineType3dOut">
			<Description><![CDATA["Opening LineType Out"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1</Value>
		</LineType>
		<Integer Name="gs_opline_style_m">
			<Description><![CDATA["Opening LineStyle [1-Handle, 2-Hinge]"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1</Value>
		</Integer>
		<PenColor Name="gs_opLinePen">
			<Description><![CDATA["Opening Line Pen"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>22</Value>
		</PenColor>
		<Integer Name="gs_iSwingType">
			<Description><![CDATA["Opening Line Shape"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1</Value>
		</Integer>
		<Integer Name="gs_iSlidingType">
			<Description><![CDATA["Opening Line Shape"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1</Value>
		</Integer>
		<LineType Name="gs_swingLineType">
			<Description><![CDATA["Opening Line Type"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>1</Value>
		</LineType>

		<!-- t_Fills: PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK ===== PARAMETER BLOCK -->

		<Title Name="t_Fills">
			<Description><![CDATA["Fills"]]></Description>
		</Title>
		<FillPattern Name="gs_fillLeaf">
			<Description><![CDATA["Leaf Fill Type"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>65</Value>
		</FillPattern>
		<PenColor Name="gs_penLeaf_fg">
			<Description><![CDATA["Leaf Fill Pen"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>103</Value>
		</PenColor>
		<PenColor Name="gs_penLeaf_bg">
			<Description><![CDATA["Leaf Fill Background Pen"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>19</Value>
		</PenColor>
		<FillPattern Name="fillType_glass">
			<Description><![CDATA[""]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>65</Value>
		</FillPattern>
		<PenColor Name="fillPenFg_glass">
			<Description><![CDATA[""]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>19</Value>
		</PenColor>
		<PenColor Name="fillPenBg_glass">
			<Description><![CDATA[""]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>19</Value>
		</PenColor>
		<FillPattern Name="fillType_sealant">
			<Description><![CDATA[""]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>65</Value>
		</FillPattern>
		<PenColor Name="fillPenFg_sealant">
			<Description><![CDATA[""]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>19</Value>
		</PenColor>
		<PenColor Name="fillPenBg_sealant">
			<Description><![CDATA[""]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>19</Value>
		</PenColor>
		<FillPattern Name="fillType_thermal">
			<Description><![CDATA[""]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>65</Value>
		</FillPattern>
		<PenColor Name="fillPenFg_thermal">
			<Description><![CDATA[""]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>19</Value>
		</PenColor>
		<PenColor Name="fillPenBg_thermal">
			<Description><![CDATA[""]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>19</Value>
		</PenColor>
		<FillPattern Name="gs_fillShCover">
			<Description><![CDATA[""]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>65</Value>
		</FillPattern>
		<PenColor Name="gs_penShCov_fg">
			<Description><![CDATA[""]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>19</Value>
		</PenColor>
		<PenColor Name="gs_penShCov_bg">
			<Description><![CDATA[""]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<Value>19</Value>
		</PenColor>
		<PenColor Name="pFillS">
			<Description><![CDATA["Fill pens"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<ArrayValues FirstDimension="17" SecondDimension="3">
				<AVal Column="1" Row="1">19</AVal>
				<AVal Column="2" Row="1">19</AVal>
				<AVal Column="3" Row="1">1</AVal>
				<AVal Column="1" Row="2">19</AVal>
				<AVal Column="2" Row="2">19</AVal>
				<AVal Column="3" Row="2">1</AVal>
				<AVal Column="1" Row="3">19</AVal>
				<AVal Column="2" Row="3">19</AVal>
				<AVal Column="3" Row="3">1</AVal>
				<AVal Column="1" Row="4">19</AVal>
				<AVal Column="2" Row="4">19</AVal>
				<AVal Column="3" Row="4">1</AVal>
				<AVal Column="1" Row="5">19</AVal>
				<AVal Column="2" Row="5">19</AVal>
				<AVal Column="3" Row="5">1</AVal>
				<AVal Column="1" Row="6">19</AVal>
				<AVal Column="2" Row="6">19</AVal>
				<AVal Column="3" Row="6">1</AVal>
				<AVal Column="1" Row="7">19</AVal>
				<AVal Column="2" Row="7">19</AVal>
				<AVal Column="3" Row="7">1</AVal>
				<AVal Column="1" Row="8">19</AVal>
				<AVal Column="2" Row="8">19</AVal>
				<AVal Column="3" Row="8">1</AVal>
				<AVal Column="1" Row="9">19</AVal>
				<AVal Column="2" Row="9">19</AVal>
				<AVal Column="3" Row="9">1</AVal>
				<AVal Column="1" Row="10">19</AVal>
				<AVal Column="2" Row="10">19</AVal>
				<AVal Column="3" Row="10">1</AVal>
				<AVal Column="1" Row="11">19</AVal>
				<AVal Column="2" Row="11">19</AVal>
				<AVal Column="3" Row="11">1</AVal>
				<AVal Column="1" Row="12">19</AVal>
				<AVal Column="2" Row="12">19</AVal>
				<AVal Column="3" Row="12">1</AVal>
				<AVal Column="1" Row="13">19</AVal>
				<AVal Column="2" Row="13">19</AVal>
				<AVal Column="3" Row="13">1</AVal>
				<AVal Column="1" Row="14">19</AVal>
				<AVal Column="2" Row="14">19</AVal>
				<AVal Column="3" Row="14">1</AVal>
				<AVal Column="1" Row="15">19</AVal>
				<AVal Column="2" Row="15">19</AVal>
				<AVal Column="3" Row="15">1</AVal>
				<AVal Column="1" Row="16">19</AVal>
				<AVal Column="2" Row="16">19</AVal>
				<AVal Column="3" Row="16">1</AVal>
				<AVal Column="1" Row="17">19</AVal>
				<AVal Column="2" Row="17">19</AVal>
				<AVal Column="3" Row="17">1</AVal>
			</ArrayValues>
		</PenColor>
		<FillPattern Name="fFillS">
			<Description><![CDATA["Fill fill types"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<ArrayValues FirstDimension="17" SecondDimension="0">
				<AVal Row="1">65</AVal>
				<AVal Row="2">1</AVal>
				<AVal Row="3">1</AVal>
				<AVal Row="4">1</AVal>
				<AVal Row="5">1</AVal>
				<AVal Row="6">1</AVal>
				<AVal Row="7">1</AVal>
				<AVal Row="8">1</AVal>
				<AVal Row="9">1</AVal>
				<AVal Row="10">1</AVal>
				<AVal Row="11">1</AVal>
				<AVal Row="12">1</AVal>
				<AVal Row="13">1</AVal>
				<AVal Row="14">1</AVal>
				<AVal Row="15">1</AVal>
				<AVal Row="16">1</AVal>
				<AVal Row="17">1</AVal>
			</ArrayValues>
		</FillPattern>
		<LineType Name="lFillS">
			<Description><![CDATA["Fill linetypes"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<ArrayValues FirstDimension="17" SecondDimension="0">
				<AVal Row="1">1</AVal>
				<AVal Row="2">1</AVal>
				<AVal Row="3">1</AVal>
				<AVal Row="4">1</AVal>
				<AVal Row="5">1</AVal>
				<AVal Row="6">1</AVal>
				<AVal Row="7">1</AVal>
				<AVal Row="8">1</AVal>
				<AVal Row="9">1</AVal>
				<AVal Row="10">1</AVal>
				<AVal Row="11">1</AVal>
				<AVal Row="12">1</AVal>
				<AVal Row="13">1</AVal>
				<AVal Row="14">1</AVal>
				<AVal Row="15">1</AVal>
				<AVal Row="16">1</AVal>
				<AVal Row="17">1</AVal>
			</ArrayValues>
		</LineType>
		<Material Name="materialS">
			<Description><![CDATA["Materials' array"]]></Description>
			<Flags>
				<ParFlg_Child/>
			</Flags>
			<ArrayValues FirstDimension="14" SecondDimension="0">
				<AVal Row="1">1</AVal>
				<AVal Row="2">2</AVal>
				<AVal Row="3">3</AVal>
				<AVal Row="4">4</AVal>
				<AVal Row="5">5</AVal>
				<AVal Row="6">6</AVal>
				<AVal Row="7">7</AVal>
				<AVal Row="8">8</AVal>
				<AVal Row="9">9</AVal>
				<AVal Row="10">10</AVal>
				<AVal Row="11">11</AVal>
				<AVal Row="12">12</AVal>
				<AVal Row="13">13</AVal>
				<AVal Row="14">14</AVal>
			</ArrayValues>
		</Material>
	</Parameters>
</ParamSection>
</Symbol>
